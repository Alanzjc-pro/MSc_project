// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.460250,HLS_SYN_LAT=4225,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=241,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V_address0,
        spksTime_V_ce0,
        spksTime_V_q0,
        elements_V_address0,
        elements_V_ce0,
        elements_V_q0,
        FR_V_address0,
        FR_V_ce0,
        FR_V_we0,
        FR_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] spksTime_V_address0;
output   spksTime_V_ce0;
input  [18:0] spksTime_V_q0;
output  [6:0] elements_V_address0;
output   elements_V_ce0;
input  [7:0] elements_V_q0;
output  [6:0] FR_V_address0;
output   FR_V_ce0;
output   FR_V_we0;
output  [7:0] FR_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_V_ce0;
reg elements_V_ce0;
reg[6:0] FR_V_address0;
reg FR_V_ce0;
reg FR_V_we0;
reg[7:0] FR_V_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_173_p2;
reg   [6:0] i_reg_271;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln10_fu_179_p1;
reg   [63:0] zext_ln10_reg_276;
wire   [0:0] icmp_ln9_fu_167_p2;
wire   [12:0] add_ln1498_fu_208_p2;
reg   [12:0] add_ln1498_reg_288;
wire    ap_CS_fsm_state3;
reg   [6:0] c_V_addr_1_reg_293;
reg   [7:0] elements_V_load_reg_298;
wire   [7:0] j_fu_219_p2;
reg   [7:0] j_reg_306;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln10_fu_214_p2;
reg   [6:0] c_V_address0;
reg    c_V_ce0;
reg    c_V_we0;
reg   [7:0] c_V_d0;
wire   [7:0] c_V_q0;
reg   [6:0] i_0_reg_139;
wire    ap_CS_fsm_state6;
reg   [7:0] i_op_assign_reg_151;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln1498_3_fu_235_p1;
wire   [0:0] nospikes_0_load_load_fu_251_p1;
wire   [6:0] FR_V_addr_gep_fu_130_p3;
reg   [0:0] nospikes_0_fu_62;
wire   [0:0] icmp_ln1498_fu_240_p2;
wire   [7:0] r_V_fu_254_p2;
wire   [11:0] tmp_2_fu_184_p3;
wire   [9:0] tmp_3_fu_196_p3;
wire   [12:0] zext_ln1498_1_fu_204_p1;
wire   [12:0] zext_ln1498_fu_192_p1;
wire   [12:0] zext_ln1498_2_fu_226_p1;
wire   [12:0] add_ln1498_1_fu_230_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

estimate_FR_c_V #(
    .DataWidth( 8 ),
    .AddressRange( 95 ),
    .AddressWidth( 7 ))
c_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_V_address0),
    .ce0(c_V_ce0),
    .we0(c_V_we0),
    .d0(c_V_d0),
    .q0(c_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_139 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_139 <= i_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_op_assign_reg_151 <= j_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_op_assign_reg_151 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        nospikes_0_fu_62 <= icmp_ln1498_fu_240_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        nospikes_0_fu_62 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln1498_reg_288[12 : 3] <= add_ln1498_fu_208_p2[12 : 3];
        c_V_addr_1_reg_293 <= zext_ln10_reg_276;
        elements_V_load_reg_298 <= elements_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_271 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_306 <= j_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_276[6 : 0] <= zext_ln10_fu_179_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((nospikes_0_load_load_fu_251_p1 == 1'd1)) begin
            FR_V_address0 = FR_V_addr_gep_fu_130_p3;
        end else if ((nospikes_0_load_load_fu_251_p1 == 1'd0)) begin
            FR_V_address0 = zext_ln10_reg_276;
        end else begin
            FR_V_address0 = 'bx;
        end
    end else begin
        FR_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (nospikes_0_load_load_fu_251_p1 == 1'd1)) | ((nospikes_0_load_load_fu_251_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        FR_V_ce0 = 1'b1;
    end else begin
        FR_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((nospikes_0_load_load_fu_251_p1 == 1'd1)) begin
            FR_V_d0 = 8'd0;
        end else if ((nospikes_0_load_load_fu_251_p1 == 1'd0)) begin
            FR_V_d0 = r_V_fu_254_p2;
        end else begin
            FR_V_d0 = 'bx;
        end
    end else begin
        FR_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (nospikes_0_load_load_fu_251_p1 == 1'd1)) | ((nospikes_0_load_load_fu_251_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        FR_V_we0 = 1'b1;
    end else begin
        FR_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln10_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        c_V_address0 = c_V_addr_1_reg_293;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        c_V_address0 = 64'd0;
    end else begin
        c_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln10_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        c_V_ce0 = 1'b1;
    end else begin
        c_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_V_d0 = j_fu_219_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        c_V_d0 = 8'd0;
    end else begin
        c_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        c_V_we0 = 1'b1;
    end else begin
        c_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        elements_V_ce0 = 1'b1;
    end else begin
        elements_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        spksTime_V_ce0 = 1'b1;
    end else begin
        spksTime_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_V_addr_gep_fu_130_p3 = zext_ln10_reg_276;

assign add_ln1498_1_fu_230_p2 = (add_ln1498_reg_288 + zext_ln1498_2_fu_226_p1);

assign add_ln1498_fu_208_p2 = (zext_ln1498_1_fu_204_p1 + zext_ln1498_fu_192_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign elements_V_address0 = zext_ln10_fu_179_p1;

assign i_fu_173_p2 = (i_0_reg_139 + 7'd1);

assign icmp_ln10_fu_214_p2 = ((i_op_assign_reg_151 == elements_V_load_reg_298) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_240_p2 = ((spksTime_V_q0 == 19'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_167_p2 = ((i_0_reg_139 == 7'd96) ? 1'b1 : 1'b0);

assign j_fu_219_p2 = (i_op_assign_reg_151 + 8'd1);

assign nospikes_0_load_load_fu_251_p1 = nospikes_0_fu_62;

assign r_V_fu_254_p2 = c_V_q0 << 8'd2;

assign spksTime_V_address0 = zext_ln1498_3_fu_235_p1;

assign tmp_2_fu_184_p3 = {{i_0_reg_139}, {5'd0}};

assign tmp_3_fu_196_p3 = {{i_0_reg_139}, {3'd0}};

assign zext_ln10_fu_179_p1 = i_0_reg_139;

assign zext_ln1498_1_fu_204_p1 = tmp_3_fu_196_p3;

assign zext_ln1498_2_fu_226_p1 = i_op_assign_reg_151;

assign zext_ln1498_3_fu_235_p1 = add_ln1498_1_fu_230_p2;

assign zext_ln1498_fu_192_p1 = tmp_2_fu_184_p3;

always @ (posedge ap_clk) begin
    zext_ln10_reg_276[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    add_ln1498_reg_288[2:0] <= 3'b000;
end

endmodule //estimate_FR
