// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<4> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<4> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<4> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_FR::ap_const_lv32_2 = "10";
const sc_lv<32> estimate_FR::ap_const_lv32_3 = "11";
const sc_lv<8> estimate_FR::ap_const_lv8_0 = "00000000";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const sc_lv<21> estimate_FR::ap_const_lv21_0 = "000000000000000000000";
const sc_lv<64> estimate_FR::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> estimate_FR::ap_const_lv7_0 = "0000000";
const sc_lv<21> estimate_FR::ap_const_lv21_1999 = "1100110011001";
const sc_lv<8> estimate_FR::ap_const_lv8_C8 = "11001000";
const sc_lv<8> estimate_FR::ap_const_lv8_1 = "1";
const sc_lv<7> estimate_FR::ap_const_lv7_4B = "1001011";
const sc_lv<7> estimate_FR::ap_const_lv7_1 = "1";
const sc_lv<3> estimate_FR::ap_const_lv3_0 = "000";
const sc_lv<10> estimate_FR::ap_const_lv10_0 = "0000000000";
const sc_lv<64> estimate_FR::ap_const_lv64_1 = "1";
const sc_lv<22> estimate_FR::ap_const_lv22_1999 = "1100110011001";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_FR_mul_mul_8ns_14ns_22_1_1_U1 = new estimate_FR_mul_mul_8ns_14ns_22_1_1<1,1,8,14,22>("estimate_FR_mul_mul_8ns_14ns_22_1_1_U1");
    estimate_FR_mul_mul_8ns_14ns_22_1_1_U1->din0(mul_ln1118_fu_241_p0);
    estimate_FR_mul_mul_8ns_14ns_22_1_1_U1->din1(mul_ln1118_fu_241_p1);
    estimate_FR_mul_mul_8ns_14ns_22_1_1_U1->dout(mul_ln1118_fu_241_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FR_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln14_fu_165_p1 );

    SC_METHOD(thread_FR_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_FR_V_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( shl_ln703_1_fu_186_p3 );
    sensitive << ( shl_ln_fu_174_p3 );

    SC_METHOD(thread_FR_V_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln9_fu_148_p2 );

    SC_METHOD(thread_add_ln8_fu_126_p2);
    sensitive << ( r_V_reg_88 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_132_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_132_p2 );

    SC_METHOD(thread_count_V_fu_219_p2);
    sensitive << ( t_V_reg_99 );

    SC_METHOD(thread_icmp_ln1496_fu_209_p2);
    sensitive << ( zext_ln8_reg_247 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( shl_ln1_fu_201_p3 );

    SC_METHOD(thread_icmp_ln1497_fu_214_p2);
    sensitive << ( mul_ln1118_reg_265 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( shl_ln1_fu_201_p3 );

    SC_METHOD(thread_icmp_ln8_fu_132_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_V_reg_76 );

    SC_METHOD(thread_icmp_ln9_fu_148_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_j_fu_154_p2);
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_mul_ln1118_fu_241_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( mul_ln1118_fu_241_p00 );

    SC_METHOD(thread_mul_ln1118_fu_241_p00);
    sensitive << ( tmp_V_1_fu_138_p2 );

    SC_METHOD(thread_mul_ln1118_fu_241_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_select_ln10_fu_225_p3);
    sensitive << ( t_V_reg_99 );
    sensitive << ( icmp_ln1497_fu_214_p2 );
    sensitive << ( count_V_fu_219_p2 );

    SC_METHOD(thread_select_ln1496_fu_233_p3);
    sensitive << ( t_V_reg_99 );
    sensitive << ( icmp_ln1496_fu_209_p2 );
    sensitive << ( select_ln10_fu_225_p3 );

    SC_METHOD(thread_shl_ln1_fu_201_p3);
    sensitive << ( spksTime_V_q0 );

    SC_METHOD(thread_shl_ln703_1_fu_186_p3);
    sensitive << ( trunc_ln703_1_fu_182_p1 );

    SC_METHOD(thread_shl_ln_fu_174_p3);
    sensitive << ( trunc_ln703_fu_170_p1 );

    SC_METHOD(thread_spksTime_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln10_fu_160_p1 );

    SC_METHOD(thread_spksTime_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_V_1_fu_138_p2);
    sensitive << ( tmp_V_reg_76 );

    SC_METHOD(thread_trunc_ln703_1_fu_182_p1);
    sensitive << ( t_V_reg_99 );

    SC_METHOD(thread_trunc_ln703_fu_170_p1);
    sensitive << ( t_V_reg_99 );

    SC_METHOD(thread_zext_ln10_fu_160_p1);
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_zext_ln14_fu_165_p1);
    sensitive << ( tmp_V_reg_76 );

    SC_METHOD(thread_zext_ln8_fu_122_p1);
    sensitive << ( r_V_reg_88 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_132_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln9_fu_148_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime_V_address0, "(port)spksTime_V_address0");
    sc_trace(mVcdFile, spksTime_V_ce0, "(port)spksTime_V_ce0");
    sc_trace(mVcdFile, spksTime_V_q0, "(port)spksTime_V_q0");
    sc_trace(mVcdFile, FR_V_address0, "(port)FR_V_address0");
    sc_trace(mVcdFile, FR_V_ce0, "(port)FR_V_ce0");
    sc_trace(mVcdFile, FR_V_we0, "(port)FR_V_we0");
    sc_trace(mVcdFile, FR_V_d0, "(port)FR_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln8_fu_122_p1, "zext_ln8_fu_122_p1");
    sc_trace(mVcdFile, zext_ln8_reg_247, "zext_ln8_reg_247");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln8_fu_126_p2, "add_ln8_fu_126_p2");
    sc_trace(mVcdFile, add_ln8_reg_252, "add_ln8_reg_252");
    sc_trace(mVcdFile, tmp_V_1_fu_138_p2, "tmp_V_1_fu_138_p2");
    sc_trace(mVcdFile, tmp_V_1_reg_260, "tmp_V_1_reg_260");
    sc_trace(mVcdFile, mul_ln1118_fu_241_p2, "mul_ln1118_fu_241_p2");
    sc_trace(mVcdFile, mul_ln1118_reg_265, "mul_ln1118_reg_265");
    sc_trace(mVcdFile, icmp_ln8_fu_132_p2, "icmp_ln8_fu_132_p2");
    sc_trace(mVcdFile, j_fu_154_p2, "j_fu_154_p2");
    sc_trace(mVcdFile, j_reg_273, "j_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln9_fu_148_p2, "icmp_ln9_fu_148_p2");
    sc_trace(mVcdFile, select_ln1496_fu_233_p3, "select_ln1496_fu_233_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_V_reg_76, "tmp_V_reg_76");
    sc_trace(mVcdFile, r_V_reg_88, "r_V_reg_88");
    sc_trace(mVcdFile, t_V_reg_99, "t_V_reg_99");
    sc_trace(mVcdFile, j_0_reg_111, "j_0_reg_111");
    sc_trace(mVcdFile, zext_ln10_fu_160_p1, "zext_ln10_fu_160_p1");
    sc_trace(mVcdFile, zext_ln14_fu_165_p1, "zext_ln14_fu_165_p1");
    sc_trace(mVcdFile, trunc_ln703_fu_170_p1, "trunc_ln703_fu_170_p1");
    sc_trace(mVcdFile, trunc_ln703_1_fu_182_p1, "trunc_ln703_1_fu_182_p1");
    sc_trace(mVcdFile, shl_ln703_1_fu_186_p3, "shl_ln703_1_fu_186_p3");
    sc_trace(mVcdFile, shl_ln_fu_174_p3, "shl_ln_fu_174_p3");
    sc_trace(mVcdFile, shl_ln1_fu_201_p3, "shl_ln1_fu_201_p3");
    sc_trace(mVcdFile, icmp_ln1497_fu_214_p2, "icmp_ln1497_fu_214_p2");
    sc_trace(mVcdFile, count_V_fu_219_p2, "count_V_fu_219_p2");
    sc_trace(mVcdFile, icmp_ln1496_fu_209_p2, "icmp_ln1496_fu_209_p2");
    sc_trace(mVcdFile, select_ln10_fu_225_p3, "select_ln10_fu_225_p3");
    sc_trace(mVcdFile, mul_ln1118_fu_241_p0, "mul_ln1118_fu_241_p0");
    sc_trace(mVcdFile, mul_ln1118_fu_241_p1, "mul_ln1118_fu_241_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln1118_fu_241_p00, "mul_ln1118_fu_241_p00");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_FR_mul_mul_8ns_14ns_22_1_1_U1;
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_0))) {
        j_0_reg_111 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_111 = j_reg_273.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_148_p2.read(), ap_const_lv1_1))) {
        r_V_reg_88 = add_ln8_reg_252.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_V_reg_88 = ap_const_lv21_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_0))) {
        t_V_reg_99 = ap_const_lv64_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_V_reg_99 = select_ln1496_fu_233_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_148_p2.read(), ap_const_lv1_1))) {
        tmp_V_reg_76 = tmp_V_1_reg_260.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_V_reg_76 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln8_reg_252 = add_ln8_fu_126_p2.read();
        tmp_V_1_reg_260 = tmp_V_1_fu_138_p2.read();
        zext_ln8_reg_247 = zext_ln8_fu_122_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_273 = j_fu_154_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_0))) {
        mul_ln1118_reg_265 = mul_ln1118_fu_241_p2.read();
    }
}

void estimate_FR::thread_FR_V_address0() {
    FR_V_address0 =  (sc_lv<8>) (zext_ln14_fu_165_p1.read());
}

void estimate_FR::thread_FR_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        FR_V_ce0 = ap_const_logic_1;
    } else {
        FR_V_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_FR_V_d0() {
    FR_V_d0 = (!shl_ln703_1_fu_186_p3.read().is_01() || !shl_ln_fu_174_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(shl_ln703_1_fu_186_p3.read()) + sc_biguint<8>(shl_ln_fu_174_p3.read()));
}

void estimate_FR::thread_FR_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_148_p2.read(), ap_const_lv1_1))) {
        FR_V_we0 = ap_const_logic_1;
    } else {
        FR_V_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_add_ln8_fu_126_p2() {
    add_ln8_fu_126_p2 = (!r_V_reg_88.read().is_01() || !ap_const_lv21_1999.is_01())? sc_lv<21>(): (sc_biguint<21>(r_V_reg_88.read()) + sc_biguint<21>(ap_const_lv21_1999));
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_FR::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void estimate_FR::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void estimate_FR::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_count_V_fu_219_p2() {
    count_V_fu_219_p2 = (!t_V_reg_99.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(t_V_reg_99.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void estimate_FR::thread_icmp_ln1496_fu_209_p2() {
    icmp_ln1496_fu_209_p2 = (!shl_ln1_fu_201_p3.read().is_01() || !zext_ln8_reg_247.read().is_01())? sc_lv<1>(): (sc_biguint<22>(shl_ln1_fu_201_p3.read()) < sc_biguint<22>(zext_ln8_reg_247.read()));
}

void estimate_FR::thread_icmp_ln1497_fu_214_p2() {
    icmp_ln1497_fu_214_p2 = (!shl_ln1_fu_201_p3.read().is_01() || !mul_ln1118_reg_265.read().is_01())? sc_lv<1>(): (sc_biguint<22>(shl_ln1_fu_201_p3.read()) > sc_biguint<22>(mul_ln1118_reg_265.read()));
}

void estimate_FR::thread_icmp_ln8_fu_132_p2() {
    icmp_ln8_fu_132_p2 = (!tmp_V_reg_76.read().is_01() || !ap_const_lv8_C8.is_01())? sc_lv<1>(): sc_lv<1>(tmp_V_reg_76.read() == ap_const_lv8_C8);
}

void estimate_FR::thread_icmp_ln9_fu_148_p2() {
    icmp_ln9_fu_148_p2 = (!j_0_reg_111.read().is_01() || !ap_const_lv7_4B.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_111.read() == ap_const_lv7_4B);
}

void estimate_FR::thread_j_fu_154_p2() {
    j_fu_154_p2 = (!j_0_reg_111.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_111.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void estimate_FR::thread_mul_ln1118_fu_241_p0() {
    mul_ln1118_fu_241_p0 =  (sc_lv<8>) (mul_ln1118_fu_241_p00.read());
}

void estimate_FR::thread_mul_ln1118_fu_241_p00() {
    mul_ln1118_fu_241_p00 = esl_zext<22,8>(tmp_V_1_fu_138_p2.read());
}

void estimate_FR::thread_mul_ln1118_fu_241_p1() {
    mul_ln1118_fu_241_p1 =  (sc_lv<14>) (ap_const_lv22_1999);
}

void estimate_FR::thread_select_ln10_fu_225_p3() {
    select_ln10_fu_225_p3 = (!icmp_ln1497_fu_214_p2.read()[0].is_01())? sc_lv<64>(): ((icmp_ln1497_fu_214_p2.read()[0].to_bool())? t_V_reg_99.read(): count_V_fu_219_p2.read());
}

void estimate_FR::thread_select_ln1496_fu_233_p3() {
    select_ln1496_fu_233_p3 = (!icmp_ln1496_fu_209_p2.read()[0].is_01())? sc_lv<64>(): ((icmp_ln1496_fu_209_p2.read()[0].to_bool())? t_V_reg_99.read(): select_ln10_fu_225_p3.read());
}

void estimate_FR::thread_shl_ln1_fu_201_p3() {
    shl_ln1_fu_201_p3 = esl_concat<12,10>(spksTime_V_q0.read(), ap_const_lv10_0);
}

void estimate_FR::thread_shl_ln703_1_fu_186_p3() {
    shl_ln703_1_fu_186_p3 = esl_concat<7,1>(trunc_ln703_1_fu_182_p1.read(), ap_const_lv1_0);
}

void estimate_FR::thread_shl_ln_fu_174_p3() {
    shl_ln_fu_174_p3 = esl_concat<5,3>(trunc_ln703_fu_170_p1.read(), ap_const_lv3_0);
}

void estimate_FR::thread_spksTime_V_address0() {
    spksTime_V_address0 =  (sc_lv<7>) (zext_ln10_fu_160_p1.read());
}

void estimate_FR::thread_spksTime_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        spksTime_V_ce0 = ap_const_logic_1;
    } else {
        spksTime_V_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_tmp_V_1_fu_138_p2() {
    tmp_V_1_fu_138_p2 = (!tmp_V_reg_76.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_V_reg_76.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void estimate_FR::thread_trunc_ln703_1_fu_182_p1() {
    trunc_ln703_1_fu_182_p1 = t_V_reg_99.read().range(7-1, 0);
}

void estimate_FR::thread_trunc_ln703_fu_170_p1() {
    trunc_ln703_fu_170_p1 = t_V_reg_99.read().range(5-1, 0);
}

void estimate_FR::thread_zext_ln10_fu_160_p1() {
    zext_ln10_fu_160_p1 = esl_zext<64,7>(j_0_reg_111.read());
}

void estimate_FR::thread_zext_ln14_fu_165_p1() {
    zext_ln14_fu_165_p1 = esl_zext<64,8>(tmp_V_reg_76.read());
}

void estimate_FR::thread_zext_ln8_fu_122_p1() {
    zext_ln8_fu_122_p1 = esl_zext<22,21>(r_V_reg_88.read());
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_148_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_address0\" :  \"" << spksTime_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_ce0\" :  \"" << spksTime_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime_V_q0\" :  \"" << spksTime_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_address0\" :  \"" << FR_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_ce0\" :  \"" << FR_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_we0\" :  \"" << FR_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_d0\" :  \"" << FR_V_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

