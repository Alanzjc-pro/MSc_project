// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.295000,HLS_SYN_LAT=31401,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=26,HLS_SYN_FF=637,HLS_SYN_LUT=654,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V_address0,
        spksTime_V_ce0,
        spksTime_V_q0,
        FR_V_address0,
        FR_V_ce0,
        FR_V_we0,
        FR_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] spksTime_V_address0;
output   spksTime_V_ce0;
input  [11:0] spksTime_V_q0;
output  [7:0] FR_V_address0;
output   FR_V_ce0;
output   FR_V_we0;
output  [7:0] FR_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_V_ce0;
reg FR_V_ce0;
reg FR_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [21:0] zext_ln8_fu_126_p1;
reg   [21:0] zext_ln8_reg_248;
wire    ap_CS_fsm_state2;
wire   [20:0] add_ln8_fu_130_p2;
reg   [20:0] add_ln8_reg_253;
wire   [7:0] tmp_V_2_fu_142_p2;
reg   [7:0] tmp_V_2_reg_261;
wire   [21:0] mul_ln1118_fu_242_p2;
reg   [21:0] mul_ln1118_reg_266;
wire   [0:0] icmp_ln8_fu_136_p2;
wire   [6:0] j_fu_158_p2;
reg   [6:0] j_reg_274;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln9_fu_152_p2;
wire   [63:0] select_ln1496_fu_219_p3;
wire    ap_CS_fsm_state4;
reg   [7:0] trunc_ln_reg_294;
wire    ap_CS_fsm_state8;
reg   [7:0] tmp_V_reg_80;
wire    ap_CS_fsm_state9;
reg   [20:0] r_V_reg_92;
reg   [63:0] t_V_2_reg_103;
reg   [6:0] j_0_reg_115;
wire   [63:0] zext_ln10_fu_164_p1;
wire   [63:0] zext_ln14_fu_237_p1;
wire   [79:0] t_V_fu_169_p3;
wire   [79:0] grp_fu_181_p0;
wire   [81:0] grp_fu_181_p1;
wire   [21:0] shl_ln_fu_187_p3;
wire   [0:0] icmp_ln1497_fu_200_p2;
wire   [63:0] count_V_fu_205_p2;
wire   [0:0] icmp_ln1496_fu_195_p2;
wire   [63:0] select_ln10_fu_211_p3;
wire   [160:0] grp_fu_181_p2;
wire   [7:0] mul_ln1118_fu_242_p0;
wire   [13:0] mul_ln1118_fu_242_p1;
reg   [8:0] ap_NS_fsm;
wire   [160:0] grp_fu_181_p00;
wire   [21:0] mul_ln1118_fu_242_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

estimate_FR_mul_80ns_82ns_161_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 80 ),
    .din1_WIDTH( 82 ),
    .dout_WIDTH( 161 ))
estimate_FR_mul_80ns_82ns_161_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

estimate_FR_mul_mul_8ns_14ns_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 22 ))
estimate_FR_mul_mul_8ns_14ns_22_1_1_U2(
    .din0(mul_ln1118_fu_242_p0),
    .din1(mul_ln1118_fu_242_p1),
    .dout(mul_ln1118_fu_242_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_115 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_115 <= j_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_V_reg_92 <= add_ln8_reg_253;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_V_reg_92 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_103 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_2_reg_103 <= select_ln1496_fu_219_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_V_reg_80 <= tmp_V_2_reg_261;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_V_reg_80 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_253 <= add_ln8_fu_130_p2;
        tmp_V_2_reg_261 <= tmp_V_2_fu_142_p2;
        zext_ln8_reg_248[20 : 0] <= zext_ln8_fu_126_p1[20 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_274 <= j_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln1118_reg_266 <= mul_ln1118_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln_reg_294 <= {{grp_fu_181_p2[100:93]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        FR_V_ce0 = 1'b1;
    end else begin
        FR_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        FR_V_we0 = 1'b1;
    end else begin
        FR_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        spksTime_V_ce0 = 1'b1;
    end else begin
        spksTime_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_V_address0 = zext_ln14_fu_237_p1;

assign FR_V_d0 = trunc_ln_reg_294;

assign add_ln8_fu_130_p2 = (r_V_reg_92 + 21'd6553);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign count_V_fu_205_p2 = (t_V_2_reg_103 + 64'd1);

assign grp_fu_181_p0 = grp_fu_181_p00;

assign grp_fu_181_p00 = t_V_fu_169_p3;

assign grp_fu_181_p1 = 161'd1511295637766372989347321;

assign icmp_ln1496_fu_195_p2 = ((shl_ln_fu_187_p3 < zext_ln8_reg_248) ? 1'b1 : 1'b0);

assign icmp_ln1497_fu_200_p2 = ((shl_ln_fu_187_p3 > mul_ln1118_reg_266) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_136_p2 = ((tmp_V_reg_80 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_152_p2 = ((j_0_reg_115 == 7'd75) ? 1'b1 : 1'b0);

assign j_fu_158_p2 = (j_0_reg_115 + 7'd1);

assign mul_ln1118_fu_242_p0 = mul_ln1118_fu_242_p00;

assign mul_ln1118_fu_242_p00 = tmp_V_2_fu_142_p2;

assign mul_ln1118_fu_242_p1 = 22'd6553;

assign select_ln10_fu_211_p3 = ((icmp_ln1497_fu_200_p2[0:0] === 1'b1) ? t_V_2_reg_103 : count_V_fu_205_p2);

assign select_ln1496_fu_219_p3 = ((icmp_ln1496_fu_195_p2[0:0] === 1'b1) ? t_V_2_reg_103 : select_ln10_fu_211_p3);

assign shl_ln_fu_187_p3 = {{spksTime_V_q0}, {10'd0}};

assign spksTime_V_address0 = zext_ln10_fu_164_p1;

assign t_V_fu_169_p3 = {{t_V_2_reg_103}, {16'd0}};

assign tmp_V_2_fu_142_p2 = (tmp_V_reg_80 + 8'd1);

assign zext_ln10_fu_164_p1 = j_0_reg_115;

assign zext_ln14_fu_237_p1 = tmp_V_reg_80;

assign zext_ln8_fu_126_p1 = r_V_reg_92;

always @ (posedge ap_clk) begin
    zext_ln8_reg_248[21] <= 1'b0;
end

endmodule //estimate_FR
