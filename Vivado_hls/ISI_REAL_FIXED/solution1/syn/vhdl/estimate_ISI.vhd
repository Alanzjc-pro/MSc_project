-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    spksTime_V : IN STD_LOGIC_VECTOR (18 downto 0);
    spksPre_V_i : IN STD_LOGIC_VECTOR (18 downto 0);
    spksPre_V_o : OUT STD_LOGIC_VECTOR (18 downto 0);
    spksPre_V_o_ap_vld : OUT STD_LOGIC;
    ISI_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    ISI_V_ap_vld : OUT STD_LOGIC;
    ISIpre_V_i : IN STD_LOGIC_VECTOR (15 downto 0);
    ISIpre_V_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    ISIpre_V_o_ap_vld : OUT STD_LOGIC;
    penalty_V : IN STD_LOGIC_VECTOR (4 downto 0);
    yes : IN STD_LOGIC );
end;


architecture behav of estimate_ISI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.457000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=62,HLS_SYN_LUT=143,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal yes_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_fu_88_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_reg_191 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_2_fu_96_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_196 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_reg_208 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_213 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln4_fu_170_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln703_1_fu_92_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_129_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_129_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_132_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_135_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1494_fu_141_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_fu_153_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1494_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1494_fu_158_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1494_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln4_fu_170_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1494_fu_163_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component estimate_ISI_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    estimate_ISI_mul_mul_16s_16s_32_1_1_U1 : component estimate_ISI_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => p_Val2_2_fu_96_p2,
        din1 => ISIpre_V_i,
        dout => r_V_1_fu_178_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((yes_read_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_2_reg_196 <= p_Val2_2_fu_96_p2;
                trunc_ln1_reg_208 <= r_V_1_fu_178_p2(23 downto 8);
                trunc_ln2_reg_213 <= p_Val2_2_fu_96_p2(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln703_reg_191 <= trunc_ln703_fu_88_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ISI_V <= select_ln4_fu_170_p3;

    ISI_V_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISI_V_ap_vld <= ap_const_logic_1;
        else 
            ISI_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ISIpre_V_o <= select_ln4_fu_170_p3;

    ISIpre_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISIpre_V_o_ap_vld <= ap_const_logic_1;
        else 
            ISIpre_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln1494_fu_158_p1 <= (0=>yes, others=>'-');
    and_ln1494_fu_158_p2 <= (icmp_ln1494_fu_144_p2 and and_ln1494_fu_158_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_fu_144_p2 <= "1" when (signed(ret_V_fu_135_p2) > signed(sext_ln1494_fu_141_p1)) else "0";
    lhs_V_fu_129_p0 <= ISIpre_V_i;
        lhs_V_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_129_p0),17));

    p_Val2_2_fu_96_p2 <= std_logic_vector(unsigned(trunc_ln703_fu_88_p1) - unsigned(trunc_ln703_1_fu_92_p1));
        r_V_3_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_213),16));

    ret_V_fu_135_p2 <= std_logic_vector(signed(lhs_V_fu_129_p1) - signed(rhs_V_fu_132_p1));
        rhs_V_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_196),17));

    select_ln1494_fu_163_p3 <= 
        sub_ln703_fu_153_p2 when (and_ln1494_fu_158_p2(0) = '1') else 
        p_Val2_2_reg_196;
    select_ln4_fu_170_p0 <= (0=>yes, others=>'-');
    select_ln4_fu_170_p3 <= 
        select_ln1494_fu_163_p3 when (select_ln4_fu_170_p0(0) = '1') else 
        trunc_ln703_reg_191;
        sext_ln1494_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_208),17));

    spksPre_V_o <= spksTime_V;

    spksPre_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            spksPre_V_o_ap_vld <= ap_const_logic_1;
        else 
            spksPre_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln703_fu_153_p0 <= ISIpre_V_i;
    sub_ln703_fu_153_p2 <= std_logic_vector(signed(sub_ln703_fu_153_p0) - signed(r_V_3_fu_150_p1));
    trunc_ln703_1_fu_92_p1 <= spksPre_V_i(16 - 1 downto 0);
    trunc_ln703_fu_88_p1 <= spksTime_V(16 - 1 downto 0);
    yes_read_read_fu_42_p2 <= (0=>yes, others=>'-');
end behav;
