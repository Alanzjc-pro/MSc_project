// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _estimate_ISI_HH_
#define _estimate_ISI_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "estimate_ISI_mul_mul_16s_16s_32_1_1.h"

namespace ap_rtl {

struct estimate_ISI : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<19> > spksTime_V;
    sc_in< sc_lv<19> > spksPre_V_i;
    sc_out< sc_lv<19> > spksPre_V_o;
    sc_out< sc_logic > spksPre_V_o_ap_vld;
    sc_out< sc_lv<16> > ISI_V;
    sc_out< sc_logic > ISI_V_ap_vld;
    sc_in< sc_lv<16> > ISIpre_V_i;
    sc_out< sc_lv<16> > ISIpre_V_o;
    sc_out< sc_logic > ISIpre_V_o_ap_vld;
    sc_in< sc_lv<5> > penalty_V;
    sc_in< sc_logic > yes;


    // Module declarations
    estimate_ISI(sc_module_name name);
    SC_HAS_PROCESS(estimate_ISI);

    ~estimate_ISI();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    estimate_ISI_mul_mul_16s_16s_32_1_1<1,1,16,16,32>* estimate_ISI_mul_mul_16s_16s_32_1_1_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > yes_read_read_fu_42_p2;
    sc_signal< sc_lv<16> > trunc_ln703_fu_88_p1;
    sc_signal< sc_lv<16> > trunc_ln703_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<16> > p_Val2_2_fu_96_p2;
    sc_signal< sc_lv<16> > p_Val2_2_reg_196;
    sc_signal< sc_lv<16> > trunc_ln1_reg_208;
    sc_signal< sc_lv<11> > trunc_ln2_reg_213;
    sc_signal< sc_lv<16> > select_ln4_fu_170_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<16> > trunc_ln703_1_fu_92_p1;
    sc_signal< sc_lv<32> > r_V_1_fu_178_p2;
    sc_signal< sc_lv<16> > lhs_V_fu_129_p0;
    sc_signal< sc_lv<17> > lhs_V_fu_129_p1;
    sc_signal< sc_lv<17> > rhs_V_fu_132_p1;
    sc_signal< sc_lv<17> > ret_V_fu_135_p2;
    sc_signal< sc_lv<17> > sext_ln1494_fu_141_p1;
    sc_signal< sc_lv<16> > sub_ln703_fu_153_p0;
    sc_signal< sc_lv<16> > r_V_3_fu_150_p1;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_144_p2;
    sc_signal< sc_lv<1> > and_ln1494_fu_158_p1;
    sc_signal< sc_lv<1> > and_ln1494_fu_158_p2;
    sc_signal< sc_lv<16> > sub_ln703_fu_153_p2;
    sc_signal< sc_lv<1> > select_ln4_fu_170_p0;
    sc_signal< sc_lv<16> > select_ln1494_fu_163_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ISI_V();
    void thread_ISI_V_ap_vld();
    void thread_ISIpre_V_o();
    void thread_ISIpre_V_o_ap_vld();
    void thread_and_ln1494_fu_158_p1();
    void thread_and_ln1494_fu_158_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln1494_fu_144_p2();
    void thread_lhs_V_fu_129_p0();
    void thread_lhs_V_fu_129_p1();
    void thread_p_Val2_2_fu_96_p2();
    void thread_r_V_3_fu_150_p1();
    void thread_ret_V_fu_135_p2();
    void thread_rhs_V_fu_132_p1();
    void thread_select_ln1494_fu_163_p3();
    void thread_select_ln4_fu_170_p0();
    void thread_select_ln4_fu_170_p3();
    void thread_sext_ln1494_fu_141_p1();
    void thread_spksPre_V_o();
    void thread_spksPre_V_o_ap_vld();
    void thread_sub_ln703_fu_153_p0();
    void thread_sub_ln703_fu_153_p2();
    void thread_trunc_ln703_1_fu_92_p1();
    void thread_trunc_ln703_fu_88_p1();
    void thread_yes_read_read_fu_42_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
