// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.457000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=62,HLS_SYN_LUT=143,HLS_VERSION=2019_1}" *)

module estimate_ISI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V,
        spksPre_V_i,
        spksPre_V_o,
        spksPre_V_o_ap_vld,
        ISI_V,
        ISI_V_ap_vld,
        ISIpre_V_i,
        ISIpre_V_o,
        ISIpre_V_o_ap_vld,
        penalty_V,
        yes
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [18:0] spksTime_V;
input  [18:0] spksPre_V_i;
output  [18:0] spksPre_V_o;
output   spksPre_V_o_ap_vld;
output  [15:0] ISI_V;
output   ISI_V_ap_vld;
input  [15:0] ISIpre_V_i;
output  [15:0] ISIpre_V_o;
output   ISIpre_V_o_ap_vld;
input  [4:0] penalty_V;
input   yes;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksPre_V_o_ap_vld;
reg ISI_V_ap_vld;
reg ISIpre_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] yes_read_read_fu_42_p2;
wire   [15:0] trunc_ln703_fu_88_p1;
reg   [15:0] trunc_ln703_reg_191;
wire    ap_CS_fsm_state2;
wire  signed [15:0] p_Val2_2_fu_96_p2;
reg  signed [15:0] p_Val2_2_reg_196;
reg   [15:0] trunc_ln1_reg_208;
reg   [10:0] trunc_ln2_reg_213;
wire   [15:0] select_ln4_fu_170_p3;
wire    ap_CS_fsm_state3;
wire   [15:0] trunc_ln703_1_fu_92_p1;
wire  signed [31:0] r_V_1_fu_178_p2;
wire  signed [15:0] lhs_V_fu_129_p0;
wire  signed [16:0] lhs_V_fu_129_p1;
wire  signed [16:0] rhs_V_fu_132_p1;
wire   [16:0] ret_V_fu_135_p2;
wire  signed [16:0] sext_ln1494_fu_141_p1;
wire  signed [15:0] sub_ln703_fu_153_p0;
wire  signed [15:0] r_V_3_fu_150_p1;
wire   [0:0] icmp_ln1494_fu_144_p2;
wire   [0:0] and_ln1494_fu_158_p1;
wire   [0:0] and_ln1494_fu_158_p2;
wire   [15:0] sub_ln703_fu_153_p2;
wire   [0:0] select_ln4_fu_170_p0;
wire   [15:0] select_ln1494_fu_163_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

estimate_ISI_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
estimate_ISI_mul_mul_16s_16s_32_1_1_U1(
    .din0(p_Val2_2_fu_96_p2),
    .din1(ISIpre_V_i),
    .dout(r_V_1_fu_178_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((yes_read_read_fu_42_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_2_reg_196 <= p_Val2_2_fu_96_p2;
        trunc_ln1_reg_208 <= {{r_V_1_fu_178_p2[23:8]}};
        trunc_ln2_reg_213 <= {{p_Val2_2_fu_96_p2[15:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln703_reg_191 <= trunc_ln703_fu_88_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_ap_vld = 1'b1;
    end else begin
        ISI_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ISIpre_V_o_ap_vld = 1'b1;
    end else begin
        ISIpre_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksPre_V_o_ap_vld = 1'b1;
    end else begin
        spksPre_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISI_V = select_ln4_fu_170_p3;

assign ISIpre_V_o = select_ln4_fu_170_p3;

assign and_ln1494_fu_158_p1 = yes;

assign and_ln1494_fu_158_p2 = (icmp_ln1494_fu_144_p2 & and_ln1494_fu_158_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign icmp_ln1494_fu_144_p2 = (($signed(ret_V_fu_135_p2) > $signed(sext_ln1494_fu_141_p1)) ? 1'b1 : 1'b0);

assign lhs_V_fu_129_p0 = ISIpre_V_i;

assign lhs_V_fu_129_p1 = lhs_V_fu_129_p0;

assign p_Val2_2_fu_96_p2 = (trunc_ln703_fu_88_p1 - trunc_ln703_1_fu_92_p1);

assign r_V_3_fu_150_p1 = $signed(trunc_ln2_reg_213);

assign ret_V_fu_135_p2 = ($signed(lhs_V_fu_129_p1) - $signed(rhs_V_fu_132_p1));

assign rhs_V_fu_132_p1 = p_Val2_2_reg_196;

assign select_ln1494_fu_163_p3 = ((and_ln1494_fu_158_p2[0:0] === 1'b1) ? sub_ln703_fu_153_p2 : p_Val2_2_reg_196);

assign select_ln4_fu_170_p0 = yes;

assign select_ln4_fu_170_p3 = ((select_ln4_fu_170_p0[0:0] === 1'b1) ? select_ln1494_fu_163_p3 : trunc_ln703_reg_191);

assign sext_ln1494_fu_141_p1 = $signed(trunc_ln1_reg_208);

assign spksPre_V_o = spksTime_V;

assign sub_ln703_fu_153_p0 = ISIpre_V_i;

assign sub_ln703_fu_153_p2 = ($signed(sub_ln703_fu_153_p0) - $signed(r_V_3_fu_150_p1));

assign trunc_ln703_1_fu_92_p1 = spksPre_V_i[15:0];

assign trunc_ln703_fu_88_p1 = spksTime_V[15:0];

assign yes_read_read_fu_42_p2 = yes;

endmodule //estimate_ISI
