-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    spksTime_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    spksTime_V_ce0 : OUT STD_LOGIC;
    spksTime_V_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    spksTime_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    spksTime_V_ce1 : OUT STD_LOGIC;
    spksTime_V_q1 : IN STD_LOGIC_VECTOR (19 downto 0);
    ISI_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ISI_V_ce0 : OUT STD_LOGIC;
    ISI_V_we0 : OUT STD_LOGIC;
    ISI_V_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    ISI_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    ISI_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ISI_V_ce1 : OUT STD_LOGIC;
    ISI_V_we1 : OUT STD_LOGIC;
    ISI_V_d1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    ISI_V_q1 : IN STD_LOGIC_VECTOR (16 downto 0) );
end;


architecture behav of estimate_ISI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635125,HLS_SYN_LAT=442,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=115,HLS_SYN_LUT=279,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_4A : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_135_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_282 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln8_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln10_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ISI_V_addr_2_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_2_reg_315 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_3_reg_322 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_fu_273_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_2_reg_330 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_267_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_106 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_reg_117 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln8_1_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_1_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1494_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_fu_151_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln703_1_fu_155_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln11_fu_172_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1118_1_fu_195_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_188_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_fu_202_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_fu_206_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal lhs_V_fu_219_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_222_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_225_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1_fu_231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1494_fu_239_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln1_fu_248_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_4_fu_257_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component estimate_ISI_mul_mul_17s_22s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;



begin
    estimate_ISI_mul_mul_17s_22s_39_1_1_U1 : component estimate_ISI_mul_mul_17s_22s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 22,
        dout_WIDTH => 39)
    port map (
        din0 => p_Val2_2_reg_315,
        din1 => r_V_fu_206_p2,
        dout => r_V_2_fu_273_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_106 <= i_reg_282;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_106 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_117 <= ap_const_lv7_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_117 <= j_fu_267_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ISI_V_addr_2_reg_310 <= zext_ln11_1_fu_183_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_282 <= i_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_Val2_2_reg_315 <= ISI_V_q0;
                p_Val2_3_reg_322 <= ISI_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_V_2_reg_330 <= r_V_2_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln8_reg_287(6 downto 0) <= zext_ln8_fu_141_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln8_reg_287(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_129_p2, ap_CS_fsm_state4, icmp_ln10_fu_166_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln10_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ISI_V_address0_assign_proc : process(zext_ln8_reg_287, ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln11_fu_178_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ISI_V_address0 <= zext_ln11_fu_178_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISI_V_address0 <= zext_ln8_reg_287(7 - 1 downto 0);
        else 
            ISI_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    ISI_V_address1_assign_proc : process(ap_CS_fsm_state4, ISI_V_addr_2_reg_310, ap_CS_fsm_state7, zext_ln11_1_fu_183_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ISI_V_address1 <= ISI_V_addr_2_reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ISI_V_address1 <= zext_ln11_1_fu_183_p1(7 - 1 downto 0);
        else 
            ISI_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    ISI_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ISI_V_ce0 <= ap_const_logic_1;
        else 
            ISI_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ISI_V_ce1 <= ap_const_logic_1;
        else 
            ISI_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ISI_V_d0 <= std_logic_vector(unsigned(trunc_ln703_fu_151_p1) - unsigned(trunc_ln703_1_fu_155_p1));
    ISI_V_d1 <= std_logic_vector(signed(p_Val2_2_reg_315) - signed(r_V_4_fu_257_p1));

    ISI_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISI_V_we0 <= ap_const_logic_1;
        else 
            ISI_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_V_we1_assign_proc : process(ap_CS_fsm_state7, icmp_ln1494_fu_243_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1494_fu_243_p2 = ap_const_lv1_1))) then 
            ISI_V_we1 <= ap_const_logic_1;
        else 
            ISI_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_172_p2 <= std_logic_vector(unsigned(j_0_reg_117) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln10_fu_166_p2)
    begin
        if (((icmp_ln10_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln10_fu_166_p2)
    begin
        if (((icmp_ln10_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_135_p2 <= std_logic_vector(unsigned(i_0_reg_106) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_166_p2 <= "1" when (j_0_reg_117 = ap_const_lv7_4A) else "0";
    icmp_ln1494_fu_243_p2 <= "1" when (signed(sext_ln1494_fu_239_p1) > signed(r_V_2_reg_330)) else "0";
    icmp_ln7_fu_129_p2 <= "1" when (i_0_reg_106 = ap_const_lv7_4A) else "0";
    j_fu_267_p2 <= std_logic_vector(unsigned(j_0_reg_117) + unsigned(ap_const_lv7_1));
        lhs_V_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_315),18));

        r_V_4_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_248_p4),17));

    r_V_fu_206_p2 <= std_logic_vector(unsigned(shl_ln_fu_188_p3) - unsigned(sext_ln1118_fu_202_p1));
    ret_V_fu_225_p2 <= std_logic_vector(signed(lhs_V_fu_219_p1) - signed(rhs_V_fu_222_p1));
        rhs_V_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_322),18));

        sext_ln1118_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_1_fu_195_p3),22));

        sext_ln1494_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_231_p3),39));

    shl_ln1118_1_fu_195_p3 <= (p_Val2_3_reg_322 & ap_const_lv1_0);
    shl_ln1_fu_231_p3 <= (ret_V_fu_225_p2 & ap_const_lv14_0);
    shl_ln_fu_188_p3 <= (p_Val2_3_reg_322 & ap_const_lv5_0);
    spksTime_V_address0 <= zext_ln8_1_fu_146_p1(7 - 1 downto 0);
    spksTime_V_address1 <= zext_ln8_fu_141_p1(7 - 1 downto 0);

    spksTime_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            spksTime_V_ce0 <= ap_const_logic_1;
        else 
            spksTime_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    spksTime_V_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            spksTime_V_ce1 <= ap_const_logic_1;
        else 
            spksTime_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1_fu_248_p4 <= p_Val2_3_reg_322(16 downto 2);
    trunc_ln703_1_fu_155_p1 <= spksTime_V_q1(17 - 1 downto 0);
    trunc_ln703_fu_151_p1 <= spksTime_V_q0(17 - 1 downto 0);
    zext_ln11_1_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_117),64));
    zext_ln11_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_172_p2),64));
    zext_ln8_1_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_135_p2),64));
    zext_ln8_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_106),64));
end behav;
