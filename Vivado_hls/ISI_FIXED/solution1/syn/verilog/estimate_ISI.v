// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.635125,HLS_SYN_LAT=442,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=115,HLS_SYN_LUT=279,HLS_VERSION=2019_1}" *)

module estimate_ISI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V_address0,
        spksTime_V_ce0,
        spksTime_V_q0,
        spksTime_V_address1,
        spksTime_V_ce1,
        spksTime_V_q1,
        ISI_V_address0,
        ISI_V_ce0,
        ISI_V_we0,
        ISI_V_d0,
        ISI_V_q0,
        ISI_V_address1,
        ISI_V_ce1,
        ISI_V_we1,
        ISI_V_d1,
        ISI_V_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] spksTime_V_address0;
output   spksTime_V_ce0;
input  [19:0] spksTime_V_q0;
output  [6:0] spksTime_V_address1;
output   spksTime_V_ce1;
input  [19:0] spksTime_V_q1;
output  [6:0] ISI_V_address0;
output   ISI_V_ce0;
output   ISI_V_we0;
output  [16:0] ISI_V_d0;
input  [16:0] ISI_V_q0;
output  [6:0] ISI_V_address1;
output   ISI_V_ce1;
output   ISI_V_we1;
output  [16:0] ISI_V_d1;
input  [16:0] ISI_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_V_ce0;
reg spksTime_V_ce1;
reg[6:0] ISI_V_address0;
reg ISI_V_ce0;
reg ISI_V_we0;
reg[6:0] ISI_V_address1;
reg ISI_V_ce1;
reg ISI_V_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_135_p2;
reg   [6:0] i_reg_282;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln8_fu_141_p1;
reg   [63:0] zext_ln8_reg_287;
wire   [0:0] icmp_ln7_fu_129_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln10_fu_166_p2;
reg   [6:0] ISI_V_addr_2_reg_310;
reg  signed [16:0] p_Val2_2_reg_315;
wire    ap_CS_fsm_state5;
reg  signed [16:0] p_Val2_3_reg_322;
wire  signed [38:0] r_V_2_fu_273_p2;
reg  signed [38:0] r_V_2_reg_330;
wire    ap_CS_fsm_state6;
wire   [6:0] j_fu_267_p2;
wire    ap_CS_fsm_state7;
reg   [6:0] i_0_reg_106;
wire    ap_CS_fsm_state3;
reg   [6:0] j_0_reg_117;
wire   [63:0] zext_ln8_1_fu_146_p1;
wire   [63:0] zext_ln11_fu_178_p1;
wire   [63:0] zext_ln11_1_fu_183_p1;
wire   [0:0] icmp_ln1494_fu_243_p2;
wire   [16:0] trunc_ln703_fu_151_p1;
wire   [16:0] trunc_ln703_1_fu_155_p1;
wire   [6:0] add_ln11_fu_172_p2;
wire   [17:0] shl_ln1118_1_fu_195_p3;
wire   [21:0] shl_ln_fu_188_p3;
wire  signed [21:0] sext_ln1118_fu_202_p1;
wire  signed [21:0] r_V_fu_206_p2;
wire  signed [17:0] lhs_V_fu_219_p1;
wire  signed [17:0] rhs_V_fu_222_p1;
wire   [17:0] ret_V_fu_225_p2;
wire   [31:0] shl_ln1_fu_231_p3;
wire  signed [38:0] sext_ln1494_fu_239_p1;
wire   [14:0] trunc_ln1_fu_248_p4;
wire  signed [16:0] r_V_4_fu_257_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

estimate_ISI_mul_mul_17s_22s_39_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 39 ))
estimate_ISI_mul_mul_17s_22s_39_1_1_U1(
    .din0(p_Val2_2_reg_315),
    .din1(r_V_fu_206_p2),
    .dout(r_V_2_fu_273_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_106 <= i_reg_282;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_106 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_117 <= 7'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_117 <= j_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ISI_V_addr_2_reg_310 <= zext_ln11_1_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_282 <= i_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_2_reg_315 <= ISI_V_q0;
        p_Val2_3_reg_322 <= ISI_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_V_2_reg_330 <= r_V_2_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln8_reg_287[6 : 0] <= zext_ln8_fu_141_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ISI_V_address0 = zext_ln11_fu_178_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_address0 = zext_ln8_reg_287;
    end else begin
        ISI_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ISI_V_address1 = ISI_V_addr_2_reg_310;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ISI_V_address1 = zext_ln11_1_fu_183_p1;
    end else begin
        ISI_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        ISI_V_ce0 = 1'b1;
    end else begin
        ISI_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        ISI_V_ce1 = 1'b1;
    end else begin
        ISI_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_we0 = 1'b1;
    end else begin
        ISI_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1494_fu_243_p2 == 1'd1))) begin
        ISI_V_we1 = 1'b1;
    end else begin
        ISI_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_V_ce0 = 1'b1;
    end else begin
        spksTime_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_V_ce1 = 1'b1;
    end else begin
        spksTime_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISI_V_d0 = (trunc_ln703_fu_151_p1 - trunc_ln703_1_fu_155_p1);

assign ISI_V_d1 = ($signed(p_Val2_2_reg_315) - $signed(r_V_4_fu_257_p1));

assign add_ln11_fu_172_p2 = ($signed(j_0_reg_117) + $signed(7'd127));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_135_p2 = (i_0_reg_106 + 7'd1);

assign icmp_ln10_fu_166_p2 = ((j_0_reg_117 == 7'd74) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_243_p2 = (($signed(sext_ln1494_fu_239_p1) > $signed(r_V_2_reg_330)) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_129_p2 = ((i_0_reg_106 == 7'd74) ? 1'b1 : 1'b0);

assign j_fu_267_p2 = (j_0_reg_117 + 7'd1);

assign lhs_V_fu_219_p1 = p_Val2_2_reg_315;

assign r_V_4_fu_257_p1 = $signed(trunc_ln1_fu_248_p4);

assign r_V_fu_206_p2 = ($signed(shl_ln_fu_188_p3) - $signed(sext_ln1118_fu_202_p1));

assign ret_V_fu_225_p2 = ($signed(lhs_V_fu_219_p1) - $signed(rhs_V_fu_222_p1));

assign rhs_V_fu_222_p1 = p_Val2_3_reg_322;

assign sext_ln1118_fu_202_p1 = $signed(shl_ln1118_1_fu_195_p3);

assign sext_ln1494_fu_239_p1 = $signed(shl_ln1_fu_231_p3);

assign shl_ln1118_1_fu_195_p3 = {{p_Val2_3_reg_322}, {1'd0}};

assign shl_ln1_fu_231_p3 = {{ret_V_fu_225_p2}, {14'd0}};

assign shl_ln_fu_188_p3 = {{p_Val2_3_reg_322}, {5'd0}};

assign spksTime_V_address0 = zext_ln8_1_fu_146_p1;

assign spksTime_V_address1 = zext_ln8_fu_141_p1;

assign trunc_ln1_fu_248_p4 = {{p_Val2_3_reg_322[16:2]}};

assign trunc_ln703_1_fu_155_p1 = spksTime_V_q1[16:0];

assign trunc_ln703_fu_151_p1 = spksTime_V_q0[16:0];

assign zext_ln11_1_fu_183_p1 = j_0_reg_117;

assign zext_ln11_fu_178_p1 = add_ln11_fu_172_p2;

assign zext_ln8_1_fu_146_p1 = i_fu_135_p2;

assign zext_ln8_fu_141_p1 = i_0_reg_106;

always @ (posedge ap_clk) begin
    zext_ln8_reg_287[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_ISI
