// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_ISI.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_ISI::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_ISI::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<27> estimate_ISI::ap_ST_fsm_state1 = "1";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state2 = "10";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state3 = "100";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state4 = "1000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state5 = "10000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state6 = "100000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state7 = "1000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state8 = "10000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state9 = "100000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state10 = "1000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state11 = "10000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state12 = "100000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<27> estimate_ISI::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<32> estimate_ISI::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> estimate_ISI::ap_const_lv32_6 = "110";
const sc_lv<1> estimate_ISI::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_ISI::ap_const_lv32_C = "1100";
const sc_lv<32> estimate_ISI::ap_const_lv32_14 = "10100";
const sc_lv<1> estimate_ISI::ap_const_lv1_1 = "1";
const sc_lv<32> estimate_ISI::ap_const_lv32_19 = "11001";
const sc_lv<32> estimate_ISI::ap_const_lv32_1 = "1";
const sc_lv<32> estimate_ISI::ap_const_lv32_2 = "10";
const sc_lv<32> estimate_ISI::ap_const_lv32_D = "1101";
const sc_lv<32> estimate_ISI::ap_const_lv32_E = "1110";
const sc_lv<32> estimate_ISI::ap_const_lv32_1A = "11010";
const sc_lv<32> estimate_ISI::ap_const_lv32_8 = "1000";
const sc_lv<32> estimate_ISI::ap_const_lv32_15 = "10101";
const sc_lv<64> estimate_ISI::ap_const_lv64_3FA0000000000000 = "11111110100000000000000000000000000000000000000000000000000000";
const sc_lv<32> estimate_ISI::ap_const_lv32_7 = "111";
const sc_lv<32> estimate_ISI::ap_const_lv32_F = "1111";
const sc_lv<32> estimate_ISI::ap_const_lv32_34 = "110100";
const sc_lv<32> estimate_ISI::ap_const_lv32_3E = "111110";
const sc_lv<11> estimate_ISI::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> estimate_ISI::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<5> estimate_ISI::ap_const_lv5_2 = "10";
const bool estimate_ISI::ap_const_boolean_1 = true;

estimate_ISI::estimate_ISI(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1 = new estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1<1,5,64,64,64>("estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1");
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->clk(ap_clk);
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->reset(ap_rst);
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->din0(grp_fu_93_p0);
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->din1(grp_fu_93_p1);
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->ce(ap_var_for_const0);
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1->dout(grp_fu_93_p2);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2 = new estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1<1,6,64,64,64>("estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2");
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->clk(ap_clk);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->reset(ap_rst);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->din0(grp_fu_99_p0);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->din1(grp_fu_99_p1);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->ce(ap_var_for_const0);
    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2->dout(grp_fu_99_p2);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3 = new estimate_ISI_dcmp_64ns_64ns_1_2_1<1,2,64,64,1>("estimate_ISI_dcmp_64ns_64ns_1_2_1_U3");
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->clk(ap_clk);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->reset(ap_rst);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->din0(reg_117);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->din1(reg_110);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->ce(ap_var_for_const0);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->opcode(ap_var_for_const1);
    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3->dout(grp_fu_106_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ISI);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( select_ln5_fu_225_p3 );

    SC_METHOD(thread_ISI_ap_vld);
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_ISIpre_o);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( select_ln5_fu_225_p3 );

    SC_METHOD(thread_ISIpre_o_ap_vld);
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_and_ln9_1_fu_202_p2);
    sensitive << ( and_ln9_fu_196_p2 );
    sensitive << ( grp_fu_106_p2 );

    SC_METHOD(thread_and_ln9_2_fu_213_p2);
    sensitive << ( and_ln9_1_fu_202_p2 );
    sensitive << ( xor_ln5_fu_208_p2 );

    SC_METHOD(thread_and_ln9_fu_196_p2);
    sensitive << ( or_ln9_fu_188_p2 );
    sensitive << ( or_ln9_1_fu_192_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_bitcast_ln9_1_fu_146_p1);
    sensitive << ( reg_110 );

    SC_METHOD(thread_bitcast_ln9_fu_128_p1);
    sensitive << ( reg_117 );

    SC_METHOD(thread_grp_fu_93_p0);
    sensitive << ( spksTime );
    sensitive << ( ISIpre_i );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_93_p1);
    sensitive << ( spksPre_i );
    sensitive << ( reg_110 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ISI_assign_reg_262 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_99_p0);
    sensitive << ( ISIpre_i );
    sensitive << ( reg_110 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ISI_assign_reg_262 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_99_p1);
    sensitive << ( penalty );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ISI_assign_reg_262 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_icmp_ln5_fu_122_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( num );

    SC_METHOD(thread_icmp_ln9_1_fu_170_p2);
    sensitive << ( icmp_ln5_reg_233 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln9_fu_142_p1 );

    SC_METHOD(thread_icmp_ln9_2_fu_176_p2);
    sensitive << ( icmp_ln5_reg_233 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_6_fu_150_p4 );

    SC_METHOD(thread_icmp_ln9_3_fu_182_p2);
    sensitive << ( icmp_ln5_reg_233 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln9_1_fu_160_p1 );

    SC_METHOD(thread_icmp_ln9_fu_164_p2);
    sensitive << ( icmp_ln5_reg_233 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_3_fu_132_p4 );

    SC_METHOD(thread_or_ln9_1_fu_192_p2);
    sensitive << ( icmp_ln9_2_reg_280 );
    sensitive << ( icmp_ln9_3_reg_285 );

    SC_METHOD(thread_or_ln9_fu_188_p2);
    sensitive << ( icmp_ln9_reg_270 );
    sensitive << ( icmp_ln9_1_reg_275 );

    SC_METHOD(thread_select_ln5_fu_225_p3);
    sensitive << ( spksTime );
    sensitive << ( icmp_ln5_reg_233 );
    sensitive << ( select_ln9_fu_219_p3 );

    SC_METHOD(thread_select_ln9_fu_219_p3);
    sensitive << ( and_ln9_2_reg_290 );
    sensitive << ( reg_117 );
    sensitive << ( ISI_assign_reg_262 );

    SC_METHOD(thread_spksPre_o);
    sensitive << ( spksTime );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_spksPre_o_ap_vld);
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_tmp_3_fu_132_p4);
    sensitive << ( bitcast_ln9_fu_128_p1 );

    SC_METHOD(thread_tmp_6_fu_150_p4);
    sensitive << ( bitcast_ln9_1_fu_146_p1 );

    SC_METHOD(thread_trunc_ln9_1_fu_160_p1);
    sensitive << ( bitcast_ln9_1_fu_146_p1 );

    SC_METHOD(thread_trunc_ln9_fu_142_p1);
    sensitive << ( bitcast_ln9_fu_128_p1 );

    SC_METHOD(thread_xor_ln5_fu_208_p2);
    sensitive << ( icmp_ln5_reg_233 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_ISI_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime, "(port)spksTime");
    sc_trace(mVcdFile, spksPre_i, "(port)spksPre_i");
    sc_trace(mVcdFile, spksPre_o, "(port)spksPre_o");
    sc_trace(mVcdFile, spksPre_o_ap_vld, "(port)spksPre_o_ap_vld");
    sc_trace(mVcdFile, ISI, "(port)ISI");
    sc_trace(mVcdFile, ISI_ap_vld, "(port)ISI_ap_vld");
    sc_trace(mVcdFile, ISIpre_i, "(port)ISIpre_i");
    sc_trace(mVcdFile, ISIpre_o, "(port)ISIpre_o");
    sc_trace(mVcdFile, ISIpre_o_ap_vld, "(port)ISIpre_o_ap_vld");
    sc_trace(mVcdFile, penalty, "(port)penalty");
    sc_trace(mVcdFile, num, "(port)num");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_99_p2, "grp_fu_99_p2");
    sc_trace(mVcdFile, reg_110, "reg_110");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln5_reg_233, "icmp_ln5_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, and_ln9_2_reg_290, "and_ln9_2_reg_290");
    sc_trace(mVcdFile, grp_fu_93_p2, "grp_fu_93_p2");
    sc_trace(mVcdFile, reg_117, "reg_117");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, icmp_ln5_fu_122_p2, "icmp_ln5_fu_122_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ISI_assign_reg_262, "ISI_assign_reg_262");
    sc_trace(mVcdFile, icmp_ln9_fu_164_p2, "icmp_ln9_fu_164_p2");
    sc_trace(mVcdFile, icmp_ln9_reg_270, "icmp_ln9_reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, icmp_ln9_1_fu_170_p2, "icmp_ln9_1_fu_170_p2");
    sc_trace(mVcdFile, icmp_ln9_1_reg_275, "icmp_ln9_1_reg_275");
    sc_trace(mVcdFile, icmp_ln9_2_fu_176_p2, "icmp_ln9_2_fu_176_p2");
    sc_trace(mVcdFile, icmp_ln9_2_reg_280, "icmp_ln9_2_reg_280");
    sc_trace(mVcdFile, icmp_ln9_3_fu_182_p2, "icmp_ln9_3_fu_182_p2");
    sc_trace(mVcdFile, icmp_ln9_3_reg_285, "icmp_ln9_3_reg_285");
    sc_trace(mVcdFile, and_ln9_2_fu_213_p2, "and_ln9_2_fu_213_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, select_ln5_fu_225_p3, "select_ln5_fu_225_p3");
    sc_trace(mVcdFile, grp_fu_93_p0, "grp_fu_93_p0");
    sc_trace(mVcdFile, grp_fu_93_p1, "grp_fu_93_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_99_p0, "grp_fu_99_p0");
    sc_trace(mVcdFile, grp_fu_99_p1, "grp_fu_99_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, bitcast_ln9_fu_128_p1, "bitcast_ln9_fu_128_p1");
    sc_trace(mVcdFile, bitcast_ln9_1_fu_146_p1, "bitcast_ln9_1_fu_146_p1");
    sc_trace(mVcdFile, tmp_3_fu_132_p4, "tmp_3_fu_132_p4");
    sc_trace(mVcdFile, trunc_ln9_fu_142_p1, "trunc_ln9_fu_142_p1");
    sc_trace(mVcdFile, tmp_6_fu_150_p4, "tmp_6_fu_150_p4");
    sc_trace(mVcdFile, trunc_ln9_1_fu_160_p1, "trunc_ln9_1_fu_160_p1");
    sc_trace(mVcdFile, or_ln9_fu_188_p2, "or_ln9_fu_188_p2");
    sc_trace(mVcdFile, or_ln9_1_fu_192_p2, "or_ln9_1_fu_192_p2");
    sc_trace(mVcdFile, and_ln9_fu_196_p2, "and_ln9_fu_196_p2");
    sc_trace(mVcdFile, grp_fu_106_p2, "grp_fu_106_p2");
    sc_trace(mVcdFile, and_ln9_1_fu_202_p2, "and_ln9_1_fu_202_p2");
    sc_trace(mVcdFile, xor_ln5_fu_208_p2, "xor_ln5_fu_208_p2");
    sc_trace(mVcdFile, select_ln9_fu_219_p3, "select_ln9_fu_219_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_ISI.hdltvin.dat");
    mHdltvoutHandle.open("estimate_ISI.hdltvout.dat");
}

estimate_ISI::~estimate_ISI() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1;
    delete estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2;
    delete estimate_ISI_dcmp_64ns_64ns_1_2_1_U3;
}

void estimate_ISI::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void estimate_ISI::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void estimate_ISI::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0))) {
        ISI_assign_reg_262 = grp_fu_93_p2.read();
    }
    if ((esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        and_ln9_2_reg_290 = and_ln9_2_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln5_reg_233 = icmp_ln5_fu_122_p2.read();
    }
    if ((esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        icmp_ln9_1_reg_275 = icmp_ln9_1_fu_170_p2.read();
        icmp_ln9_2_reg_280 = icmp_ln9_2_fu_176_p2.read();
        icmp_ln9_3_reg_285 = icmp_ln9_3_fu_182_p2.read();
        icmp_ln9_reg_270 = icmp_ln9_fu_164_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
  esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || (esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
  esl_seteq<1,1,1>(and_ln9_2_reg_290.read(), ap_const_lv1_1)))) {
        reg_110 = grp_fu_99_p2.read();
    }
    if (((esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || (esl_seteq<1,1,1>(icmp_ln5_reg_233.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(and_ln9_2_reg_290.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())))) {
        reg_117 = grp_fu_93_p2.read();
    }
}

void estimate_ISI::thread_ISI() {
    ISI = select_ln5_fu_225_p3.read();
}

void estimate_ISI::thread_ISI_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ISI_ap_vld = ap_const_logic_1;
    } else {
        ISI_ap_vld = ap_const_logic_0;
    }
}

void estimate_ISI::thread_ISIpre_o() {
    ISIpre_o = select_ln5_fu_225_p3.read();
}

void estimate_ISI::thread_ISIpre_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ISIpre_o_ap_vld = ap_const_logic_1;
    } else {
        ISIpre_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_ISI::thread_and_ln9_1_fu_202_p2() {
    and_ln9_1_fu_202_p2 = (and_ln9_fu_196_p2.read() & grp_fu_106_p2.read());
}

void estimate_ISI::thread_and_ln9_2_fu_213_p2() {
    and_ln9_2_fu_213_p2 = (and_ln9_1_fu_202_p2.read() & xor_ln5_fu_208_p2.read());
}

void estimate_ISI::thread_and_ln9_fu_196_p2() {
    and_ln9_fu_196_p2 = (or_ln9_fu_188_p2.read() & or_ln9_1_fu_192_p2.read());
}

void estimate_ISI::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_ISI::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void estimate_ISI::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void estimate_ISI::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void estimate_ISI::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void estimate_ISI::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_ISI::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void estimate_ISI::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void estimate_ISI::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void estimate_ISI::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void estimate_ISI::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void estimate_ISI::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void estimate_ISI::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void estimate_ISI::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void estimate_ISI::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_ISI::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_ISI::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_ISI::thread_bitcast_ln9_1_fu_146_p1() {
    bitcast_ln9_1_fu_146_p1 = reg_110.read();
}

void estimate_ISI::thread_bitcast_ln9_fu_128_p1() {
    bitcast_ln9_fu_128_p1 = reg_117.read();
}

void estimate_ISI::thread_grp_fu_93_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        grp_fu_93_p0 = ISIpre_i.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_93_p0 = spksTime.read();
    } else {
        grp_fu_93_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void estimate_ISI::thread_grp_fu_93_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_93_p1 = reg_110.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_93_p1 = ISI_assign_reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_93_p1 = spksPre_i.read();
    } else {
        grp_fu_93_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void estimate_ISI::thread_grp_fu_99_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_99_p0 = ISI_assign_reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_99_p0 = reg_110.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_99_p0 = ISIpre_i.read();
    } else {
        grp_fu_99_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void estimate_ISI::thread_grp_fu_99_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_99_p1 = ap_const_lv64_3FA0000000000000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_99_p1 = ISI_assign_reg_262.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_99_p1 = penalty.read();
    } else {
        grp_fu_99_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void estimate_ISI::thread_icmp_ln5_fu_122_p2() {
    icmp_ln5_fu_122_p2 = (!num.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(num.read() == ap_const_lv32_0);
}

void estimate_ISI::thread_icmp_ln9_1_fu_170_p2() {
    icmp_ln9_1_fu_170_p2 = (!trunc_ln9_fu_142_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln9_fu_142_p1.read() == ap_const_lv52_0);
}

void estimate_ISI::thread_icmp_ln9_2_fu_176_p2() {
    icmp_ln9_2_fu_176_p2 = (!tmp_6_fu_150_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_150_p4.read() != ap_const_lv11_7FF);
}

void estimate_ISI::thread_icmp_ln9_3_fu_182_p2() {
    icmp_ln9_3_fu_182_p2 = (!trunc_ln9_1_fu_160_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln9_1_fu_160_p1.read() == ap_const_lv52_0);
}

void estimate_ISI::thread_icmp_ln9_fu_164_p2() {
    icmp_ln9_fu_164_p2 = (!tmp_3_fu_132_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_132_p4.read() != ap_const_lv11_7FF);
}

void estimate_ISI::thread_or_ln9_1_fu_192_p2() {
    or_ln9_1_fu_192_p2 = (icmp_ln9_3_reg_285.read() | icmp_ln9_2_reg_280.read());
}

void estimate_ISI::thread_or_ln9_fu_188_p2() {
    or_ln9_fu_188_p2 = (icmp_ln9_1_reg_275.read() | icmp_ln9_reg_270.read());
}

void estimate_ISI::thread_select_ln5_fu_225_p3() {
    select_ln5_fu_225_p3 = (!icmp_ln5_reg_233.read()[0].is_01())? sc_lv<64>(): ((icmp_ln5_reg_233.read()[0].to_bool())? spksTime.read(): select_ln9_fu_219_p3.read());
}

void estimate_ISI::thread_select_ln9_fu_219_p3() {
    select_ln9_fu_219_p3 = (!and_ln9_2_reg_290.read()[0].is_01())? sc_lv<64>(): ((and_ln9_2_reg_290.read()[0].to_bool())? reg_117.read(): ISI_assign_reg_262.read());
}

void estimate_ISI::thread_spksPre_o() {
    spksPre_o = spksTime.read();
}

void estimate_ISI::thread_spksPre_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        spksPre_o_ap_vld = ap_const_logic_1;
    } else {
        spksPre_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_ISI::thread_tmp_3_fu_132_p4() {
    tmp_3_fu_132_p4 = bitcast_ln9_fu_128_p1.read().range(62, 52);
}

void estimate_ISI::thread_tmp_6_fu_150_p4() {
    tmp_6_fu_150_p4 = bitcast_ln9_1_fu_146_p1.read().range(62, 52);
}

void estimate_ISI::thread_trunc_ln9_1_fu_160_p1() {
    trunc_ln9_1_fu_160_p1 = bitcast_ln9_1_fu_146_p1.read().range(52-1, 0);
}

void estimate_ISI::thread_trunc_ln9_fu_142_p1() {
    trunc_ln9_fu_142_p1 = bitcast_ln9_fu_128_p1.read().range(52-1, 0);
}

void estimate_ISI::thread_xor_ln5_fu_208_p2() {
    xor_ln5_fu_208_p2 = (icmp_ln5_reg_233.read() ^ ap_const_lv1_1);
}

void estimate_ISI::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<27>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void estimate_ISI::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime\" :  \"" << spksTime.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksPre_i\" :  \"" << spksPre_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksPre_o\" :  \"" << spksPre_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksPre_o_ap_vld\" :  \"" << spksPre_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI\" :  \"" << ISI.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI_ap_vld\" :  \"" << ISI_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ISIpre_i\" :  \"" << ISIpre_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISIpre_o\" :  \"" << ISIpre_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISIpre_o_ap_vld\" :  \"" << ISIpre_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"penalty\" :  \"" << penalty.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"num\" :  \"" << num.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

