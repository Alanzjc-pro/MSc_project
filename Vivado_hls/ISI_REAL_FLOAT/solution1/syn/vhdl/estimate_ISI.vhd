-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    spksTime : IN STD_LOGIC_VECTOR (63 downto 0);
    spksPre_i : IN STD_LOGIC_VECTOR (63 downto 0);
    spksPre_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    spksPre_o_ap_vld : OUT STD_LOGIC;
    ISI : OUT STD_LOGIC_VECTOR (63 downto 0);
    ISI_ap_vld : OUT STD_LOGIC;
    ISIpre_i : IN STD_LOGIC_VECTOR (63 downto 0);
    ISIpre_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    ISIpre_o_ap_vld : OUT STD_LOGIC;
    penalty : IN STD_LOGIC_VECTOR (63 downto 0);
    num : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of estimate_ISI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1117,HLS_SYN_LUT=2645,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3FA0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln5_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal and_ln9_2_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_117 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln5_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ISI_assign_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln9_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_2_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_2_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_3_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_3_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_2_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal select_ln5_fu_225_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_93_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_99_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bitcast_ln9_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln9_1_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_132_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln9_fu_142_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_150_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln9_1_fu_160_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln9_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln9_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln5_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_219_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component estimate_ISI_dcmp_64ns_64ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1 : component estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_93_p0,
        din1 => grp_fu_93_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p2);

    estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2 : component estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_99_p0,
        din1 => grp_fu_99_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_99_p2);

    estimate_ISI_dcmp_64ns_64ns_1_2_1_U3 : component estimate_ISI_dcmp_64ns_64ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_117,
        din1 => reg_110,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_106_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                ISI_assign_reg_262 <= grp_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                and_ln9_2_reg_290 <= and_ln9_2_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln5_reg_233 <= icmp_ln5_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                icmp_ln9_1_reg_275 <= icmp_ln9_1_fu_170_p2;
                icmp_ln9_2_reg_280 <= icmp_ln9_2_fu_176_p2;
                icmp_ln9_3_reg_285 <= icmp_ln9_3_fu_182_p2;
                icmp_ln9_reg_270 <= icmp_ln9_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln9_2_reg_290) and (icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_110 <= grp_fu_99_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln9_2_reg_290) and (icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((icmp_ln5_reg_233 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then
                reg_117 <= grp_fu_93_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ISI <= select_ln5_fu_225_p3;

    ISI_ap_vld_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ISI_ap_vld <= ap_const_logic_1;
        else 
            ISI_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ISIpre_o <= select_ln5_fu_225_p3;

    ISIpre_o_ap_vld_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ISIpre_o_ap_vld <= ap_const_logic_1;
        else 
            ISIpre_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln9_1_fu_202_p2 <= (grp_fu_106_p2 and and_ln9_fu_196_p2);
    and_ln9_2_fu_213_p2 <= (xor_ln5_fu_208_p2 and and_ln9_1_fu_202_p2);
    and_ln9_fu_196_p2 <= (or_ln9_fu_188_p2 and or_ln9_1_fu_192_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln9_1_fu_146_p1 <= reg_110;
    bitcast_ln9_fu_128_p1 <= reg_117;

    grp_fu_93_p0_assign_proc : process(spksTime, ISIpre_i, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_93_p0 <= ISIpre_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p0 <= spksTime;
        else 
            grp_fu_93_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_93_p1_assign_proc : process(spksPre_i, reg_110, ap_CS_fsm_state3, ISI_assign_reg_262, ap_CS_fsm_state9, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_93_p1 <= reg_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_93_p1 <= ISI_assign_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p1 <= spksPre_i;
        else 
            grp_fu_93_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_99_p0_assign_proc : process(ISIpre_i, reg_110, ap_CS_fsm_state2, ISI_assign_reg_262, ap_CS_fsm_state8, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_99_p0 <= ISI_assign_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_99_p0 <= reg_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_99_p0 <= ISIpre_i;
        else 
            grp_fu_99_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_99_p1_assign_proc : process(penalty, ap_CS_fsm_state2, ISI_assign_reg_262, ap_CS_fsm_state8, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_99_p1 <= ap_const_lv64_3FA0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_99_p1 <= ISI_assign_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_99_p1 <= penalty;
        else 
            grp_fu_99_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln5_fu_122_p2 <= "1" when (num = ap_const_lv32_0) else "0";
    icmp_ln9_1_fu_170_p2 <= "1" when (trunc_ln9_fu_142_p1 = ap_const_lv52_0) else "0";
    icmp_ln9_2_fu_176_p2 <= "0" when (tmp_6_fu_150_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln9_3_fu_182_p2 <= "1" when (trunc_ln9_1_fu_160_p1 = ap_const_lv52_0) else "0";
    icmp_ln9_fu_164_p2 <= "0" when (tmp_3_fu_132_p4 = ap_const_lv11_7FF) else "1";
    or_ln9_1_fu_192_p2 <= (icmp_ln9_3_reg_285 or icmp_ln9_2_reg_280);
    or_ln9_fu_188_p2 <= (icmp_ln9_reg_270 or icmp_ln9_1_reg_275);
    select_ln5_fu_225_p3 <= 
        spksTime when (icmp_ln5_reg_233(0) = '1') else 
        select_ln9_fu_219_p3;
    select_ln9_fu_219_p3 <= 
        reg_117 when (and_ln9_2_reg_290(0) = '1') else 
        ISI_assign_reg_262;
    spksPre_o <= spksTime;

    spksPre_o_ap_vld_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            spksPre_o_ap_vld <= ap_const_logic_1;
        else 
            spksPre_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_132_p4 <= bitcast_ln9_fu_128_p1(62 downto 52);
    tmp_6_fu_150_p4 <= bitcast_ln9_1_fu_146_p1(62 downto 52);
    trunc_ln9_1_fu_160_p1 <= bitcast_ln9_1_fu_146_p1(52 - 1 downto 0);
    trunc_ln9_fu_142_p1 <= bitcast_ln9_fu_128_p1(52 - 1 downto 0);
    xor_ln5_fu_208_p2 <= (icmp_ln5_reg_233 xor ap_const_lv1_1);
end behav;
