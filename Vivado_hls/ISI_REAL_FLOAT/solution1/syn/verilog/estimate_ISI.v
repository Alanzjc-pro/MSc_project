// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1117,HLS_SYN_LUT=2645,HLS_VERSION=2019_1}" *)

module estimate_ISI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime,
        spksPre_i,
        spksPre_o,
        spksPre_o_ap_vld,
        ISI,
        ISI_ap_vld,
        ISIpre_i,
        ISIpre_o,
        ISIpre_o_ap_vld,
        penalty,
        num
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] spksTime;
input  [63:0] spksPre_i;
output  [63:0] spksPre_o;
output   spksPre_o_ap_vld;
output  [63:0] ISI;
output   ISI_ap_vld;
input  [63:0] ISIpre_i;
output  [63:0] ISIpre_o;
output   ISIpre_o_ap_vld;
input  [63:0] penalty;
input  [31:0] num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksPre_o_ap_vld;
reg ISI_ap_vld;
reg ISIpre_o_ap_vld;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_99_p2;
reg   [63:0] reg_110;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln5_reg_233;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state21;
reg   [0:0] and_ln9_2_reg_290;
wire   [63:0] grp_fu_93_p2;
reg   [63:0] reg_117;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln5_fu_122_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [63:0] ISI_assign_reg_262;
wire   [0:0] icmp_ln9_fu_164_p2;
reg   [0:0] icmp_ln9_reg_270;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln9_1_fu_170_p2;
reg   [0:0] icmp_ln9_1_reg_275;
wire   [0:0] icmp_ln9_2_fu_176_p2;
reg   [0:0] icmp_ln9_2_reg_280;
wire   [0:0] icmp_ln9_3_fu_182_p2;
reg   [0:0] icmp_ln9_3_reg_285;
wire   [0:0] and_ln9_2_fu_213_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state27;
wire   [63:0] select_ln5_fu_225_p3;
reg   [63:0] grp_fu_93_p0;
reg   [63:0] grp_fu_93_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state22;
reg   [63:0] grp_fu_99_p0;
reg   [63:0] grp_fu_99_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire   [63:0] bitcast_ln9_fu_128_p1;
wire   [63:0] bitcast_ln9_1_fu_146_p1;
wire   [10:0] tmp_3_fu_132_p4;
wire   [51:0] trunc_ln9_fu_142_p1;
wire   [10:0] tmp_6_fu_150_p4;
wire   [51:0] trunc_ln9_1_fu_160_p1;
wire   [0:0] or_ln9_fu_188_p2;
wire   [0:0] or_ln9_1_fu_192_p2;
wire   [0:0] and_ln9_fu_196_p2;
wire   [0:0] grp_fu_106_p2;
wire   [0:0] and_ln9_1_fu_202_p2;
wire   [0:0] xor_ln5_fu_208_p2;
wire   [63:0] select_ln9_fu_219_p3;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_ISI_dsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_93_p0),
    .din1(grp_fu_93_p1),
    .ce(1'b1),
    .dout(grp_fu_93_p2)
);

estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_ISI_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_99_p0),
    .din1(grp_fu_99_p1),
    .ce(1'b1),
    .dout(grp_fu_99_p2)
);

estimate_ISI_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_ISI_dcmp_64ns_64ns_1_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_117),
    .din1(reg_110),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_106_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ISI_assign_reg_262 <= grp_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        and_ln9_2_reg_290 <= and_ln9_2_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln5_reg_233 <= icmp_ln5_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        icmp_ln9_1_reg_275 <= icmp_ln9_1_fu_170_p2;
        icmp_ln9_2_reg_280 <= icmp_ln9_2_fu_176_p2;
        icmp_ln9_3_reg_285 <= icmp_ln9_3_fu_182_p2;
        icmp_ln9_reg_270 <= icmp_ln9_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln9_2_reg_290) & (icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        reg_110 <= grp_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == and_ln9_2_reg_290) & (icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_ln5_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_117 <= grp_fu_93_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ISI_ap_vld = 1'b1;
    end else begin
        ISI_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ISIpre_o_ap_vld = 1'b1;
    end else begin
        ISIpre_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_93_p0 = ISIpre_i;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p0 = spksTime;
    end else begin
        grp_fu_93_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_93_p1 = reg_110;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_93_p1 = ISI_assign_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p1 = spksPre_i;
    end else begin
        grp_fu_93_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_99_p0 = ISI_assign_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_99_p0 = reg_110;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_99_p0 = ISIpre_i;
    end else begin
        grp_fu_99_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_99_p1 = 64'd4584664420663164928;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_99_p1 = ISI_assign_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_99_p1 = penalty;
    end else begin
        grp_fu_99_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        spksPre_o_ap_vld = 1'b1;
    end else begin
        spksPre_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISI = select_ln5_fu_225_p3;

assign ISIpre_o = select_ln5_fu_225_p3;

assign and_ln9_1_fu_202_p2 = (grp_fu_106_p2 & and_ln9_fu_196_p2);

assign and_ln9_2_fu_213_p2 = (xor_ln5_fu_208_p2 & and_ln9_1_fu_202_p2);

assign and_ln9_fu_196_p2 = (or_ln9_fu_188_p2 & or_ln9_1_fu_192_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln9_1_fu_146_p1 = reg_110;

assign bitcast_ln9_fu_128_p1 = reg_117;

assign icmp_ln5_fu_122_p2 = ((num == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_170_p2 = ((trunc_ln9_fu_142_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_2_fu_176_p2 = ((tmp_6_fu_150_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln9_3_fu_182_p2 = ((trunc_ln9_1_fu_160_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_164_p2 = ((tmp_3_fu_132_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln9_1_fu_192_p2 = (icmp_ln9_3_reg_285 | icmp_ln9_2_reg_280);

assign or_ln9_fu_188_p2 = (icmp_ln9_reg_270 | icmp_ln9_1_reg_275);

assign select_ln5_fu_225_p3 = ((icmp_ln5_reg_233[0:0] === 1'b1) ? spksTime : select_ln9_fu_219_p3);

assign select_ln9_fu_219_p3 = ((and_ln9_2_reg_290[0:0] === 1'b1) ? reg_117 : ISI_assign_reg_262);

assign spksPre_o = spksTime;

assign tmp_3_fu_132_p4 = {{bitcast_ln9_fu_128_p1[62:52]}};

assign tmp_6_fu_150_p4 = {{bitcast_ln9_1_fu_146_p1[62:52]}};

assign trunc_ln9_1_fu_160_p1 = bitcast_ln9_1_fu_146_p1[51:0];

assign trunc_ln9_fu_142_p1 = bitcast_ln9_fu_128_p1[51:0];

assign xor_ln5_fu_208_p2 = (icmp_ln5_reg_233 ^ 1'd1);

endmodule //estimate_ISI
