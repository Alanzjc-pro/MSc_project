// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685000,HLS_SYN_LAT=13729,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=163,HLS_SYN_LUT=261,HLS_VERSION=2019_1}" *)

module estimate_ISI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V_address0,
        spksTime_V_ce0,
        spksTime_V_q0,
        spksPre_V_address0,
        spksPre_V_ce0,
        spksPre_V_we0,
        spksPre_V_d0,
        spksPre_V_q0,
        ISI_V_address0,
        ISI_V_ce0,
        ISI_V_we0,
        ISI_V_d0,
        ISI_V_q0,
        ISIpre_V_address0,
        ISIpre_V_ce0,
        ISIpre_V_we0,
        ISIpre_V_d0,
        ISIpre_V_q0,
        elements_V_address0,
        elements_V_ce0,
        elements_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] spksTime_V_address0;
output   spksTime_V_ce0;
input  [17:0] spksTime_V_q0;
output  [6:0] spksPre_V_address0;
output   spksPre_V_ce0;
output   spksPre_V_we0;
output  [17:0] spksPre_V_d0;
input  [17:0] spksPre_V_q0;
output  [6:0] ISI_V_address0;
output   ISI_V_ce0;
output   ISI_V_we0;
output  [9:0] ISI_V_d0;
input  [9:0] ISI_V_q0;
output  [6:0] ISIpre_V_address0;
output   ISIpre_V_ce0;
output   ISIpre_V_we0;
output  [9:0] ISIpre_V_d0;
input  [9:0] ISIpre_V_q0;
output  [6:0] elements_V_address0;
output   elements_V_ce0;
input  [5:0] elements_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_V_ce0;
reg spksPre_V_ce0;
reg spksPre_V_we0;
reg ISI_V_ce0;
reg ISI_V_we0;
reg[9:0] ISI_V_d0;
reg ISIpre_V_ce0;
reg ISIpre_V_we0;
reg elements_V_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_V_fu_169_p2;
reg   [6:0] i_V_reg_352;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln1498_fu_207_p2;
reg   [12:0] add_ln1498_reg_357;
wire   [0:0] icmp_ln7_fu_163_p2;
reg   [6:0] elements_V_addr_reg_362;
reg   [6:0] ISI_V_addr_reg_367;
reg   [6:0] spksPre_V_addr_reg_372;
reg   [6:0] ISIpre_V_addr_reg_377;
wire   [5:0] j_V_fu_219_p2;
reg   [5:0] j_V_reg_385;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln887_fu_213_p2;
reg   [17:0] p_Val2_s_reg_395;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln1498_fu_239_p2;
reg   [0:0] icmp_ln1498_reg_401;
wire   [13:0] trunc_ln703_1_fu_245_p1;
reg   [13:0] trunc_ln703_1_reg_405;
wire    ap_CS_fsm_state6;
wire   [13:0] ret_V_2_fu_252_p2;
reg   [13:0] ret_V_2_reg_410;
wire    ap_CS_fsm_state7;
wire   [9:0] p_Val2_4_fu_257_p4;
reg   [9:0] p_Val2_4_reg_415;
reg   [9:0] p_Val2_3_reg_421;
reg   [9:0] trunc_ln1_reg_428;
wire   [0:0] icmp_ln1496_fu_299_p2;
reg   [0:0] icmp_ln1496_reg_433;
wire    ap_CS_fsm_state8;
wire   [9:0] sub_ln703_1_fu_336_p2;
reg   [9:0] sub_ln703_1_reg_437;
reg   [6:0] t_V_reg_141;
reg   [5:0] t_V_1_reg_152;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln544_fu_175_p1;
wire   [63:0] zext_ln1498_3_fu_234_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [11:0] tmp_1_fu_183_p3;
wire   [9:0] tmp_2_fu_195_p3;
wire   [12:0] zext_ln1498_1_fu_203_p1;
wire   [12:0] zext_ln1498_fu_191_p1;
wire   [12:0] zext_ln1498_2_fu_225_p1;
wire   [12:0] add_ln1498_1_fu_229_p2;
wire   [13:0] trunc_ln703_fu_249_p1;
wire   [12:0] r_V_fu_342_p2;
wire   [10:0] lhs_V_fu_284_p1;
wire   [10:0] rhs_V_fu_287_p1;
wire   [10:0] ret_V_fu_290_p2;
wire   [10:0] zext_ln1496_fu_296_p1;
wire   [4:0] r_V_3_fu_305_p4;
wire   [4:0] trunc_ln2_fu_318_p4;
wire   [9:0] r_V_5_fu_327_p1;
wire   [9:0] sub_ln703_fu_331_p2;
wire   [9:0] r_V_4_fu_314_p1;
wire   [9:0] r_V_fu_342_p0;
wire   [9:0] r_V_fu_342_p1;
reg   [10:0] ap_NS_fsm;
wire   [12:0] r_V_fu_342_p00;
wire   [12:0] r_V_fu_342_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

estimate_ISI_mul_mul_10ns_10ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 13 ))
estimate_ISI_mul_mul_10ns_10ns_13_1_1_U1(
    .din0(r_V_fu_342_p0),
    .din1(r_V_fu_342_p1),
    .dout(r_V_fu_342_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_152 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_V_1_reg_152 <= j_V_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_reg_141 <= i_V_reg_352;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_141 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ISI_V_addr_reg_367 <= zext_ln544_fu_175_p1;
        ISIpre_V_addr_reg_377 <= zext_ln544_fu_175_p1;
        add_ln1498_reg_357[12 : 3] <= add_ln1498_fu_207_p2[12 : 3];
        elements_V_addr_reg_362 <= zext_ln544_fu_175_p1;
        spksPre_V_addr_reg_372 <= zext_ln544_fu_175_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_352 <= i_V_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln1496_reg_433 <= icmp_ln1496_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln1498_reg_401 <= icmp_ln1498_fu_239_p2;
        p_Val2_s_reg_395 <= spksTime_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_V_reg_385 <= j_V_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_3_reg_421 <= ISIpre_V_q0;
        p_Val2_4_reg_415 <= {{ret_V_2_fu_252_p2[13:4]}};
        ret_V_2_reg_410 <= ret_V_2_fu_252_p2;
        trunc_ln1_reg_428 <= {{r_V_fu_342_p2[12:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1496_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln703_1_reg_437 <= sub_ln703_1_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln703_1_reg_405 <= trunc_ln703_1_fu_245_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        ISI_V_ce0 = 1'b1;
    end else begin
        ISI_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ISI_V_d0 = sub_ln703_1_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ISI_V_d0 = p_Val2_4_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ISI_V_d0 = 10'd256;
    end else begin
        ISI_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln1496_reg_433 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln1498_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        ISI_V_we0 = 1'b1;
    end else begin
        ISI_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        ISIpre_V_ce0 = 1'b1;
    end else begin
        ISIpre_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1498_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        ISIpre_V_we0 = 1'b1;
    end else begin
        ISIpre_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        elements_V_ce0 = 1'b1;
    end else begin
        elements_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        spksPre_V_ce0 = 1'b1;
    end else begin
        spksPre_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        spksPre_V_we0 = 1'b1;
    end else begin
        spksPre_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        spksTime_V_ce0 = 1'b1;
    end else begin
        spksTime_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln887_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln1498_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISI_V_address0 = ISI_V_addr_reg_367;

assign ISIpre_V_address0 = ISIpre_V_addr_reg_377;

assign ISIpre_V_d0 = ISI_V_q0;

assign add_ln1498_1_fu_229_p2 = (add_ln1498_reg_357 + zext_ln1498_2_fu_225_p1);

assign add_ln1498_fu_207_p2 = (zext_ln1498_1_fu_203_p1 + zext_ln1498_fu_191_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign elements_V_address0 = elements_V_addr_reg_362;

assign i_V_fu_169_p2 = (t_V_reg_141 + 7'd1);

assign icmp_ln1496_fu_299_p2 = (($signed(ret_V_fu_290_p2) < $signed(zext_ln1496_fu_296_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_239_p2 = ((spksTime_V_q0 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_163_p2 = ((t_V_reg_141 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_213_p2 = ((t_V_1_reg_152 < elements_V_q0) ? 1'b1 : 1'b0);

assign j_V_fu_219_p2 = (t_V_1_reg_152 + 6'd1);

assign lhs_V_fu_284_p1 = p_Val2_3_reg_421;

assign p_Val2_4_fu_257_p4 = {{ret_V_2_fu_252_p2[13:4]}};

assign r_V_3_fu_305_p4 = {{p_Val2_3_reg_421[9:5]}};

assign r_V_4_fu_314_p1 = r_V_3_fu_305_p4;

assign r_V_5_fu_327_p1 = trunc_ln2_fu_318_p4;

assign r_V_fu_342_p0 = r_V_fu_342_p00;

assign r_V_fu_342_p00 = p_Val2_4_fu_257_p4;

assign r_V_fu_342_p1 = r_V_fu_342_p10;

assign r_V_fu_342_p10 = ISIpre_V_q0;

assign ret_V_2_fu_252_p2 = (trunc_ln703_fu_249_p1 - trunc_ln703_1_reg_405);

assign ret_V_fu_290_p2 = (lhs_V_fu_284_p1 - rhs_V_fu_287_p1);

assign rhs_V_fu_287_p1 = p_Val2_4_reg_415;

assign spksPre_V_address0 = spksPre_V_addr_reg_372;

assign spksPre_V_d0 = p_Val2_s_reg_395;

assign spksTime_V_address0 = zext_ln1498_3_fu_234_p1;

assign sub_ln703_1_fu_336_p2 = (sub_ln703_fu_331_p2 - r_V_4_fu_314_p1);

assign sub_ln703_fu_331_p2 = (p_Val2_3_reg_421 - r_V_5_fu_327_p1);

assign tmp_1_fu_183_p3 = {{t_V_reg_141}, {5'd0}};

assign tmp_2_fu_195_p3 = {{t_V_reg_141}, {3'd0}};

assign trunc_ln2_fu_318_p4 = {{ret_V_2_reg_410[13:9]}};

assign trunc_ln703_1_fu_245_p1 = spksPre_V_q0[13:0];

assign trunc_ln703_fu_249_p1 = p_Val2_s_reg_395[13:0];

assign zext_ln1496_fu_296_p1 = trunc_ln1_reg_428;

assign zext_ln1498_1_fu_203_p1 = tmp_2_fu_195_p3;

assign zext_ln1498_2_fu_225_p1 = t_V_1_reg_152;

assign zext_ln1498_3_fu_234_p1 = add_ln1498_1_fu_229_p2;

assign zext_ln1498_fu_191_p1 = tmp_1_fu_183_p3;

assign zext_ln544_fu_175_p1 = t_V_reg_141;

always @ (posedge ap_clk) begin
    add_ln1498_reg_357[2:0] <= 3'b000;
end

endmodule //estimate_ISI
