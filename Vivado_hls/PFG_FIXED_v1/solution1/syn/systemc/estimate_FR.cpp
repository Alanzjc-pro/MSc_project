// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<34> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<34> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<34> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state5 = "10000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state6 = "100000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> estimate_FR::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_FR::ap_const_lv32_3 = "11";
const sc_lv<32> estimate_FR::ap_const_lv32_4 = "100";
const sc_lv<32> estimate_FR::ap_const_lv32_1F = "11111";
const sc_lv<32> estimate_FR::ap_const_lv32_20 = "100000";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_21 = "100001";
const sc_lv<7> estimate_FR::ap_const_lv7_0 = "0000000";
const sc_lv<32> estimate_FR::ap_const_lv32_2 = "10";
const sc_lv<7> estimate_FR::ap_const_lv7_1 = "1";
const sc_lv<64> estimate_FR::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<17> estimate_FR::ap_const_lv17_0 = "00000000000000000";
const sc_lv<7> estimate_FR::ap_const_lv7_4A = "1001010";
const sc_lv<25> estimate_FR::ap_const_lv25_800000 = "100000000000000000000000";
const sc_lv<7> estimate_FR::ap_const_lv7_7F = "1111111";
const sc_lv<32> estimate_FR::ap_const_lv32_14 = "10100";
const sc_lv<18> estimate_FR::ap_const_lv18_3C0 = "1111000000";
const sc_lv<32> estimate_FR::ap_const_lv32_5 = "101";
const sc_lv<32> estimate_FR::ap_const_lv32_11 = "10001";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1 = new estimate_FR_sdiv_25ns_17s_25_29_seq_1<1,29,25,17,25>("estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1");
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->clk(ap_clk);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->reset(ap_rst);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->start(grp_fu_202_ap_start);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->done(grp_fu_202_ap_done);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->din0(ap_var_for_const0);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->din1(ISI_V_q0);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->ce(ap_var_for_const1);
    estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1->dout(grp_fu_202_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FR_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( FR_V_addr_1_reg_307 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( zext_ln16_fu_214_p1 );

    SC_METHOD(thread_FR_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_FR_V_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( add_ln703_reg_326 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( grp_fu_202_p2 );

    SC_METHOD(thread_FR_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln1494_reg_322 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_ISI_V_address0);
    sensitive << ( zext_ln11_reg_284 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln15_fu_192_p1 );

    SC_METHOD(thread_ISI_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ISI_V_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln703_fu_171_p1 );
    sensitive << ( trunc_ln703_1_fu_175_p1 );

    SC_METHOD(thread_ISI_V_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add_ln16_fu_208_p2);
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_add_ln703_fu_264_p2);
    sensitive << ( FR_V_q0 );
    sensitive << ( p_Val2_5_fu_260_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_186_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_186_p2 );

    SC_METHOD(thread_grp_fu_202_ap_start);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_155_p2);
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_icmp_ln10_fu_149_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_icmp_ln1494_fu_244_p2);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ret_V_fu_238_p2 );

    SC_METHOD(thread_icmp_ln14_fu_186_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_j_fu_270_p2);
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_lhs_V_fu_230_p1);
    sensitive << ( p_Val2_3_fu_219_p4 );

    SC_METHOD(thread_p_Val2_3_fu_219_p4);
    sensitive << ( grp_fu_202_p2 );

    SC_METHOD(thread_p_Val2_5_fu_260_p1);
    sensitive << ( trunc_ln1_fu_250_p4 );

    SC_METHOD(thread_ret_V_fu_238_p2);
    sensitive << ( lhs_V_fu_230_p1 );
    sensitive << ( rhs_V_fu_234_p1 );

    SC_METHOD(thread_rhs_V_fu_234_p1);
    sensitive << ( FR_V_q0 );

    SC_METHOD(thread_spksTime_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_1_fu_166_p1 );

    SC_METHOD(thread_spksTime_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_fu_161_p1 );

    SC_METHOD(thread_spksTime_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_spksTime_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_trunc_ln1_fu_250_p4);
    sensitive << ( ret_V_fu_238_p2 );

    SC_METHOD(thread_trunc_ln703_1_fu_175_p1);
    sensitive << ( spksTime_V_q1 );

    SC_METHOD(thread_trunc_ln703_fu_171_p1);
    sensitive << ( spksTime_V_q0 );

    SC_METHOD(thread_zext_ln11_1_fu_166_p1);
    sensitive << ( i_fu_155_p2 );

    SC_METHOD(thread_zext_ln11_fu_161_p1);
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_zext_ln15_fu_192_p1);
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_zext_ln16_fu_214_p1);
    sensitive << ( add_ln16_fu_208_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_149_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_186_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime_V_address0, "(port)spksTime_V_address0");
    sc_trace(mVcdFile, spksTime_V_ce0, "(port)spksTime_V_ce0");
    sc_trace(mVcdFile, spksTime_V_q0, "(port)spksTime_V_q0");
    sc_trace(mVcdFile, spksTime_V_address1, "(port)spksTime_V_address1");
    sc_trace(mVcdFile, spksTime_V_ce1, "(port)spksTime_V_ce1");
    sc_trace(mVcdFile, spksTime_V_q1, "(port)spksTime_V_q1");
    sc_trace(mVcdFile, FR_V_address0, "(port)FR_V_address0");
    sc_trace(mVcdFile, FR_V_ce0, "(port)FR_V_ce0");
    sc_trace(mVcdFile, FR_V_we0, "(port)FR_V_we0");
    sc_trace(mVcdFile, FR_V_d0, "(port)FR_V_d0");
    sc_trace(mVcdFile, FR_V_q0, "(port)FR_V_q0");
    sc_trace(mVcdFile, ISI_V_address0, "(port)ISI_V_address0");
    sc_trace(mVcdFile, ISI_V_ce0, "(port)ISI_V_ce0");
    sc_trace(mVcdFile, ISI_V_we0, "(port)ISI_V_we0");
    sc_trace(mVcdFile, ISI_V_d0, "(port)ISI_V_d0");
    sc_trace(mVcdFile, ISI_V_q0, "(port)ISI_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_155_p2, "i_fu_155_p2");
    sc_trace(mVcdFile, i_reg_279, "i_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln11_fu_161_p1, "zext_ln11_fu_161_p1");
    sc_trace(mVcdFile, zext_ln11_reg_284, "zext_ln11_reg_284");
    sc_trace(mVcdFile, icmp_ln10_fu_149_p2, "icmp_ln10_fu_149_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln14_fu_186_p2, "icmp_ln14_fu_186_p2");
    sc_trace(mVcdFile, FR_V_addr_1_reg_307, "FR_V_addr_1_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, icmp_ln1494_fu_244_p2, "icmp_ln1494_fu_244_p2");
    sc_trace(mVcdFile, icmp_ln1494_reg_322, "icmp_ln1494_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, add_ln703_fu_264_p2, "add_ln703_fu_264_p2");
    sc_trace(mVcdFile, add_ln703_reg_326, "add_ln703_reg_326");
    sc_trace(mVcdFile, j_fu_270_p2, "j_fu_270_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, i_0_reg_126, "i_0_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_0_reg_137, "j_0_reg_137");
    sc_trace(mVcdFile, zext_ln11_1_fu_166_p1, "zext_ln11_1_fu_166_p1");
    sc_trace(mVcdFile, zext_ln15_fu_192_p1, "zext_ln15_fu_192_p1");
    sc_trace(mVcdFile, zext_ln16_fu_214_p1, "zext_ln16_fu_214_p1");
    sc_trace(mVcdFile, p_Val2_3_fu_219_p4, "p_Val2_3_fu_219_p4");
    sc_trace(mVcdFile, trunc_ln703_fu_171_p1, "trunc_ln703_fu_171_p1");
    sc_trace(mVcdFile, trunc_ln703_1_fu_175_p1, "trunc_ln703_1_fu_175_p1");
    sc_trace(mVcdFile, add_ln16_fu_208_p2, "add_ln16_fu_208_p2");
    sc_trace(mVcdFile, grp_fu_202_p2, "grp_fu_202_p2");
    sc_trace(mVcdFile, lhs_V_fu_230_p1, "lhs_V_fu_230_p1");
    sc_trace(mVcdFile, rhs_V_fu_234_p1, "rhs_V_fu_234_p1");
    sc_trace(mVcdFile, ret_V_fu_238_p2, "ret_V_fu_238_p2");
    sc_trace(mVcdFile, trunc_ln1_fu_250_p4, "trunc_ln1_fu_250_p4");
    sc_trace(mVcdFile, p_Val2_5_fu_260_p1, "p_Val2_5_fu_260_p1");
    sc_trace(mVcdFile, grp_fu_202_ap_start, "grp_fu_202_ap_start");
    sc_trace(mVcdFile, grp_fu_202_ap_done, "grp_fu_202_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1;
}

void estimate_FR::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void estimate_FR::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv25_800000;
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_126 = i_reg_279.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_126 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_149_p2.read(), ap_const_lv1_1))) {
        j_0_reg_137 = ap_const_lv7_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        j_0_reg_137 = j_fu_270_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_186_p2.read()))) {
        FR_V_addr_1_reg_307 =  (sc_lv<7>) (zext_ln15_fu_192_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(icmp_ln1494_fu_244_p2.read(), ap_const_lv1_1))) {
        add_ln703_reg_326 = add_ln703_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_279 = i_fu_155_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        icmp_ln1494_reg_322 = icmp_ln1494_fu_244_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_149_p2.read(), ap_const_lv1_0))) {
        zext_ln11_reg_284 = zext_ln11_fu_161_p1.read();
    }
}

void estimate_FR::thread_FR_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        FR_V_address0 = FR_V_addr_1_reg_307.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        FR_V_address0 =  (sc_lv<7>) (zext_ln16_fu_214_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        FR_V_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        FR_V_address0 = "XXXXXXX";
    }
}

void estimate_FR::thread_FR_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        FR_V_ce0 = ap_const_logic_1;
    } else {
        FR_V_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_FR_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        FR_V_d0 = add_ln703_reg_326.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        FR_V_d0 = grp_fu_202_p2.read().range(20, 4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        FR_V_d0 = ap_const_lv17_0;
    } else {
        FR_V_d0 =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
    }
}

void estimate_FR::thread_FR_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(icmp_ln1494_reg_322.read(), ap_const_lv1_1)))) {
        FR_V_we0 = ap_const_logic_1;
    } else {
        FR_V_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_ISI_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ISI_V_address0 =  (sc_lv<7>) (zext_ln15_fu_192_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ISI_V_address0 =  (sc_lv<7>) (zext_ln11_reg_284.read());
    } else {
        ISI_V_address0 = "XXXXXXX";
    }
}

void estimate_FR::thread_ISI_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ISI_V_ce0 = ap_const_logic_1;
    } else {
        ISI_V_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_ISI_V_d0() {
    ISI_V_d0 = (!trunc_ln703_fu_171_p1.read().is_01() || !trunc_ln703_1_fu_175_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(trunc_ln703_fu_171_p1.read()) - sc_biguint<17>(trunc_ln703_1_fu_175_p1.read()));
}

void estimate_FR::thread_ISI_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ISI_V_we0 = ap_const_logic_1;
    } else {
        ISI_V_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_add_ln16_fu_208_p2() {
    add_ln16_fu_208_p2 = (!j_0_reg_137.read().is_01() || !ap_const_lv7_7F.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_137.read()) + sc_bigint<7>(ap_const_lv7_7F));
}

void estimate_FR::thread_add_ln703_fu_264_p2() {
    add_ln703_fu_264_p2 = (!FR_V_q0.read().is_01() || !p_Val2_5_fu_260_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(FR_V_q0.read()) + sc_biguint<17>(p_Val2_5_fu_260_p1.read()));
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_FR::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void estimate_FR::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void estimate_FR::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void estimate_FR::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void estimate_FR::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void estimate_FR::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void estimate_FR::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_186_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_186_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_grp_fu_202_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_202_ap_start = ap_const_logic_1;
    } else {
        grp_fu_202_ap_start = ap_const_logic_0;
    }
}

void estimate_FR::thread_i_fu_155_p2() {
    i_fu_155_p2 = (!i_0_reg_126.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_126.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void estimate_FR::thread_icmp_ln10_fu_149_p2() {
    icmp_ln10_fu_149_p2 = (!i_0_reg_126.read().is_01() || !ap_const_lv7_4A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_126.read() == ap_const_lv7_4A);
}

void estimate_FR::thread_icmp_ln1494_fu_244_p2() {
    icmp_ln1494_fu_244_p2 = (!ret_V_fu_238_p2.read().is_01() || !ap_const_lv18_3C0.is_01())? sc_lv<1>(): (sc_bigint<18>(ret_V_fu_238_p2.read()) > sc_bigint<18>(ap_const_lv18_3C0));
}

void estimate_FR::thread_icmp_ln14_fu_186_p2() {
    icmp_ln14_fu_186_p2 = (!j_0_reg_137.read().is_01() || !ap_const_lv7_4A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_137.read() == ap_const_lv7_4A);
}

void estimate_FR::thread_j_fu_270_p2() {
    j_fu_270_p2 = (!j_0_reg_137.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_137.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void estimate_FR::thread_lhs_V_fu_230_p1() {
    lhs_V_fu_230_p1 = esl_zext<18,17>(p_Val2_3_fu_219_p4.read());
}

void estimate_FR::thread_p_Val2_3_fu_219_p4() {
    p_Val2_3_fu_219_p4 = grp_fu_202_p2.read().range(20, 4);
}

void estimate_FR::thread_p_Val2_5_fu_260_p1() {
    p_Val2_5_fu_260_p1 = esl_zext<17,13>(trunc_ln1_fu_250_p4.read());
}

void estimate_FR::thread_ret_V_fu_238_p2() {
    ret_V_fu_238_p2 = (!lhs_V_fu_230_p1.read().is_01() || !rhs_V_fu_234_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(lhs_V_fu_230_p1.read()) - sc_biguint<18>(rhs_V_fu_234_p1.read()));
}

void estimate_FR::thread_rhs_V_fu_234_p1() {
    rhs_V_fu_234_p1 = esl_zext<18,17>(FR_V_q0.read());
}

void estimate_FR::thread_spksTime_V_address0() {
    spksTime_V_address0 =  (sc_lv<7>) (zext_ln11_1_fu_166_p1.read());
}

void estimate_FR::thread_spksTime_V_address1() {
    spksTime_V_address1 =  (sc_lv<7>) (zext_ln11_fu_161_p1.read());
}

void estimate_FR::thread_spksTime_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        spksTime_V_ce0 = ap_const_logic_1;
    } else {
        spksTime_V_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_spksTime_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        spksTime_V_ce1 = ap_const_logic_1;
    } else {
        spksTime_V_ce1 = ap_const_logic_0;
    }
}

void estimate_FR::thread_trunc_ln1_fu_250_p4() {
    trunc_ln1_fu_250_p4 = ret_V_fu_238_p2.read().range(17, 5);
}

void estimate_FR::thread_trunc_ln703_1_fu_175_p1() {
    trunc_ln703_1_fu_175_p1 = spksTime_V_q1.read().range(17-1, 0);
}

void estimate_FR::thread_trunc_ln703_fu_171_p1() {
    trunc_ln703_fu_171_p1 = spksTime_V_q0.read().range(17-1, 0);
}

void estimate_FR::thread_zext_ln11_1_fu_166_p1() {
    zext_ln11_1_fu_166_p1 = esl_zext<64,7>(i_fu_155_p2.read());
}

void estimate_FR::thread_zext_ln11_fu_161_p1() {
    zext_ln11_fu_161_p1 = esl_zext<64,7>(i_0_reg_126.read());
}

void estimate_FR::thread_zext_ln15_fu_192_p1() {
    zext_ln15_fu_192_p1 = esl_zext<64,7>(j_0_reg_137.read());
}

void estimate_FR::thread_zext_ln16_fu_214_p1() {
    zext_ln16_fu_214_p1 = esl_zext<64,7>(add_ln16_fu_208_p2.read());
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_149_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln14_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<34>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_address0\" :  \"" << spksTime_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_ce0\" :  \"" << spksTime_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime_V_q0\" :  \"" << spksTime_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_address1\" :  \"" << spksTime_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_V_ce1\" :  \"" << spksTime_V_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime_V_q1\" :  \"" << spksTime_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_address0\" :  \"" << FR_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_ce0\" :  \"" << FR_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_we0\" :  \"" << FR_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_d0\" :  \"" << FR_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FR_V_q0\" :  \"" << FR_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI_V_address0\" :  \"" << ISI_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI_V_ce0\" :  \"" << ISI_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI_V_we0\" :  \"" << ISI_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ISI_V_d0\" :  \"" << ISI_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ISI_V_q0\" :  \"" << ISI_V_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

