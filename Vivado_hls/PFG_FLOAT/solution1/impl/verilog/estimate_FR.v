// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=4025,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=25,HLS_SYN_FF=5224,HLS_SYN_LUT=6976,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_address0,
        spksTime_ce0,
        spksTime_q0,
        spksTime_address1,
        spksTime_ce1,
        spksTime_q1,
        FR_address0,
        FR_ce0,
        FR_we0,
        FR_d0,
        FR_address1,
        FR_ce1,
        FR_we1,
        FR_d1,
        FR_q1
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_state36 = 62'd34359738368;
parameter    ap_ST_fsm_state37 = 62'd68719476736;
parameter    ap_ST_fsm_state38 = 62'd137438953472;
parameter    ap_ST_fsm_state39 = 62'd274877906944;
parameter    ap_ST_fsm_state40 = 62'd549755813888;
parameter    ap_ST_fsm_state41 = 62'd1099511627776;
parameter    ap_ST_fsm_state42 = 62'd2199023255552;
parameter    ap_ST_fsm_state43 = 62'd4398046511104;
parameter    ap_ST_fsm_state44 = 62'd8796093022208;
parameter    ap_ST_fsm_state45 = 62'd17592186044416;
parameter    ap_ST_fsm_state46 = 62'd35184372088832;
parameter    ap_ST_fsm_state47 = 62'd70368744177664;
parameter    ap_ST_fsm_state48 = 62'd140737488355328;
parameter    ap_ST_fsm_state49 = 62'd281474976710656;
parameter    ap_ST_fsm_state50 = 62'd562949953421312;
parameter    ap_ST_fsm_state51 = 62'd1125899906842624;
parameter    ap_ST_fsm_state52 = 62'd2251799813685248;
parameter    ap_ST_fsm_state53 = 62'd4503599627370496;
parameter    ap_ST_fsm_state54 = 62'd9007199254740992;
parameter    ap_ST_fsm_state55 = 62'd18014398509481984;
parameter    ap_ST_fsm_state56 = 62'd36028797018963968;
parameter    ap_ST_fsm_state57 = 62'd72057594037927936;
parameter    ap_ST_fsm_state58 = 62'd144115188075855872;
parameter    ap_ST_fsm_state59 = 62'd288230376151711744;
parameter    ap_ST_fsm_state60 = 62'd576460752303423488;
parameter    ap_ST_fsm_state61 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 62'd2305843009213693952;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] spksTime_address0;
output   spksTime_ce0;
input  [63:0] spksTime_q0;
output  [6:0] spksTime_address1;
output   spksTime_ce1;
input  [63:0] spksTime_q1;
output  [6:0] FR_address0;
output   FR_ce0;
output   FR_we0;
output  [63:0] FR_d0;
output  [6:0] FR_address1;
output   FR_ce1;
output   FR_we1;
output  [63:0] FR_d1;
input  [63:0] FR_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_ce0;
reg spksTime_ce1;
reg[6:0] FR_address0;
reg FR_ce0;
reg FR_we0;
reg[63:0] FR_d0;
reg[6:0] FR_address1;
reg FR_ce1;
reg FR_we1;

(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] reg_205;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state47;
wire   [6:0] i_fu_217_p2;
reg   [6:0] i_reg_305;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln10_fu_211_p2;
wire   [63:0] zext_ln11_1_fu_228_p1;
reg   [63:0] zext_ln11_1_reg_315;
reg   [63:0] spksTime_load_reg_325;
wire    ap_CS_fsm_state3;
reg   [63:0] spksTime_load_1_reg_330;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln13_fu_233_p2;
reg   [6:0] FR_addr_1_reg_343;
wire   [63:0] ISI_q0;
reg   [63:0] ISI_load_reg_349;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_195_p2;
reg   [63:0] tmp_1_reg_354;
wire    ap_CS_fsm_state42;
wire   [0:0] icmp_ln15_fu_263_p2;
reg   [0:0] icmp_ln15_reg_362;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln15_1_fu_269_p2;
reg   [0:0] icmp_ln15_1_reg_367;
wire    ap_CS_fsm_state49;
wire   [0:0] and_ln15_fu_290_p2;
reg   [0:0] and_ln15_reg_377;
reg   [63:0] FR_load_reg_381;
wire    ap_CS_fsm_state50;
wire   [63:0] grp_fu_185_p2;
reg   [63:0] tmp_4_reg_386;
wire    ap_CS_fsm_state56;
wire   [63:0] grp_fu_190_p2;
reg   [63:0] tmp_5_reg_391;
reg   [63:0] tmp_6_reg_396;
wire    ap_CS_fsm_state61;
wire   [6:0] j_fu_296_p2;
wire    ap_CS_fsm_state62;
reg   [6:0] ISI_address0;
reg    ISI_ce0;
reg    ISI_we0;
reg   [6:0] i_0_reg_134;
wire    ap_CS_fsm_state9;
reg   [63:0] ap_phi_mux_empty_7_phi_fu_173_p4;
reg   [63:0] empty_5_reg_145;
reg   [6:0] j_0_reg_157;
reg   [63:0] empty_7_reg_169;
wire   [63:0] zext_ln11_fu_223_p1;
wire   [63:0] zext_ln14_fu_239_p1;
wire   [63:0] zext_ln15_fu_281_p1;
reg   [63:0] grp_fu_180_p0;
reg   [63:0] grp_fu_180_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state12;
wire   [63:0] bitcast_ln15_fu_245_p1;
wire   [10:0] tmp_3_fu_249_p4;
wire   [51:0] trunc_ln15_fu_259_p1;
wire   [6:0] add_ln15_fu_275_p2;
wire   [0:0] or_ln15_fu_286_p2;
wire   [0:0] grp_fu_200_p2;
reg   [1:0] grp_fu_180_opcode;
reg   [61:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
end

estimate_FR_ISI #(
    .DataWidth( 64 ),
    .AddressRange( 74 ),
    .AddressWidth( 7 ))
ISI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ISI_address0),
    .ce0(ISI_ce0),
    .we0(ISI_we0),
    .d0(reg_205),
    .q0(ISI_q0)
);

estimate_FR_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dadddsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .opcode(grp_fu_180_opcode),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_354),
    .din1(64'd4584664420663164928),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(FR_load_reg_381),
    .din1(64'd4606900943823306752),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

estimate_FR_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_ddiv_64ns_64ns_64_31_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(ISI_load_reg_349),
    .ce(1'b1),
    .dout(grp_fu_195_p2)
);

estimate_FR_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_FR_dcmp_64ns_64ns_1_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_205),
    .din1(64'd4629137466983448576),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_200_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_211_p2 == 1'd1))) begin
        empty_5_reg_145 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        empty_5_reg_145 <= ap_phi_mux_empty_7_phi_fu_173_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (1'd0 == and_ln15_fu_290_p2))) begin
        empty_7_reg_169 <= tmp_1_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state62) & (1'd1 == and_ln15_reg_377))) begin
        empty_7_reg_169 <= tmp_6_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_134 <= i_reg_305;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_134 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_211_p2 == 1'd1))) begin
        j_0_reg_157 <= 7'd1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        j_0_reg_157 <= j_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln13_fu_233_p2 == 1'd0))) begin
        FR_addr_1_reg_343 <= zext_ln14_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        FR_load_reg_381 <= FR_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ISI_load_reg_349 <= ISI_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        and_ln15_reg_377 <= and_ln15_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_305 <= i_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        icmp_ln15_1_reg_367 <= icmp_ln15_1_fu_269_p2;
        icmp_ln15_reg_362 <= icmp_ln15_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_205 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        spksTime_load_1_reg_330 <= spksTime_q1;
        spksTime_load_reg_325 <= spksTime_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_1_reg_354 <= grp_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_4_reg_386 <= grp_fu_185_p2;
        tmp_5_reg_391 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        tmp_6_reg_396 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_211_p2 == 1'd0))) begin
        zext_ln11_1_reg_315[6 : 0] <= zext_ln11_1_fu_228_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FR_address0 = FR_addr_1_reg_343;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        FR_address0 = 64'd0;
    end else begin
        FR_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        FR_address1 = FR_addr_1_reg_343;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        FR_address1 = zext_ln15_fu_281_p1;
    end else begin
        FR_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        FR_ce0 = 1'b1;
    end else begin
        FR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state49))) begin
        FR_ce1 = 1'b1;
    end else begin
        FR_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FR_d0 = tmp_1_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        FR_d0 = 64'd0;
    end else begin
        FR_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        FR_we0 = 1'b1;
    end else begin
        FR_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (1'd1 == and_ln15_reg_377))) begin
        FR_we1 = 1'b1;
    end else begin
        FR_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ISI_address0 = zext_ln14_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ISI_address0 = zext_ln11_1_reg_315;
    end else begin
        ISI_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        ISI_ce0 = 1'b1;
    end else begin
        ISI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ISI_we0 = 1'b1;
    end else begin
        ISI_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln13_fu_233_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) & (1'd1 == and_ln15_reg_377))) begin
        ap_phi_mux_empty_7_phi_fu_173_p4 = tmp_6_reg_396;
    end else begin
        ap_phi_mux_empty_7_phi_fu_173_p4 = empty_7_reg_169;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln13_fu_233_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_180_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_180_opcode = 2'd0;
    end else begin
        grp_fu_180_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_180_p0 = tmp_4_reg_386;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_180_p0 = tmp_1_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_180_p0 = spksTime_load_reg_325;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_180_p1 = tmp_5_reg_391;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_180_p1 = empty_5_reg_145;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_180_p1 = spksTime_load_1_reg_330;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_ce0 = 1'b1;
    end else begin
        spksTime_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_ce1 = 1'b1;
    end else begin
        spksTime_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_211_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln13_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (1'd0 == and_ln15_fu_290_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_d1 = tmp_6_reg_396;

assign add_ln15_fu_275_p2 = ($signed(7'd127) + $signed(j_0_reg_157));

assign and_ln15_fu_290_p2 = (or_ln15_fu_286_p2 & grp_fu_200_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln15_fu_245_p1 = reg_205;

assign i_fu_217_p2 = (i_0_reg_134 + 7'd1);

assign icmp_ln10_fu_211_p2 = ((i_0_reg_134 == 7'd74) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_233_p2 = ((j_0_reg_157 == 7'd74) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_269_p2 = ((trunc_ln15_fu_259_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_263_p2 = ((tmp_3_fu_249_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign j_fu_296_p2 = (j_0_reg_157 + 7'd1);

assign or_ln15_fu_286_p2 = (icmp_ln15_reg_362 | icmp_ln15_1_reg_367);

assign spksTime_address0 = zext_ln11_fu_223_p1;

assign spksTime_address1 = zext_ln11_1_fu_228_p1;

assign tmp_3_fu_249_p4 = {{bitcast_ln15_fu_245_p1[62:52]}};

assign trunc_ln15_fu_259_p1 = bitcast_ln15_fu_245_p1[51:0];

assign zext_ln11_1_fu_228_p1 = i_0_reg_134;

assign zext_ln11_fu_223_p1 = i_fu_217_p2;

assign zext_ln14_fu_239_p1 = j_0_reg_157;

assign zext_ln15_fu_281_p1 = add_ln15_fu_275_p2;

always @ (posedge ap_clk) begin
    zext_ln11_1_reg_315[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_FR
