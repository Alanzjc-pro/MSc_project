-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_FR_2 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of estimate_FR_2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_FR_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=675,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=429,HLS_SYN_LUT=699,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputs_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal inputs_ce0 : STD_LOGIC;
    signal inputs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal counts_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal counts_ce0 : STD_LOGIC;
    signal counts_we0 : STD_LOGIC;
    signal counts_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal counts_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal outputs_ce0 : STD_LOGIC;
    signal outputs_we0 : STD_LOGIC;
    signal outputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_602 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln12_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_352_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_612 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln301_2_reg_618 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1_reg_623 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_631 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln20_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_3_fu_449_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_3_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal update_V_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_V_addr_4_reg_657 : STD_LOGIC_VECTOR (6 downto 0);
    signal cnt_V_addr_9_gep_fu_178_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal cnt_V_addr_9_reg_663 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_672 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal shl_ln1_fu_501_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_reg_677 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln31_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_683 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_693 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cnt_V_load_reg_703 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal cnt_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cnt_V_load_1_reg_708 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_713 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_723 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_reg_733 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_090_0217_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal FR_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal FR_V_load_reg_748 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal FR_V_q1 : STD_LOGIC_VECTOR (6 downto 0);
    signal FR_V_load_1_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal cnt_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cnt_V_ce0 : STD_LOGIC;
    signal cnt_V_we0 : STD_LOGIC;
    signal cnt_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cnt_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal cnt_V_ce1 : STD_LOGIC;
    signal cnt_V_we1 : STD_LOGIC;
    signal cnt_V_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal FR_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal FR_V_ce0 : STD_LOGIC;
    signal FR_V_we0 : STD_LOGIC;
    signal FR_V_d0 : STD_LOGIC_VECTOR (6 downto 0);
    signal FR_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal FR_V_ce1 : STD_LOGIC;
    signal j_0_reg_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_323 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln13_1_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln301_fu_365_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln700_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln42_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln14_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln15_fu_412_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln16_fu_422_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_468_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln209_fu_474_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln209_1_fu_478_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln33_fu_514_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln34_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln35_fu_535_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_545_p8 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln555_2_fu_578_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_1_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_582_p5 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component estimate_FR_2_cnt_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component estimate_FR_2_FR_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component estimate_FR_2_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        inputs_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        inputs_ce0 : IN STD_LOGIC;
        inputs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        counts_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        counts_ce0 : IN STD_LOGIC;
        counts_we0 : IN STD_LOGIC;
        counts_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        counts_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        outputs_ce0 : IN STD_LOGIC;
        outputs_we0 : IN STD_LOGIC;
        outputs_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    estimate_FR_2_AXILiteS_s_axi_U : component estimate_FR_2_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        inputs_address0 => inputs_address0,
        inputs_ce0 => inputs_ce0,
        inputs_q0 => inputs_q0,
        counts_address0 => counts_address0,
        counts_ce0 => counts_ce0,
        counts_we0 => counts_we0,
        counts_d0 => counts_d0,
        counts_q0 => counts_q0,
        outputs_address0 => outputs_address0,
        outputs_ce0 => outputs_ce0,
        outputs_we0 => outputs_we0,
        outputs_d0 => outputs_d0);

    cnt_V_U : component estimate_FR_2_cnt_V
    generic map (
        DataWidth => 6,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cnt_V_address0,
        ce0 => cnt_V_ce0,
        we0 => cnt_V_we0,
        d0 => cnt_V_d0,
        q0 => cnt_V_q0,
        address1 => cnt_V_address1,
        ce1 => cnt_V_ce1,
        we1 => cnt_V_we1,
        d1 => cnt_V_d1,
        q1 => cnt_V_q1);

    FR_V_U : component estimate_FR_2_FR_V
    generic map (
        DataWidth => 7,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FR_V_address0,
        ce0 => FR_V_ce0,
        we0 => FR_V_we0,
        d0 => FR_V_d0,
        q0 => FR_V_q0,
        address1 => FR_V_address1,
        ce1 => FR_V_ce1,
        q1 => FR_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_312 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_312 <= i_reg_631;
            end if; 
        end if;
    end process;

    j_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_288 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_288 <= j_reg_602;
            end if; 
        end if;
    end process;

    k_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln19_fu_432_p2 = ap_const_lv1_1))) then 
                k_0_reg_323 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_0_reg_323 <= k_reg_672;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                FR_V_load_1_reg_753 <= FR_V_q1;
                FR_V_load_reg_748 <= FR_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln301_3_fu_449_p1 = ap_const_lv1_1))) then
                cnt_V_addr_4_reg_657 <= zext_ln20_reg_636(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cnt_V_addr_9_reg_663 <= zext_ln20_reg_636(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                cnt_V_load_1_reg_708 <= cnt_V_q1;
                cnt_V_load_reg_703 <= cnt_V_q0;
                    zext_ln34_reg_713(6 downto 2) <= zext_ln34_fu_530_p1(6 downto 2);
                    zext_ln35_reg_723(6 downto 2) <= zext_ln35_fu_540_p1(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_631 <= i_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_602 <= j_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_reg_672 <= k_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_090_0217_reg_300 <= update_V_reg_652;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    shl_ln1_reg_677(6 downto 2) <= shl_ln1_fu_501_p3(6 downto 2);
                    zext_ln32_reg_683(6 downto 2) <= zext_ln32_fu_509_p1(6 downto 2);
                    zext_ln33_reg_693(6 downto 2) <= zext_ln33_fu_520_p1(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    shl_ln_reg_612(6 downto 2) <= shl_ln_fu_352_p3(6 downto 2);
                trunc_ln1_reg_623 <= counts_q0(29 downto 24);
                trunc_ln301_2_reg_618 <= counts_q0(21 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln301_3_reg_648 <= trunc_ln301_3_fu_449_p1;
                update_V_reg_652 <= inputs_q0(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln20_reg_636(6 downto 0) <= zext_ln20_fu_444_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    zext_ln36_1_reg_733(4 downto 0) <= zext_ln36_1_fu_566_p1(4 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_612(1 downto 0) <= "00";
    zext_ln20_reg_636(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    shl_ln1_reg_677(1 downto 0) <= "00";
    zext_ln32_reg_683(1 downto 0) <= "00";
    zext_ln32_reg_683(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln33_reg_693(1 downto 0) <= "01";
    zext_ln33_reg_693(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln34_reg_713(1 downto 0) <= "10";
    zext_ln34_reg_713(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_723(1 downto 0) <= "11";
    zext_ln35_reg_723(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_1_reg_733(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_335_p2, ap_CS_fsm_state5, icmp_ln19_fu_432_p2, update_V_reg_652, ap_CS_fsm_state10, icmp_ln31_fu_489_p2, ap_CS_fsm_state12, p_090_0217_reg_300, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln19_fu_432_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((update_V_reg_652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_fu_489_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((p_090_0217_reg_300 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    FR_V_address0_assign_proc : process(zext_ln20_reg_636, zext_ln32_reg_683, zext_ln35_reg_723, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FR_V_address0 <= zext_ln35_reg_723(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            FR_V_address0 <= zext_ln32_reg_683(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            FR_V_address0 <= zext_ln20_reg_636(7 - 1 downto 0);
        else 
            FR_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    FR_V_address1_assign_proc : process(zext_ln33_reg_693, zext_ln34_reg_713, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            FR_V_address1 <= zext_ln34_reg_713(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            FR_V_address1 <= zext_ln33_reg_693(7 - 1 downto 0);
        else 
            FR_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    FR_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            FR_V_ce0 <= ap_const_logic_1;
        else 
            FR_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FR_V_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            FR_V_ce1 <= ap_const_logic_1;
        else 
            FR_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FR_V_d0 <= std_logic_vector(unsigned(zext_ln209_fu_474_p1) + unsigned(zext_ln209_1_fu_478_p1));

    FR_V_we0_assign_proc : process(update_V_reg_652, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (update_V_reg_652 = ap_const_lv1_1))) then 
            FR_V_we0 <= ap_const_logic_1;
        else 
            FR_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln700_fu_461_p2 <= std_logic_vector(unsigned(cnt_V_q0) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, icmp_ln31_fu_489_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_fu_489_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln31_fu_489_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_fu_489_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cnt_V_addr_9_gep_fu_178_p3 <= zext_ln20_reg_636(7 - 1 downto 0);

    cnt_V_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln20_reg_636, ap_CS_fsm_state6, cnt_V_addr_9_gep_fu_178_p3, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln32_fu_509_p1, ap_CS_fsm_state11, zext_ln34_fu_530_p1, ap_CS_fsm_state4, zext_ln13_fu_360_p1, zext_ln15_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cnt_V_address0 <= zext_ln34_fu_530_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cnt_V_address0 <= zext_ln32_fu_509_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cnt_V_address0 <= cnt_V_addr_9_gep_fu_178_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cnt_V_address0 <= zext_ln20_reg_636(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cnt_V_address0 <= zext_ln15_fu_417_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnt_V_address0 <= zext_ln13_fu_360_p1(7 - 1 downto 0);
        else 
            cnt_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    cnt_V_address1_assign_proc : process(ap_CS_fsm_state3, cnt_V_addr_4_reg_657, cnt_V_addr_9_reg_663, ap_CS_fsm_state10, zext_ln33_fu_520_p1, ap_CS_fsm_state11, zext_ln35_fu_540_p1, ap_CS_fsm_state4, ap_CS_fsm_state9, zext_ln14_fu_376_p1, zext_ln16_fu_427_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cnt_V_address1 <= zext_ln35_fu_540_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cnt_V_address1 <= zext_ln33_fu_520_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cnt_V_address1 <= cnt_V_addr_9_reg_663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cnt_V_address1 <= cnt_V_addr_4_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cnt_V_address1 <= zext_ln16_fu_427_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnt_V_address1 <= zext_ln14_fu_376_p1(7 - 1 downto 0);
        else 
            cnt_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    cnt_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cnt_V_ce0 <= ap_const_logic_1;
        else 
            cnt_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cnt_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cnt_V_ce1 <= ap_const_logic_1;
        else 
            cnt_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cnt_V_d0_assign_proc : process(ap_CS_fsm_state3, trunc_ln301_2_reg_618, ap_CS_fsm_state4, trunc_ln301_fu_365_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cnt_V_d0 <= trunc_ln301_2_reg_618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnt_V_d0 <= trunc_ln301_fu_365_p1;
        else 
            cnt_V_d0 <= "XXXXXX";
        end if; 
    end process;


    cnt_V_d1_assign_proc : process(counts_q0, ap_CS_fsm_state3, trunc_ln1_reg_623, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7, add_ln700_fu_461_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cnt_V_d1 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cnt_V_d1 <= add_ln700_fu_461_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cnt_V_d1 <= trunc_ln1_reg_623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnt_V_d1 <= counts_q0(13 downto 8);
        else 
            cnt_V_d1 <= "XXXXXX";
        end if; 
    end process;


    cnt_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cnt_V_we0 <= ap_const_logic_1;
        else 
            cnt_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cnt_V_we1_assign_proc : process(ap_CS_fsm_state3, trunc_ln301_3_reg_648, update_V_reg_652, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (trunc_ln301_3_reg_648 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (update_V_reg_652 = ap_const_lv1_1)))) then 
            cnt_V_we1 <= ap_const_logic_1;
        else 
            cnt_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    counts_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln36_1_fu_566_p1, ap_CS_fsm_state12, zext_ln13_1_fu_347_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            counts_address0 <= zext_ln36_1_fu_566_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            counts_address0 <= zext_ln13_1_fu_347_p1(5 - 1 downto 0);
        else 
            counts_address0 <= "XXXXX";
        end if; 
    end process;


    counts_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            counts_ce0 <= ap_const_logic_1;
        else 
            counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    counts_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_545_p8),32));

    counts_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            counts_we0 <= ap_const_logic_1;
        else 
            counts_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_438_p2 <= std_logic_vector(unsigned(i_0_reg_312) + unsigned(ap_const_lv7_1));
    icmp_ln12_fu_335_p2 <= "1" when (j_0_reg_288 = ap_const_lv5_18) else "0";
    icmp_ln19_fu_432_p2 <= "1" when (i_0_reg_312 = ap_const_lv7_60) else "0";
    icmp_ln31_fu_489_p2 <= "1" when (k_0_reg_323 = ap_const_lv5_18) else "0";
    inputs_address0 <= zext_ln20_fu_444_p1(7 - 1 downto 0);

    inputs_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inputs_ce0 <= ap_const_logic_1;
        else 
            inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_341_p2 <= std_logic_vector(unsigned(j_0_reg_288) + unsigned(ap_const_lv5_1));
    k_fu_495_p2 <= std_logic_vector(unsigned(k_0_reg_323) + unsigned(ap_const_lv5_1));
    or_ln14_fu_370_p2 <= (shl_ln_fu_352_p3 or ap_const_lv7_1);
    or_ln15_fu_412_p2 <= (shl_ln_reg_612 or ap_const_lv7_2);
    or_ln16_fu_422_p2 <= (shl_ln_reg_612 or ap_const_lv7_3);
    or_ln33_fu_514_p2 <= (shl_ln1_fu_501_p3 or ap_const_lv7_1);
    or_ln34_fu_525_p2 <= (shl_ln1_reg_677 or ap_const_lv7_2);
    or_ln35_fu_535_p2 <= (shl_ln1_reg_677 or ap_const_lv7_3);

    outputs_address0_assign_proc : process(zext_ln36_1_fu_566_p1, zext_ln36_1_reg_733, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputs_address0 <= zext_ln36_1_reg_733(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputs_address0 <= zext_ln36_1_fu_566_p1(5 - 1 downto 0);
        else 
            outputs_address0 <= "XXXXX";
        end if; 
    end process;


    outputs_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            outputs_ce0 <= ap_const_logic_1;
        else 
            outputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputs_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, zext_ln42_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outputs_d0 <= zext_ln42_fu_594_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outputs_d0 <= ap_const_lv32_1;
        else 
            outputs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputs_we0_assign_proc : process(ap_CS_fsm_state12, p_090_0217_reg_300, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (p_090_0217_reg_300 = ap_const_lv1_1)) or ((p_090_0217_reg_300 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            outputs_we0 <= ap_const_logic_1;
        else 
            outputs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_468_p2 <= std_logic_vector(shift_left(unsigned(cnt_V_q0),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    shl_ln1_fu_501_p3 <= (k_0_reg_323 & ap_const_lv2_0);
    shl_ln_fu_352_p3 <= (j_0_reg_288 & ap_const_lv2_0);
    tmp_1_fu_582_p5 <= (((FR_V_q0 & zext_ln555_2_fu_578_p1) & zext_ln555_1_fu_575_p1) & zext_ln555_fu_572_p1);
    tmp_fu_545_p8 <= ((((((cnt_V_q1 & ap_const_lv2_0) & cnt_V_q0) & ap_const_lv2_0) & cnt_V_load_1_reg_708) & ap_const_lv2_0) & cnt_V_load_reg_703);
    trunc_ln301_3_fu_449_p1 <= inputs_q0(1 - 1 downto 0);
    trunc_ln301_fu_365_p1 <= counts_q0(6 - 1 downto 0);
    zext_ln13_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_288),64));
    zext_ln13_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_352_p3),64));
    zext_ln14_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_370_p2),64));
    zext_ln15_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_fu_412_p2),64));
    zext_ln16_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln16_fu_422_p2),64));
    zext_ln209_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_V_q0),7));
    zext_ln209_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_468_p2),7));
    zext_ln20_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_312),64));
    zext_ln32_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_501_p3),64));
    zext_ln33_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln33_fu_514_p2),64));
    zext_ln34_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln34_fu_525_p2),64));
    zext_ln35_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln35_fu_535_p2),64));
    zext_ln36_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_323),64));
    zext_ln42_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_582_p5),32));
    zext_ln555_1_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FR_V_load_1_reg_753),8));
    zext_ln555_2_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FR_V_q1),8));
    zext_ln555_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FR_V_load_reg_748),8));
end behav;
