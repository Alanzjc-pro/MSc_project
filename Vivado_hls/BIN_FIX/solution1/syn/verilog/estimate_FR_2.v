// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=675,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=429,HLS_SYN_LUT=699,HLS_VERSION=2019_1}" *)

module estimate_FR_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] inputs_address0;
reg    inputs_ce0;
wire   [31:0] inputs_q0;
reg   [4:0] counts_address0;
reg    counts_ce0;
reg    counts_we0;
wire   [31:0] counts_d0;
wire   [31:0] counts_q0;
reg   [4:0] outputs_address0;
reg    outputs_ce0;
reg    outputs_we0;
reg   [31:0] outputs_d0;
wire   [4:0] j_fu_341_p2;
reg   [4:0] j_reg_602;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_335_p2;
wire   [6:0] shl_ln_fu_352_p3;
reg   [6:0] shl_ln_reg_612;
wire    ap_CS_fsm_state3;
reg   [5:0] trunc_ln301_2_reg_618;
reg   [5:0] trunc_ln1_reg_623;
wire   [6:0] i_fu_438_p2;
reg   [6:0] i_reg_631;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln20_fu_444_p1;
reg   [63:0] zext_ln20_reg_636;
wire   [0:0] icmp_ln19_fu_432_p2;
wire   [0:0] trunc_ln301_3_fu_449_p1;
reg   [0:0] trunc_ln301_3_reg_648;
wire    ap_CS_fsm_state6;
reg   [0:0] update_V_reg_652;
reg   [6:0] cnt_V_addr_4_reg_657;
wire   [6:0] cnt_V_addr_9_gep_fu_178_p3;
reg   [6:0] cnt_V_addr_9_reg_663;
wire    ap_CS_fsm_state8;
wire   [4:0] k_fu_495_p2;
reg   [4:0] k_reg_672;
wire    ap_CS_fsm_state10;
wire   [6:0] shl_ln1_fu_501_p3;
reg   [6:0] shl_ln1_reg_677;
wire   [0:0] icmp_ln31_fu_489_p2;
wire   [63:0] zext_ln32_fu_509_p1;
reg   [63:0] zext_ln32_reg_683;
wire   [63:0] zext_ln33_fu_520_p1;
reg   [63:0] zext_ln33_reg_693;
wire   [5:0] cnt_V_q0;
reg   [5:0] cnt_V_load_reg_703;
wire    ap_CS_fsm_state11;
wire   [5:0] cnt_V_q1;
reg   [5:0] cnt_V_load_1_reg_708;
wire   [63:0] zext_ln34_fu_530_p1;
reg   [63:0] zext_ln34_reg_713;
wire   [63:0] zext_ln35_fu_540_p1;
reg   [63:0] zext_ln35_reg_723;
wire   [63:0] zext_ln36_1_fu_566_p1;
reg   [63:0] zext_ln36_1_reg_733;
wire    ap_CS_fsm_state12;
reg   [0:0] p_090_0217_reg_300;
wire   [6:0] FR_V_q0;
reg   [6:0] FR_V_load_reg_748;
wire    ap_CS_fsm_state13;
wire   [6:0] FR_V_q1;
reg   [6:0] FR_V_load_1_reg_753;
reg   [6:0] cnt_V_address0;
reg    cnt_V_ce0;
reg    cnt_V_we0;
reg   [5:0] cnt_V_d0;
reg   [6:0] cnt_V_address1;
reg    cnt_V_ce1;
reg    cnt_V_we1;
reg   [5:0] cnt_V_d1;
reg   [6:0] FR_V_address0;
reg    FR_V_ce0;
reg    FR_V_we0;
wire   [6:0] FR_V_d0;
reg   [6:0] FR_V_address1;
reg    FR_V_ce1;
reg   [4:0] j_0_reg_288;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
reg   [6:0] i_0_reg_312;
reg   [4:0] k_0_reg_323;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln13_1_fu_347_p1;
wire   [63:0] zext_ln13_fu_360_p1;
wire   [63:0] zext_ln14_fu_376_p1;
wire   [63:0] zext_ln15_fu_417_p1;
wire   [63:0] zext_ln16_fu_427_p1;
wire   [5:0] trunc_ln301_fu_365_p1;
wire    ap_CS_fsm_state7;
wire   [5:0] add_ln700_fu_461_p2;
wire   [31:0] zext_ln42_fu_594_p1;
wire   [6:0] or_ln14_fu_370_p2;
wire   [6:0] or_ln15_fu_412_p2;
wire   [6:0] or_ln16_fu_422_p2;
wire   [5:0] r_V_fu_468_p2;
wire   [6:0] zext_ln209_fu_474_p1;
wire   [6:0] zext_ln209_1_fu_478_p1;
wire   [6:0] or_ln33_fu_514_p2;
wire   [6:0] or_ln34_fu_525_p2;
wire   [6:0] or_ln35_fu_535_p2;
wire   [29:0] tmp_fu_545_p8;
wire   [7:0] zext_ln555_2_fu_578_p1;
wire   [7:0] zext_ln555_1_fu_575_p1;
wire   [7:0] zext_ln555_fu_572_p1;
wire   [30:0] tmp_1_fu_582_p5;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

estimate_FR_2_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
estimate_FR_2_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .inputs_address0(inputs_address0),
    .inputs_ce0(inputs_ce0),
    .inputs_q0(inputs_q0),
    .counts_address0(counts_address0),
    .counts_ce0(counts_ce0),
    .counts_we0(counts_we0),
    .counts_d0(counts_d0),
    .counts_q0(counts_q0),
    .outputs_address0(outputs_address0),
    .outputs_ce0(outputs_ce0),
    .outputs_we0(outputs_we0),
    .outputs_d0(outputs_d0)
);

estimate_FR_2_cnt_V #(
    .DataWidth( 6 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cnt_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cnt_V_address0),
    .ce0(cnt_V_ce0),
    .we0(cnt_V_we0),
    .d0(cnt_V_d0),
    .q0(cnt_V_q0),
    .address1(cnt_V_address1),
    .ce1(cnt_V_ce1),
    .we1(cnt_V_we1),
    .d1(cnt_V_d1),
    .q1(cnt_V_q1)
);

estimate_FR_2_FR_V #(
    .DataWidth( 7 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
FR_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FR_V_address0),
    .ce0(FR_V_ce0),
    .we0(FR_V_we0),
    .d0(FR_V_d0),
    .q0(FR_V_q0),
    .address1(FR_V_address1),
    .ce1(FR_V_ce1),
    .q1(FR_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_312 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_312 <= i_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_288 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_288 <= j_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_432_p2 == 1'd1))) begin
        k_0_reg_323 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k_0_reg_323 <= k_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FR_V_load_1_reg_753 <= FR_V_q1;
        FR_V_load_reg_748 <= FR_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (trunc_ln301_3_fu_449_p1 == 1'd1))) begin
        cnt_V_addr_4_reg_657 <= zext_ln20_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cnt_V_addr_9_reg_663 <= zext_ln20_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cnt_V_load_1_reg_708 <= cnt_V_q1;
        cnt_V_load_reg_703 <= cnt_V_q0;
        zext_ln34_reg_713[6 : 2] <= zext_ln34_fu_530_p1[6 : 2];
        zext_ln35_reg_723[6 : 2] <= zext_ln35_fu_540_p1[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_631 <= i_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_602 <= j_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_672 <= k_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_090_0217_reg_300 <= update_V_reg_652;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        shl_ln1_reg_677[6 : 2] <= shl_ln1_fu_501_p3[6 : 2];
        zext_ln32_reg_683[6 : 2] <= zext_ln32_fu_509_p1[6 : 2];
        zext_ln33_reg_693[6 : 2] <= zext_ln33_fu_520_p1[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shl_ln_reg_612[6 : 2] <= shl_ln_fu_352_p3[6 : 2];
        trunc_ln1_reg_623 <= {{counts_q0[29:24]}};
        trunc_ln301_2_reg_618 <= {{counts_q0[21:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln301_3_reg_648 <= trunc_ln301_3_fu_449_p1;
        update_V_reg_652 <= inputs_q0[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln20_reg_636[6 : 0] <= zext_ln20_fu_444_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        zext_ln36_1_reg_733[4 : 0] <= zext_ln36_1_fu_566_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FR_V_address0 = zext_ln35_reg_723;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        FR_V_address0 = zext_ln32_reg_683;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        FR_V_address0 = zext_ln20_reg_636;
    end else begin
        FR_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        FR_V_address1 = zext_ln34_reg_713;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        FR_V_address1 = zext_ln33_reg_693;
    end else begin
        FR_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        FR_V_ce0 = 1'b1;
    end else begin
        FR_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        FR_V_ce1 = 1'b1;
    end else begin
        FR_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (update_V_reg_652 == 1'd1))) begin
        FR_V_we0 = 1'b1;
    end else begin
        FR_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln31_fu_489_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln31_fu_489_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cnt_V_address0 = zext_ln34_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cnt_V_address0 = zext_ln32_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cnt_V_address0 = cnt_V_addr_9_gep_fu_178_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cnt_V_address0 = zext_ln20_reg_636;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cnt_V_address0 = zext_ln15_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cnt_V_address0 = zext_ln13_fu_360_p1;
    end else begin
        cnt_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cnt_V_address1 = zext_ln35_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cnt_V_address1 = zext_ln33_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cnt_V_address1 = cnt_V_addr_9_reg_663;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cnt_V_address1 = cnt_V_addr_4_reg_657;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cnt_V_address1 = zext_ln16_fu_427_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cnt_V_address1 = zext_ln14_fu_376_p1;
    end else begin
        cnt_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        cnt_V_ce0 = 1'b1;
    end else begin
        cnt_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        cnt_V_ce1 = 1'b1;
    end else begin
        cnt_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cnt_V_d0 = trunc_ln301_2_reg_618;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cnt_V_d0 = trunc_ln301_fu_365_p1;
    end else begin
        cnt_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cnt_V_d1 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cnt_V_d1 = add_ln700_fu_461_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cnt_V_d1 = trunc_ln1_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cnt_V_d1 = {{counts_q0[13:8]}};
    end else begin
        cnt_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        cnt_V_we0 = 1'b1;
    end else begin
        cnt_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state7) & (trunc_ln301_3_reg_648 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (update_V_reg_652 == 1'd1)))) begin
        cnt_V_we1 = 1'b1;
    end else begin
        cnt_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        counts_address0 = zext_ln36_1_fu_566_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        counts_address0 = zext_ln13_1_fu_347_p1;
    end else begin
        counts_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12))) begin
        counts_ce0 = 1'b1;
    end else begin
        counts_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        counts_we0 = 1'b1;
    end else begin
        counts_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outputs_address0 = zext_ln36_1_reg_733;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outputs_address0 = zext_ln36_1_fu_566_p1;
    end else begin
        outputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        outputs_ce0 = 1'b1;
    end else begin
        outputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outputs_d0 = zext_ln42_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        outputs_d0 = 32'd1;
    end else begin
        outputs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (p_090_0217_reg_300 == 1'd1)) | ((p_090_0217_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        outputs_we0 = 1'b1;
    end else begin
        outputs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_432_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((update_V_reg_652 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln31_fu_489_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((p_090_0217_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_V_d0 = (zext_ln209_fu_474_p1 + zext_ln209_1_fu_478_p1);

assign add_ln700_fu_461_p2 = (cnt_V_q0 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cnt_V_addr_9_gep_fu_178_p3 = zext_ln20_reg_636;

assign counts_d0 = tmp_fu_545_p8;

assign i_fu_438_p2 = (i_0_reg_312 + 7'd1);

assign icmp_ln12_fu_335_p2 = ((j_0_reg_288 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_432_p2 = ((i_0_reg_312 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_489_p2 = ((k_0_reg_323 == 5'd24) ? 1'b1 : 1'b0);

assign inputs_address0 = zext_ln20_fu_444_p1;

assign j_fu_341_p2 = (j_0_reg_288 + 5'd1);

assign k_fu_495_p2 = (k_0_reg_323 + 5'd1);

assign or_ln14_fu_370_p2 = (shl_ln_fu_352_p3 | 7'd1);

assign or_ln15_fu_412_p2 = (shl_ln_reg_612 | 7'd2);

assign or_ln16_fu_422_p2 = (shl_ln_reg_612 | 7'd3);

assign or_ln33_fu_514_p2 = (shl_ln1_fu_501_p3 | 7'd1);

assign or_ln34_fu_525_p2 = (shl_ln1_reg_677 | 7'd2);

assign or_ln35_fu_535_p2 = (shl_ln1_reg_677 | 7'd3);

assign r_V_fu_468_p2 = cnt_V_q0 << 6'd2;

assign shl_ln1_fu_501_p3 = {{k_0_reg_323}, {2'd0}};

assign shl_ln_fu_352_p3 = {{j_0_reg_288}, {2'd0}};

assign tmp_1_fu_582_p5 = {{{{FR_V_q0}, {zext_ln555_2_fu_578_p1}}, {zext_ln555_1_fu_575_p1}}, {zext_ln555_fu_572_p1}};

assign tmp_fu_545_p8 = {{{{{{{cnt_V_q1}, {2'd0}}, {cnt_V_q0}}, {2'd0}}, {cnt_V_load_1_reg_708}}, {2'd0}}, {cnt_V_load_reg_703}};

assign trunc_ln301_3_fu_449_p1 = inputs_q0[0:0];

assign trunc_ln301_fu_365_p1 = counts_q0[5:0];

assign zext_ln13_1_fu_347_p1 = j_0_reg_288;

assign zext_ln13_fu_360_p1 = shl_ln_fu_352_p3;

assign zext_ln14_fu_376_p1 = or_ln14_fu_370_p2;

assign zext_ln15_fu_417_p1 = or_ln15_fu_412_p2;

assign zext_ln16_fu_427_p1 = or_ln16_fu_422_p2;

assign zext_ln209_1_fu_478_p1 = cnt_V_q0;

assign zext_ln209_fu_474_p1 = r_V_fu_468_p2;

assign zext_ln20_fu_444_p1 = i_0_reg_312;

assign zext_ln32_fu_509_p1 = shl_ln1_fu_501_p3;

assign zext_ln33_fu_520_p1 = or_ln33_fu_514_p2;

assign zext_ln34_fu_530_p1 = or_ln34_fu_525_p2;

assign zext_ln35_fu_540_p1 = or_ln35_fu_535_p2;

assign zext_ln36_1_fu_566_p1 = k_0_reg_323;

assign zext_ln42_fu_594_p1 = tmp_1_fu_582_p5;

assign zext_ln555_1_fu_575_p1 = FR_V_load_1_reg_753;

assign zext_ln555_2_fu_578_p1 = FR_V_q1;

assign zext_ln555_fu_572_p1 = FR_V_load_reg_748;

always @ (posedge ap_clk) begin
    shl_ln_reg_612[1:0] <= 2'b00;
    zext_ln20_reg_636[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    shl_ln1_reg_677[1:0] <= 2'b00;
    zext_ln32_reg_683[1:0] <= 2'b00;
    zext_ln32_reg_683[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln33_reg_693[1:0] <= 2'b01;
    zext_ln33_reg_693[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln34_reg_713[1:0] <= 2'b10;
    zext_ln34_reg_713[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_723[1:0] <= 2'b11;
    zext_ln35_reg_723[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln36_1_reg_733[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_FR_2
