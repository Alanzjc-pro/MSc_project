// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.206000,HLS_SYN_LAT=482,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=427,HLS_SYN_LUT=594,HLS_VERSION=2019_1}" *)

module estimate_ISI (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] inputs_address0;
reg    inputs_ce0;
wire   [31:0] inputs_q0;
reg   [6:0] rem_r_address0;
reg    rem_r_ce0;
reg    rem_r_we0;
wire   [31:0] rem_r_d0;
wire   [31:0] rem_r_q0;
wire   [4:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
wire   [31:0] output_r_d0;
wire   [6:0] j_fu_239_p2;
reg   [6:0] j_reg_541;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln16_fu_245_p1;
reg   [63:0] zext_ln16_reg_546;
wire   [0:0] icmp_ln15_fu_233_p2;
wire   [0:0] trunc_ln301_fu_250_p1;
reg   [0:0] trunc_ln301_reg_558;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_2_fu_254_p3;
reg   [0:0] tmp_2_reg_562;
reg   [6:0] rem_addr_reg_566;
reg   [18:0] tmp_3_reg_571;
reg   [8:0] tmp_4_reg_576;
wire   [9:0] sub_ln214_fu_303_p2;
reg   [9:0] sub_ln214_reg_581;
wire    ap_CS_fsm_state4;
wire   [8:0] ret_V_fu_337_p2;
reg   [8:0] ret_V_reg_586;
reg   [5:0] tmp_5_reg_591;
wire   [9:0] sub_ln214_1_fu_401_p2;
reg   [9:0] sub_ln214_1_reg_596;
wire   [5:0] i_fu_454_p2;
reg   [5:0] i_reg_604;
wire    ap_CS_fsm_state6;
wire  signed [7:0] sub_ln39_fu_476_p2;
reg  signed [7:0] sub_ln39_reg_609;
wire   [0:0] icmp_ln38_fu_448_p2;
wire   [9:0] ISI_V_q0;
reg   [9:0] ISI_V_load_reg_620;
wire    ap_CS_fsm_state7;
reg   [6:0] ISI_V_address0;
reg    ISI_V_ce0;
reg    ISI_V_we0;
reg   [9:0] ISI_V_d0;
wire   [6:0] ISI_V_address1;
reg    ISI_V_ce1;
wire   [9:0] ISI_V_q1;
reg   [6:0] j_0_reg_210;
wire    ap_CS_fsm_state5;
reg   [5:0] i_0_reg_221;
wire    ap_CS_fsm_state8;
wire   [6:0] ISI_V_addr_4_gep_fu_165_p3;
wire   [63:0] zext_ln39_fu_486_p1;
wire   [63:0] zext_ln40_fu_500_p1;
wire   [63:0] zext_ln41_fu_514_p1;
wire   [63:0] zext_ln42_1_fu_533_p1;
wire   [9:0] select_ln891_fu_423_p3;
wire   [9:0] and_ln_fu_292_p3;
wire   [9:0] trunc_ln214_fu_299_p1;
wire   [7:0] ISIPre_n_V_fu_319_p4;
wire   [7:0] ISI_n_V_fu_309_p4;
wire   [8:0] lhs_V_fu_329_p1;
wire   [8:0] rhs_V_fu_333_p1;
wire   [7:0] ret_V_1_fu_351_p0;
wire   [7:0] ret_V_1_fu_351_p1;
wire   [10:0] ret_V_1_fu_351_p2;
wire   [4:0] trunc_ln1503_1_fu_367_p4;
wire   [4:0] r_V_1_fu_381_p4;
wire   [9:0] ISIPre_V_fu_282_p4;
wire   [9:0] r_V_2_fu_391_p1;
wire   [9:0] sub_ln1354_fu_395_p2;
wire   [9:0] r_V_fu_377_p1;
wire   [7:0] and_ln1_fu_407_p3;
wire   [8:0] zext_ln891_fu_414_p1;
wire   [0:0] icmp_ln891_fu_418_p2;
wire   [29:0] tmp_1_fu_430_p4;
wire   [4:0] trunc_ln39_fu_460_p1;
wire   [6:0] shl_ln_fu_464_p3;
wire   [7:0] zext_ln39_1_fu_472_p1;
wire   [7:0] zext_ln38_fu_444_p1;
wire  signed [31:0] sext_ln39_fu_482_p1;
wire   [7:0] add_ln40_fu_491_p2;
wire  signed [31:0] sext_ln40_fu_496_p1;
wire   [7:0] add_ln41_fu_505_p2;
wire  signed [31:0] sext_ln41_fu_510_p1;
wire   [29:0] tmp_fu_519_p4;
reg   [7:0] ap_NS_fsm;
wire   [10:0] ret_V_1_fu_351_p00;
wire   [10:0] ret_V_1_fu_351_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

estimate_ISI_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
estimate_ISI_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputs_address0(inputs_address0),
    .inputs_ce0(inputs_ce0),
    .inputs_q0(inputs_q0),
    .rem_r_address0(rem_r_address0),
    .rem_r_ce0(rem_r_ce0),
    .rem_r_we0(rem_r_we0),
    .rem_r_d0(rem_r_d0),
    .rem_r_q0(rem_r_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0)
);

estimate_ISI_ISI_V #(
    .DataWidth( 10 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
ISI_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ISI_V_address0),
    .ce0(ISI_V_ce0),
    .we0(ISI_V_we0),
    .d0(ISI_V_d0),
    .q0(ISI_V_q0),
    .address1(ISI_V_address1),
    .ce1(ISI_V_ce1),
    .q1(ISI_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_221 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_221 <= i_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_210 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_210 <= j_reg_541;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ISI_V_load_reg_620 <= ISI_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_604 <= i_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_541 <= j_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln301_fu_250_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_254_p3 == 1'd1))) begin
        rem_addr_reg_566 <= zext_ln16_reg_546;
        tmp_3_reg_571 <= {{inputs_q0[21:3]}};
        tmp_4_reg_576 <= {{inputs_q0[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_reg_586 <= ret_V_fu_337_p2;
        sub_ln214_1_reg_596 <= sub_ln214_1_fu_401_p2;
        sub_ln214_reg_581 <= sub_ln214_fu_303_p2;
        tmp_5_reg_591 <= {{ret_V_1_fu_351_p2[10:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln39_reg_609 <= sub_ln39_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_562 <= inputs_q0[32'd1];
        trunc_ln301_reg_558 <= trunc_ln301_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln16_reg_546[6 : 0] <= zext_ln16_fu_245_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ISI_V_address0 = zext_ln40_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ISI_V_address0 = zext_ln39_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ISI_V_address0 = ISI_V_addr_4_gep_fu_165_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_address0 = zext_ln16_reg_546;
    end else begin
        ISI_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        ISI_V_ce0 = 1'b1;
    end else begin
        ISI_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ISI_V_ce1 = 1'b1;
    end else begin
        ISI_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ISI_V_d0 = select_ln891_fu_423_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_d0 = 10'd1000;
    end else begin
        ISI_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (tmp_2_reg_562 == 1'd1) & (trunc_ln301_reg_558 == 1'd1)) | ((tmp_2_fu_254_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        ISI_V_we0 = 1'b1;
    end else begin
        ISI_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_448_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_448_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inputs_ce0 = 1'b1;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rem_r_address0 = rem_addr_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rem_r_address0 = zext_ln16_reg_546;
    end else begin
        rem_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        rem_r_ce0 = 1'b1;
    end else begin
        rem_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_2_reg_562 == 1'd1) & (trunc_ln301_reg_558 == 1'd1))) begin
        rem_r_we0 = 1'b1;
    end else begin
        rem_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((trunc_ln301_fu_250_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_254_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln38_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISIPre_V_fu_282_p4 = {{rem_r_q0[29:20]}};

assign ISIPre_n_V_fu_319_p4 = {{rem_r_q0[29:22]}};

assign ISI_V_addr_4_gep_fu_165_p3 = zext_ln16_reg_546;

assign ISI_V_address1 = zext_ln41_fu_514_p1;

assign ISI_n_V_fu_309_p4 = {{sub_ln214_fu_303_p2[9:2]}};

assign add_ln40_fu_491_p2 = ($signed(8'd1) + $signed(sub_ln39_reg_609));

assign add_ln41_fu_505_p2 = ($signed(8'd2) + $signed(sub_ln39_reg_609));

assign and_ln1_fu_407_p3 = {{tmp_5_reg_591}, {2'd0}};

assign and_ln_fu_292_p3 = {{tmp_4_reg_576}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_454_p2 = (i_0_reg_221 + 6'd1);

assign icmp_ln15_fu_233_p2 = ((j_0_reg_210 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_448_p2 = ((i_0_reg_221 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_418_p2 = (($signed(ret_V_reg_586) < $signed(zext_ln891_fu_414_p1)) ? 1'b1 : 1'b0);

assign inputs_address0 = zext_ln16_fu_245_p1;

assign j_fu_239_p2 = (j_0_reg_210 + 7'd1);

assign lhs_V_fu_329_p1 = ISIPre_n_V_fu_319_p4;

assign output_r_address0 = zext_ln42_1_fu_533_p1;

assign output_r_d0 = tmp_fu_519_p4;

assign r_V_1_fu_381_p4 = {{sub_ln214_fu_303_p2[9:5]}};

assign r_V_2_fu_391_p1 = r_V_1_fu_381_p4;

assign r_V_fu_377_p1 = trunc_ln1503_1_fu_367_p4;

assign rem_r_d0 = tmp_1_fu_430_p4;

assign ret_V_1_fu_351_p0 = ret_V_1_fu_351_p00;

assign ret_V_1_fu_351_p00 = ISIPre_n_V_fu_319_p4;

assign ret_V_1_fu_351_p1 = ret_V_1_fu_351_p10;

assign ret_V_1_fu_351_p10 = ISI_n_V_fu_309_p4;

assign ret_V_1_fu_351_p2 = (ret_V_1_fu_351_p0 * ret_V_1_fu_351_p1);

assign ret_V_fu_337_p2 = (lhs_V_fu_329_p1 - rhs_V_fu_333_p1);

assign rhs_V_fu_333_p1 = ISI_n_V_fu_309_p4;

assign select_ln891_fu_423_p3 = ((icmp_ln891_fu_418_p2[0:0] === 1'b1) ? sub_ln214_reg_581 : sub_ln214_1_reg_596);

assign sext_ln39_fu_482_p1 = sub_ln39_fu_476_p2;

assign sext_ln40_fu_496_p1 = $signed(add_ln40_fu_491_p2);

assign sext_ln41_fu_510_p1 = $signed(add_ln41_fu_505_p2);

assign shl_ln_fu_464_p3 = {{trunc_ln39_fu_460_p1}, {2'd0}};

assign sub_ln1354_fu_395_p2 = (ISIPre_V_fu_282_p4 - r_V_2_fu_391_p1);

assign sub_ln214_1_fu_401_p2 = (sub_ln1354_fu_395_p2 - r_V_fu_377_p1);

assign sub_ln214_fu_303_p2 = (and_ln_fu_292_p3 - trunc_ln214_fu_299_p1);

assign sub_ln39_fu_476_p2 = (zext_ln39_1_fu_472_p1 - zext_ln38_fu_444_p1);

assign tmp_1_fu_430_p4 = {{{select_ln891_fu_423_p3}, {tmp_3_reg_571}}, {1'd0}};

assign tmp_2_fu_254_p3 = inputs_q0[32'd1];

assign tmp_fu_519_p4 = {{{ISI_V_q1}, {ISI_V_q0}}, {ISI_V_load_reg_620}};

assign trunc_ln1503_1_fu_367_p4 = {{rem_r_q0[29:25]}};

assign trunc_ln214_fu_299_p1 = rem_r_q0[9:0];

assign trunc_ln301_fu_250_p1 = inputs_q0[0:0];

assign trunc_ln39_fu_460_p1 = i_0_reg_221[4:0];

assign zext_ln16_fu_245_p1 = j_0_reg_210;

assign zext_ln38_fu_444_p1 = i_0_reg_221;

assign zext_ln39_1_fu_472_p1 = shl_ln_fu_464_p3;

assign zext_ln39_fu_486_p1 = $unsigned(sext_ln39_fu_482_p1);

assign zext_ln40_fu_500_p1 = $unsigned(sext_ln40_fu_496_p1);

assign zext_ln41_fu_514_p1 = $unsigned(sext_ln41_fu_510_p1);

assign zext_ln42_1_fu_533_p1 = i_0_reg_221;

assign zext_ln891_fu_414_p1 = and_ln1_fu_407_p3;

always @ (posedge ap_clk) begin
    zext_ln16_reg_546[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_ISI
