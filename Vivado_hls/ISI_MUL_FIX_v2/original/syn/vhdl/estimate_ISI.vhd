-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of estimate_ISI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.206000,HLS_SYN_LAT=482,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=427,HLS_SYN_LUT=594,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputs_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal inputs_ce0 : STD_LOGIC;
    signal inputs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rem_r_ce0 : STD_LOGIC;
    signal rem_r_we0 : STD_LOGIC;
    signal rem_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_541 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln16_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln15_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_fu_250_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal rem_addr_reg_566 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_571 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_reg_576 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln214_fu_303_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln214_reg_581 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_fu_337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_586 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_591 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln214_1_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln214_1_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_604 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln39_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln39_reg_609 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln38_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ISI_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ISI_V_load_reg_620 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ISI_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISI_V_ce0 : STD_LOGIC;
    signal ISI_V_we0 : STD_LOGIC;
    signal ISI_V_d0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ISI_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISI_V_ce1 : STD_LOGIC;
    signal ISI_V_q1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_221 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ISI_V_addr_4_gep_fu_165_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln891_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln_fu_292_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln214_fu_299_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ISIPre_n_V_fu_319_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ISI_n_V_fu_309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_1_fu_351_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_fu_351_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1503_1_fu_367_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_1_fu_381_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ISIPre_V_fu_282_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1354_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln1_fu_407_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln891_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln891_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_430_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln39_fu_460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_464_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_1_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln38_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln39_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln40_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln41_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_519_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_fu_351_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_1_fu_351_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component estimate_ISI_ISI_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (9 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component estimate_ISI_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputs_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        inputs_ce0 : IN STD_LOGIC;
        inputs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        rem_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        rem_r_ce0 : IN STD_LOGIC;
        rem_r_we0 : IN STD_LOGIC;
        rem_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rem_r_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    estimate_ISI_AXILiteS_s_axi_U : component estimate_ISI_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputs_address0 => inputs_address0,
        inputs_ce0 => inputs_ce0,
        inputs_q0 => inputs_q0,
        rem_r_address0 => rem_r_address0,
        rem_r_ce0 => rem_r_ce0,
        rem_r_we0 => rem_r_we0,
        rem_r_d0 => rem_r_d0,
        rem_r_q0 => rem_r_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0);

    ISI_V_U : component estimate_ISI_ISI_V
    generic map (
        DataWidth => 10,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ISI_V_address0,
        ce0 => ISI_V_ce0,
        we0 => ISI_V_we0,
        d0 => ISI_V_d0,
        q0 => ISI_V_q0,
        address1 => ISI_V_address1,
        ce1 => ISI_V_ce1,
        q1 => ISI_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_221 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_221 <= i_reg_604;
            end if; 
        end if;
    end process;

    j_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_210 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_210 <= j_reg_541;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ISI_V_load_reg_620 <= ISI_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_604 <= i_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_541 <= j_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln301_fu_250_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_254_p3 = ap_const_lv1_1))) then
                rem_addr_reg_566 <= zext_ln16_reg_546(7 - 1 downto 0);
                tmp_3_reg_571 <= inputs_q0(21 downto 3);
                tmp_4_reg_576 <= inputs_q0(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_586 <= ret_V_fu_337_p2;
                sub_ln214_1_reg_596 <= sub_ln214_1_fu_401_p2;
                sub_ln214_reg_581 <= sub_ln214_fu_303_p2;
                tmp_5_reg_591 <= ret_V_1_fu_351_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sub_ln39_reg_609 <= sub_ln39_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_2_reg_562 <= inputs_q0(1 downto 1);
                trunc_ln301_reg_558 <= trunc_ln301_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln16_reg_546(6 downto 0) <= zext_ln16_fu_245_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln16_reg_546(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln15_fu_233_p2, trunc_ln301_fu_250_p1, ap_CS_fsm_state3, tmp_2_fu_254_p3, ap_CS_fsm_state6, icmp_ln38_fu_448_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln15_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((trunc_ln301_fu_250_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_254_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ISIPre_V_fu_282_p4 <= rem_r_q0(29 downto 20);
    ISIPre_n_V_fu_319_p4 <= rem_r_q0(29 downto 22);
    ISI_V_addr_4_gep_fu_165_p3 <= zext_ln16_reg_546(7 - 1 downto 0);

    ISI_V_address0_assign_proc : process(zext_ln16_reg_546, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, ISI_V_addr_4_gep_fu_165_p3, zext_ln39_fu_486_p1, zext_ln40_fu_500_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ISI_V_address0 <= zext_ln40_fu_500_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ISI_V_address0 <= zext_ln39_fu_486_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ISI_V_address0 <= ISI_V_addr_4_gep_fu_165_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISI_V_address0 <= zext_ln16_reg_546(7 - 1 downto 0);
        else 
            ISI_V_address0 <= "XXXXXXX";
        end if; 
    end process;

    ISI_V_address1 <= zext_ln41_fu_514_p1(7 - 1 downto 0);

    ISI_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ISI_V_ce0 <= ap_const_logic_1;
        else 
            ISI_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_V_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ISI_V_ce1 <= ap_const_logic_1;
        else 
            ISI_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, select_ln891_fu_423_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ISI_V_d0 <= select_ln891_fu_423_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISI_V_d0 <= ap_const_lv10_3E8;
        else 
            ISI_V_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    ISI_V_we0_assign_proc : process(trunc_ln301_reg_558, ap_CS_fsm_state3, tmp_2_fu_254_p3, tmp_2_reg_562, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_reg_562 = ap_const_lv1_1) and (trunc_ln301_reg_558 = ap_const_lv1_1)) or ((tmp_2_fu_254_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ISI_V_we0 <= ap_const_logic_1;
        else 
            ISI_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ISI_n_V_fu_309_p4 <= sub_ln214_fu_303_p2(9 downto 2);
    add_ln40_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(sub_ln39_reg_609));
    add_ln41_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(sub_ln39_reg_609));
    and_ln1_fu_407_p3 <= (tmp_5_reg_591 & ap_const_lv2_0);
    and_ln_fu_292_p3 <= (tmp_4_reg_576 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln38_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_448_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln38_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln38_fu_448_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_454_p2 <= std_logic_vector(unsigned(i_0_reg_221) + unsigned(ap_const_lv6_1));
    icmp_ln15_fu_233_p2 <= "1" when (j_0_reg_210 = ap_const_lv7_60) else "0";
    icmp_ln38_fu_448_p2 <= "1" when (i_0_reg_221 = ap_const_lv6_20) else "0";
    icmp_ln891_fu_418_p2 <= "1" when (signed(ret_V_reg_586) < signed(zext_ln891_fu_414_p1)) else "0";
    inputs_address0 <= zext_ln16_fu_245_p1(7 - 1 downto 0);

    inputs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inputs_ce0 <= ap_const_logic_1;
        else 
            inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_239_p2 <= std_logic_vector(unsigned(j_0_reg_210) + unsigned(ap_const_lv7_1));
    lhs_V_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISIPre_n_V_fu_319_p4),9));
    output_r_address0 <= zext_ln42_1_fu_533_p1(5 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_519_p4),32));

    output_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_381_p4 <= sub_ln214_fu_303_p2(9 downto 5);
    r_V_2_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_381_p4),10));
    r_V_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1503_1_fu_367_p4),10));

    rem_r_address0_assign_proc : process(zext_ln16_reg_546, ap_CS_fsm_state3, rem_addr_reg_566, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rem_r_address0 <= rem_addr_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rem_r_address0 <= zext_ln16_reg_546(7 - 1 downto 0);
        else 
            rem_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    rem_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            rem_r_ce0 <= ap_const_logic_1;
        else 
            rem_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rem_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_430_p4),32));

    rem_r_we0_assign_proc : process(trunc_ln301_reg_558, tmp_2_reg_562, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_reg_562 = ap_const_lv1_1) and (trunc_ln301_reg_558 = ap_const_lv1_1))) then 
            rem_r_we0 <= ap_const_logic_1;
        else 
            rem_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_351_p0 <= ret_V_1_fu_351_p00(8 - 1 downto 0);
    ret_V_1_fu_351_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISIPre_n_V_fu_319_p4),11));
    ret_V_1_fu_351_p1 <= ret_V_1_fu_351_p10(8 - 1 downto 0);
    ret_V_1_fu_351_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISI_n_V_fu_309_p4),11));
    ret_V_1_fu_351_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_351_p0) * unsigned(ret_V_1_fu_351_p1), 11));
    ret_V_fu_337_p2 <= std_logic_vector(unsigned(lhs_V_fu_329_p1) - unsigned(rhs_V_fu_333_p1));
    rhs_V_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISI_n_V_fu_309_p4),9));
    select_ln891_fu_423_p3 <= 
        sub_ln214_reg_581 when (icmp_ln891_fu_418_p2(0) = '1') else 
        sub_ln214_1_reg_596;
        sext_ln39_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln39_fu_476_p2),32));

        sext_ln40_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_491_p2),32));

        sext_ln41_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_fu_505_p2),32));

    shl_ln_fu_464_p3 <= (trunc_ln39_fu_460_p1 & ap_const_lv2_0);
    sub_ln1354_fu_395_p2 <= std_logic_vector(unsigned(ISIPre_V_fu_282_p4) - unsigned(r_V_2_fu_391_p1));
    sub_ln214_1_fu_401_p2 <= std_logic_vector(unsigned(sub_ln1354_fu_395_p2) - unsigned(r_V_fu_377_p1));
    sub_ln214_fu_303_p2 <= std_logic_vector(unsigned(and_ln_fu_292_p3) - unsigned(trunc_ln214_fu_299_p1));
    sub_ln39_fu_476_p2 <= std_logic_vector(unsigned(zext_ln39_1_fu_472_p1) - unsigned(zext_ln38_fu_444_p1));
    tmp_1_fu_430_p4 <= ((select_ln891_fu_423_p3 & tmp_3_reg_571) & ap_const_lv1_0);
    tmp_2_fu_254_p3 <= inputs_q0(1 downto 1);
    tmp_fu_519_p4 <= ((ISI_V_q1 & ISI_V_q0) & ISI_V_load_reg_620);
    trunc_ln1503_1_fu_367_p4 <= rem_r_q0(29 downto 25);
    trunc_ln214_fu_299_p1 <= rem_r_q0(10 - 1 downto 0);
    trunc_ln301_fu_250_p1 <= inputs_q0(1 - 1 downto 0);
    trunc_ln39_fu_460_p1 <= i_0_reg_221(5 - 1 downto 0);
    zext_ln16_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_210),64));
    zext_ln38_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_221),8));
    zext_ln39_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_464_p3),8));
    zext_ln39_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_fu_482_p1),64));
    zext_ln40_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_fu_496_p1),64));
    zext_ln41_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln41_fu_510_p1),64));
    zext_ln42_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_221),64));
    zext_ln891_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_407_p3),9));
end behav;
