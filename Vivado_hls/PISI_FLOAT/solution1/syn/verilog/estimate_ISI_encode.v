// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_ISI_encode,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.587000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=14,HLS_SYN_FF=2345,HLS_SYN_LUT=4758,HLS_VERSION=2019_1}" *)

module estimate_ISI_encode (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] spks_address0;
reg    spks_ce0;
wire   [31:0] spks_q0;
wire   [31:0] spksTime;
wire   [6:0] update_address0;
reg    update_ce0;
wire   [31:0] update_q0;
reg   [6:0] ISIPre_address0;
reg    ISIPre_ce0;
reg    ISIPre_we0;
wire   [31:0] ISIPre_q0;
reg   [6:0] spksPre_address0;
reg    spksPre_ce0;
reg    spksPre_we0;
wire   [31:0] spksPre_q0;
reg   [6:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [31:0] output_r_d0;
wire   [63:0] grp_fu_246_p1;
reg   [63:0] reg_250;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_236_p2;
reg   [63:0] reg_256;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
reg   [31:0] spksTime_read_reg_595;
wire   [6:0] j_fu_268_p2;
reg   [6:0] j_reg_604;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln9_fu_274_p1;
reg   [63:0] zext_ln9_reg_609;
wire   [0:0] icmp_ln8_fu_262_p2;
wire   [0:0] icmp_ln9_fu_279_p2;
reg   [0:0] icmp_ln9_reg_624;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln10_fu_285_p2;
reg   [0:0] icmp_ln10_reg_633;
wire    ap_CS_fsm_state4;
reg   [6:0] spksPre_addr_reg_637;
wire   [31:0] sub_ln11_fu_291_p2;
reg   [31:0] sub_ln11_reg_642;
wire    ap_CS_fsm_state5;
reg   [6:0] ISIPre_addr_reg_649;
reg   [6:0] ISI_addr_reg_654;
wire    ap_CS_fsm_state12;
wire   [31:0] sub_ln14_fu_296_p2;
reg   [31:0] sub_ln14_reg_664;
reg   [63:0] tmp_4_reg_669;
reg   [63:0] tmp_reg_675;
wire   [0:0] icmp_ln14_fu_336_p2;
reg   [0:0] icmp_ln14_reg_681;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln14_1_fu_342_p2;
reg   [0:0] icmp_ln14_1_reg_686;
wire   [0:0] icmp_ln14_2_fu_348_p2;
reg   [0:0] icmp_ln14_2_reg_691;
wire   [0:0] icmp_ln14_3_fu_354_p2;
reg   [0:0] icmp_ln14_3_reg_696;
wire   [0:0] and_ln14_1_fu_374_p2;
reg   [0:0] and_ln14_1_reg_701;
wire    ap_CS_fsm_state25;
wire   [63:0] grp_fu_232_p2;
reg   [63:0] x_assign_reg_705;
wire    ap_CS_fsm_state35;
reg   [0:0] p_Result_s_reg_710;
wire    ap_CS_fsm_state36;
wire   [31:0] p_Val2_5_fu_501_p3;
reg   [31:0] p_Val2_5_reg_715;
wire   [28:0] select_ln32_fu_583_p3;
reg   [28:0] select_ln32_reg_721;
wire    ap_CS_fsm_state39;
reg   [6:0] ISI_address0;
reg    ISI_ce0;
reg    ISI_we0;
reg   [31:0] ISI_d0;
wire   [31:0] ISI_q0;
reg   [6:0] j_0_reg_221;
wire    ap_CS_fsm_state40;
wire   [6:0] output_addr_1_gep_fu_213_p3;
wire   [31:0] zext_ln32_fu_591_p1;
wire    ap_CS_fsm_state37;
wire   [31:0] p_Val2_6_fu_514_p3;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state31;
reg   [63:0] grp_fu_236_p0;
reg   [63:0] grp_fu_236_p1;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_246_p0;
wire    ap_CS_fsm_state6;
wire   [63:0] bitcast_ln14_fu_301_p1;
wire   [63:0] bitcast_ln14_1_fu_318_p1;
wire   [10:0] tmp_1_fu_304_p4;
wire   [51:0] trunc_ln14_fu_314_p1;
wire   [10:0] tmp_2_fu_322_p4;
wire   [51:0] trunc_ln14_1_fu_332_p1;
wire   [0:0] or_ln14_fu_360_p2;
wire   [0:0] or_ln14_1_fu_364_p2;
wire   [0:0] and_ln14_fu_368_p2;
wire   [0:0] grp_fu_242_p2;
wire   [63:0] p_Val2_s_fu_380_p1;
wire   [51:0] tmp_V_1_fu_401_p1;
wire   [53:0] mantissa_V_fu_405_p4;
wire   [10:0] tmp_V_fu_391_p4;
wire   [11:0] zext_ln502_fu_419_p1;
wire   [11:0] add_ln502_fu_423_p2;
wire   [10:0] sub_ln1311_fu_437_p2;
wire   [0:0] isNeg_fu_429_p3;
wire  signed [11:0] sext_ln1311_fu_443_p1;
wire   [11:0] ush_fu_447_p3;
wire  signed [31:0] sext_ln1311_1_fu_455_p1;
wire   [53:0] zext_ln1285_fu_463_p1;
wire   [136:0] zext_ln682_fu_415_p1;
wire   [136:0] zext_ln1287_fu_459_p1;
wire   [53:0] r_V_fu_467_p2;
wire   [0:0] tmp_12_fu_479_p3;
wire   [136:0] r_V_1_fu_473_p2;
wire   [31:0] zext_ln662_fu_487_p1;
wire   [31:0] tmp_s_fu_491_p4;
wire   [31:0] result_V_1_fu_509_p2;
wire   [0:0] tmp_13_fu_527_p3;
wire   [0:0] icmp_ln32_fu_521_p2;
wire   [0:0] xor_ln32_fu_535_p2;
wire   [0:0] icmp_ln34_fu_547_p2;
wire   [0:0] icmp_ln34_1_fu_553_p2;
wire   [0:0] and_ln34_fu_559_p2;
wire   [28:0] trunc_ln1_fu_565_p4;
wire   [0:0] and_ln32_fu_541_p2;
wire   [28:0] select_ln34_fu_575_p3;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

estimate_ISI_encode_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
estimate_ISI_encode_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .spks_address0(spks_address0),
    .spks_ce0(spks_ce0),
    .spks_q0(spks_q0),
    .spksTime(spksTime),
    .update_address0(update_address0),
    .update_ce0(update_ce0),
    .update_q0(update_q0),
    .ISIPre_address0(ISIPre_address0),
    .ISIPre_ce0(ISIPre_ce0),
    .ISIPre_we0(ISIPre_we0),
    .ISIPre_d0(ISI_q0),
    .ISIPre_q0(ISIPre_q0),
    .spksPre_address0(spksPre_address0),
    .spksPre_ce0(spksPre_ce0),
    .spksPre_we0(spksPre_we0),
    .spksPre_d0(spksTime_read_reg_595),
    .spksPre_q0(spksPre_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0)
);

estimate_ISI_encode_ISI #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
ISI_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ISI_address0),
    .ce0(ISI_ce0),
    .we0(ISI_we0),
    .d0(ISI_d0),
    .q0(ISI_q0)
);

estimate_ISI_encode_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_ISI_encode_dsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_256),
    .din1(tmp_4_reg_669),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

estimate_ISI_encode_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_ISI_encode_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_236_p0),
    .din1(grp_fu_236_p1),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

estimate_ISI_encode_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_ISI_encode_dcmp_64ns_64ns_1_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_675),
    .din1(reg_256),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_242_p2)
);

estimate_ISI_encode_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
estimate_ISI_encode_sitodp_32ns_64_6_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_246_p0),
    .ce(1'b1),
    .dout(grp_fu_246_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        j_0_reg_221 <= j_reg_604;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_221 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ISIPre_addr_reg_649 <= zext_ln9_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ISI_addr_reg_654 <= zext_ln9_reg_609;
        sub_ln14_reg_664 <= sub_ln14_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        and_ln14_1_reg_701 <= and_ln14_1_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln10_reg_633 <= icmp_ln10_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        icmp_ln14_1_reg_686 <= icmp_ln14_1_fu_342_p2;
        icmp_ln14_2_reg_691 <= icmp_ln14_2_fu_348_p2;
        icmp_ln14_3_reg_696 <= icmp_ln14_3_fu_354_p2;
        icmp_ln14_reg_681 <= icmp_ln14_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln9_reg_624 <= icmp_ln9_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_604 <= j_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        p_Result_s_reg_710 <= p_Val2_s_fu_380_p1[32'd63];
        p_Val2_5_reg_715 <= p_Val2_5_fu_501_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_250 <= grp_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_256 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        select_ln32_reg_721 <= select_ln32_fu_583_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln10_fu_285_p2 == 1'd1))) begin
        spksPre_addr_reg_637 <= zext_ln9_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        spksTime_read_reg_595 <= spksTime;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sub_ln11_reg_642 <= sub_ln11_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_4_reg_669 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_reg_675 <= grp_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        x_assign_reg_705 <= grp_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_262_p2 == 1'd0))) begin
        zext_ln9_reg_609[6 : 0] <= zext_ln9_fu_274_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ISIPre_address0 = ISIPre_addr_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ISIPre_address0 = zext_ln9_reg_609;
    end else begin
        ISIPre_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state11))) begin
        ISIPre_ce0 = 1'b1;
    end else begin
        ISIPre_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ISIPre_we0 = 1'b1;
    end else begin
        ISIPre_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        ISI_address0 = ISI_addr_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ISI_address0 = zext_ln9_reg_609;
    end else begin
        ISI_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state12))) begin
        ISI_ce0 = 1'b1;
    end else begin
        ISI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ISI_d0 = p_Val2_6_fu_514_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ISI_d0 = sub_ln11_reg_642;
    end else begin
        ISI_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state37) & (1'd1 == and_ln14_1_reg_701)))) begin
        ISI_we0 = 1'b1;
    end else begin
        ISI_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_262_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_262_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_236_p0 = tmp_4_reg_669;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_236_p0 = reg_250;
    end else begin
        grp_fu_236_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_236_p1 = 64'd4606900943823306752;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_236_p1 = reg_250;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_236_p1 = 64'd4584664420663164928;
    end else begin
        grp_fu_236_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_246_p0 = sub_ln14_reg_664;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_246_p0 = ISIPre_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_246_p0 = sub_ln11_reg_642;
    end else begin
        grp_fu_246_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_r_address0 = output_addr_1_gep_fu_213_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = zext_ln9_reg_609;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state3))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        output_r_d0 = zext_ln32_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_d0 = 32'd15;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (icmp_ln10_reg_633 == 1'd1) & (icmp_ln9_reg_624 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_279_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        spksPre_address0 = spksPre_addr_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        spksPre_address0 = zext_ln9_reg_609;
    end else begin
        spksPre_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state4))) begin
        spksPre_ce0 = 1'b1;
    end else begin
        spksPre_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        spksPre_we0 = 1'b1;
    end else begin
        spksPre_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        spks_ce0 = 1'b1;
    end else begin
        spks_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        update_ce0 = 1'b1;
    end else begin
        update_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_279_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln10_fu_285_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'd0 == and_ln14_1_fu_374_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln502_fu_423_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_419_p1));

assign and_ln14_1_fu_374_p2 = (grp_fu_242_p2 & and_ln14_fu_368_p2);

assign and_ln14_fu_368_p2 = (or_ln14_fu_360_p2 & or_ln14_1_fu_364_p2);

assign and_ln32_fu_541_p2 = (xor_ln32_fu_535_p2 & icmp_ln32_fu_521_p2);

assign and_ln34_fu_559_p2 = (icmp_ln34_fu_547_p2 & icmp_ln34_1_fu_553_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln14_1_fu_318_p1 = reg_256;

assign bitcast_ln14_fu_301_p1 = tmp_reg_675;

assign icmp_ln10_fu_285_p2 = ((spks_q0 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_342_p2 = ((trunc_ln14_fu_314_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_348_p2 = ((tmp_2_fu_322_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_354_p2 = ((trunc_ln14_1_fu_332_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_336_p2 = ((tmp_1_fu_304_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_521_p2 = (($signed(ISI_q0) < $signed(32'd10)) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_553_p2 = (($signed(ISI_q0) < $signed(32'd101)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_547_p2 = (($signed(ISI_q0) > $signed(32'd9)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_262_p2 = ((j_0_reg_221 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_279_p2 = ((update_q0 == 32'd1) ? 1'b1 : 1'b0);

assign isNeg_fu_429_p3 = add_ln502_fu_423_p2[32'd11];

assign j_fu_268_p2 = (j_0_reg_221 + 7'd1);

assign mantissa_V_fu_405_p4 = {{{{1'd1}, {tmp_V_1_fu_401_p1}}}, {1'd0}};

assign or_ln14_1_fu_364_p2 = (icmp_ln14_3_reg_696 | icmp_ln14_2_reg_691);

assign or_ln14_fu_360_p2 = (icmp_ln14_reg_681 | icmp_ln14_1_reg_686);

assign output_addr_1_gep_fu_213_p3 = zext_ln9_reg_609;

assign p_Val2_5_fu_501_p3 = ((isNeg_fu_429_p3[0:0] === 1'b1) ? zext_ln662_fu_487_p1 : tmp_s_fu_491_p4);

assign p_Val2_6_fu_514_p3 = ((p_Result_s_reg_710[0:0] === 1'b1) ? result_V_1_fu_509_p2 : p_Val2_5_reg_715);

assign p_Val2_s_fu_380_p1 = x_assign_reg_705;

assign r_V_1_fu_473_p2 = zext_ln682_fu_415_p1 << zext_ln1287_fu_459_p1;

assign r_V_fu_467_p2 = mantissa_V_fu_405_p4 >> zext_ln1285_fu_463_p1;

assign result_V_1_fu_509_p2 = (32'd0 - p_Val2_5_reg_715);

assign select_ln32_fu_583_p3 = ((and_ln32_fu_541_p2[0:0] === 1'b1) ? 29'd13 : select_ln34_fu_575_p3);

assign select_ln34_fu_575_p3 = ((and_ln34_fu_559_p2[0:0] === 1'b1) ? trunc_ln1_fu_565_p4 : 29'd14);

assign sext_ln1311_1_fu_455_p1 = $signed(ush_fu_447_p3);

assign sext_ln1311_fu_443_p1 = $signed(sub_ln1311_fu_437_p2);

assign spks_address0 = zext_ln9_reg_609;

assign sub_ln11_fu_291_p2 = (spksTime_read_reg_595 - spksPre_q0);

assign sub_ln1311_fu_437_p2 = (11'd1023 - tmp_V_fu_391_p4);

assign sub_ln14_fu_296_p2 = (ISIPre_q0 - sub_ln11_reg_642);

assign tmp_12_fu_479_p3 = r_V_fu_467_p2[32'd53];

assign tmp_13_fu_527_p3 = ISI_q0[32'd31];

assign tmp_1_fu_304_p4 = {{bitcast_ln14_fu_301_p1[62:52]}};

assign tmp_2_fu_322_p4 = {{bitcast_ln14_1_fu_318_p1[62:52]}};

assign tmp_V_1_fu_401_p1 = p_Val2_s_fu_380_p1[51:0];

assign tmp_V_fu_391_p4 = {{p_Val2_s_fu_380_p1[62:52]}};

assign tmp_s_fu_491_p4 = {{r_V_1_fu_473_p2[84:53]}};

assign trunc_ln14_1_fu_332_p1 = bitcast_ln14_1_fu_318_p1[51:0];

assign trunc_ln14_fu_314_p1 = bitcast_ln14_fu_301_p1[51:0];

assign trunc_ln1_fu_565_p4 = {{ISI_q0[31:3]}};

assign update_address0 = zext_ln9_fu_274_p1;

assign ush_fu_447_p3 = ((isNeg_fu_429_p3[0:0] === 1'b1) ? sext_ln1311_fu_443_p1 : add_ln502_fu_423_p2);

assign xor_ln32_fu_535_p2 = (tmp_13_fu_527_p3 ^ 1'd1);

assign zext_ln1285_fu_463_p1 = $unsigned(sext_ln1311_1_fu_455_p1);

assign zext_ln1287_fu_459_p1 = $unsigned(sext_ln1311_1_fu_455_p1);

assign zext_ln32_fu_591_p1 = select_ln32_reg_721;

assign zext_ln502_fu_419_p1 = tmp_V_fu_391_p4;

assign zext_ln662_fu_487_p1 = tmp_12_fu_479_p3;

assign zext_ln682_fu_415_p1 = mantissa_V_fu_405_p4;

assign zext_ln9_fu_274_p1 = j_0_reg_221;

always @ (posedge ap_clk) begin
    zext_ln9_reg_609[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_ISI_encode
