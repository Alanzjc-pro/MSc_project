-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI_encode is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of estimate_ISI_encode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI_encode,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.587000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=14,HLS_SYN_FF=2345,HLS_SYN_LUT=4758,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_3FA0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FEF000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101111000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv29_E : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001110";
    constant ap_const_lv29_D : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal spks_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal spks_ce0 : STD_LOGIC;
    signal spks_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal spksTime : STD_LOGIC_VECTOR (31 downto 0);
    signal update_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal update_ce0 : STD_LOGIC;
    signal update_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ISIPre_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISIPre_ce0 : STD_LOGIC;
    signal ISIPre_we0 : STD_LOGIC;
    signal ISIPre_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal spksPre_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal spksPre_ce0 : STD_LOGIC;
    signal spksPre_we0 : STD_LOGIC;
    signal spksPre_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal spksTime_read_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_604 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln9_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_reg_609 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln8_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln10_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal spksPre_addr_reg_637 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln11_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln11_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ISIPre_addr_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISI_addr_reg_654 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sub_ln14_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_669 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln14_1_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_3_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_3_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_1_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_705 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Result_s_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal p_Val2_5_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_fu_583_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln32_reg_721 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ISI_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISI_ce0 : STD_LOGIC;
    signal ISI_we0 : STD_LOGIC;
    signal ISI_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ISI_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_221 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal output_addr_1_gep_fu_213_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln32_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Val2_6_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln14_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln14_1_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_304_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln14_fu_314_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_2_fu_322_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln14_1_fu_332_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln14_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_401_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_405_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_391_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_423_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_443_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_447_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_463_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_415_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_459_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_467_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_12_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_473_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_491_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_fu_565_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal and_ln32_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_575_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component estimate_ISI_encode_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component estimate_ISI_encode_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component estimate_ISI_encode_dcmp_64ns_64ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component estimate_ISI_encode_sitodp_32ns_64_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component estimate_ISI_encode_ISI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component estimate_ISI_encode_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        spks_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        spks_ce0 : IN STD_LOGIC;
        spks_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        spksTime : OUT STD_LOGIC_VECTOR (31 downto 0);
        update_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        update_ce0 : IN STD_LOGIC;
        update_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ISIPre_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ISIPre_ce0 : IN STD_LOGIC;
        ISIPre_we0 : IN STD_LOGIC;
        ISIPre_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ISIPre_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        spksPre_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        spksPre_ce0 : IN STD_LOGIC;
        spksPre_we0 : IN STD_LOGIC;
        spksPre_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        spksPre_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    estimate_ISI_encode_AXILiteS_s_axi_U : component estimate_ISI_encode_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        spks_address0 => spks_address0,
        spks_ce0 => spks_ce0,
        spks_q0 => spks_q0,
        spksTime => spksTime,
        update_address0 => update_address0,
        update_ce0 => update_ce0,
        update_q0 => update_q0,
        ISIPre_address0 => ISIPre_address0,
        ISIPre_ce0 => ISIPre_ce0,
        ISIPre_we0 => ISIPre_we0,
        ISIPre_d0 => ISI_q0,
        ISIPre_q0 => ISIPre_q0,
        spksPre_address0 => spksPre_address0,
        spksPre_ce0 => spksPre_ce0,
        spksPre_we0 => spksPre_we0,
        spksPre_d0 => spksTime_read_reg_595,
        spksPre_q0 => spksPre_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0);

    ISI_U : component estimate_ISI_encode_ISI
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ISI_address0,
        ce0 => ISI_ce0,
        we0 => ISI_we0,
        d0 => ISI_d0,
        q0 => ISI_q0);

    estimate_ISI_encode_dsub_64ns_64ns_64_5_full_dsp_1_U1 : component estimate_ISI_encode_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_256,
        din1 => tmp_4_reg_669,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    estimate_ISI_encode_dmul_64ns_64ns_64_6_max_dsp_1_U2 : component estimate_ISI_encode_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);

    estimate_ISI_encode_dcmp_64ns_64ns_1_2_1_U3 : component estimate_ISI_encode_dcmp_64ns_64ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_675,
        din1 => reg_256,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_242_p2);

    estimate_ISI_encode_sitodp_32ns_64_6_1_U4 : component estimate_ISI_encode_sitodp_32ns_64_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_246_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_246_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                j_0_reg_221 <= j_reg_604;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_221 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ISIPre_addr_reg_649 <= zext_ln9_reg_609(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ISI_addr_reg_654 <= zext_ln9_reg_609(7 - 1 downto 0);
                sub_ln14_reg_664 <= sub_ln14_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                and_ln14_1_reg_701 <= and_ln14_1_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln10_reg_633 <= icmp_ln10_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                icmp_ln14_1_reg_686 <= icmp_ln14_1_fu_342_p2;
                icmp_ln14_2_reg_691 <= icmp_ln14_2_fu_348_p2;
                icmp_ln14_3_reg_696 <= icmp_ln14_3_fu_354_p2;
                icmp_ln14_reg_681 <= icmp_ln14_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln9_reg_624 <= icmp_ln9_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_604 <= j_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                p_Result_s_reg_710 <= p_Val2_s_fu_380_p1(63 downto 63);
                p_Val2_5_reg_715 <= p_Val2_5_fu_501_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_250 <= grp_fu_246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_256 <= grp_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                select_ln32_reg_721 <= select_ln32_fu_583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln10_fu_285_p2 = ap_const_lv1_1))) then
                spksPre_addr_reg_637 <= zext_ln9_reg_609(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                spksTime_read_reg_595 <= spksTime;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sub_ln11_reg_642 <= sub_ln11_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_4_reg_669 <= grp_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_reg_675 <= grp_fu_246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                x_assign_reg_705 <= grp_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_262_p2 = ap_const_lv1_0))) then
                    zext_ln9_reg_609(6 downto 0) <= zext_ln9_fu_274_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln9_reg_609(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_262_p2, icmp_ln9_fu_279_p2, ap_CS_fsm_state3, icmp_ln10_fu_285_p2, ap_CS_fsm_state4, and_ln14_1_fu_374_p2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_279_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln10_fu_285_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = and_ln14_1_fu_374_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ISIPre_address0_assign_proc : process(ap_CS_fsm_state11, zext_ln9_reg_609, ISIPre_addr_reg_649, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ISIPre_address0 <= ISIPre_addr_reg_649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ISIPre_address0 <= zext_ln9_reg_609(7 - 1 downto 0);
        else 
            ISIPre_address0 <= "XXXXXXX";
        end if; 
    end process;


    ISIPre_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ISIPre_ce0 <= ap_const_logic_1;
        else 
            ISIPre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ISIPre_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ISIPre_we0 <= ap_const_logic_1;
        else 
            ISIPre_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_address0_assign_proc : process(zext_ln9_reg_609, ISI_addr_reg_654, ap_CS_fsm_state12, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ISI_address0 <= ISI_addr_reg_654;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ISI_address0 <= zext_ln9_reg_609(7 - 1 downto 0);
        else 
            ISI_address0 <= "XXXXXXX";
        end if; 
    end process;


    ISI_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ISI_ce0 <= ap_const_logic_1;
        else 
            ISI_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ISI_d0_assign_proc : process(sub_ln11_reg_642, ap_CS_fsm_state12, ap_CS_fsm_state37, p_Val2_6_fu_514_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ISI_d0 <= p_Val2_6_fu_514_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ISI_d0 <= sub_ln11_reg_642;
        else 
            ISI_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ISI_we0_assign_proc : process(ap_CS_fsm_state12, and_ln14_1_reg_701, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_1 = and_ln14_1_reg_701)))) then 
            ISI_we0 <= ap_const_logic_1;
        else 
            ISI_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln502_fu_423_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_419_p1));
    and_ln14_1_fu_374_p2 <= (grp_fu_242_p2 and and_ln14_fu_368_p2);
    and_ln14_fu_368_p2 <= (or_ln14_fu_360_p2 and or_ln14_1_fu_364_p2);
    and_ln32_fu_541_p2 <= (xor_ln32_fu_535_p2 and icmp_ln32_fu_521_p2);
    and_ln34_fu_559_p2 <= (icmp_ln34_fu_547_p2 and icmp_ln34_1_fu_553_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_262_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_262_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_262_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_262_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln14_1_fu_318_p1 <= reg_256;
    bitcast_ln14_fu_301_p1 <= tmp_reg_675;

    grp_fu_236_p0_assign_proc : process(reg_250, ap_CS_fsm_state12, tmp_4_reg_669, ap_CS_fsm_state25, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_236_p0 <= tmp_4_reg_669;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_236_p0 <= reg_250;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p1_assign_proc : process(reg_250, ap_CS_fsm_state12, ap_CS_fsm_state25, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_236_p1 <= ap_const_lv64_3FEF000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_236_p1 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_236_p1 <= ap_const_lv64_3FA0000000000000;
        else 
            grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_246_p0_assign_proc : process(ISIPre_q0, sub_ln11_reg_642, ap_CS_fsm_state12, sub_ln14_reg_664, ap_CS_fsm_state18, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_246_p0 <= sub_ln14_reg_664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_246_p0 <= ISIPre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_246_p0 <= sub_ln11_reg_642;
        else 
            grp_fu_246_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_285_p2 <= "1" when (spks_q0 = ap_const_lv32_1) else "0";
    icmp_ln14_1_fu_342_p2 <= "1" when (trunc_ln14_fu_314_p1 = ap_const_lv52_0) else "0";
    icmp_ln14_2_fu_348_p2 <= "0" when (tmp_2_fu_322_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln14_3_fu_354_p2 <= "1" when (trunc_ln14_1_fu_332_p1 = ap_const_lv52_0) else "0";
    icmp_ln14_fu_336_p2 <= "0" when (tmp_1_fu_304_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln32_fu_521_p2 <= "1" when (signed(ISI_q0) < signed(ap_const_lv32_A)) else "0";
    icmp_ln34_1_fu_553_p2 <= "1" when (signed(ISI_q0) < signed(ap_const_lv32_65)) else "0";
    icmp_ln34_fu_547_p2 <= "1" when (signed(ISI_q0) > signed(ap_const_lv32_9)) else "0";
    icmp_ln8_fu_262_p2 <= "1" when (j_0_reg_221 = ap_const_lv7_60) else "0";
    icmp_ln9_fu_279_p2 <= "1" when (update_q0 = ap_const_lv32_1) else "0";
    isNeg_fu_429_p3 <= add_ln502_fu_423_p2(11 downto 11);
    j_fu_268_p2 <= std_logic_vector(unsigned(j_0_reg_221) + unsigned(ap_const_lv7_1));
    mantissa_V_fu_405_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_401_p1) & ap_const_lv1_0);
    or_ln14_1_fu_364_p2 <= (icmp_ln14_3_reg_696 or icmp_ln14_2_reg_691);
    or_ln14_fu_360_p2 <= (icmp_ln14_reg_681 or icmp_ln14_1_reg_686);
    output_addr_1_gep_fu_213_p3 <= zext_ln9_reg_609(7 - 1 downto 0);

    output_r_address0_assign_proc : process(zext_ln9_reg_609, ap_CS_fsm_state3, ap_CS_fsm_state40, output_addr_1_gep_fu_213_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_address0 <= output_addr_1_gep_fu_213_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= zext_ln9_reg_609(7 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state40, zext_ln32_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_d0 <= zext_ln32_fu_591_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_d0 <= ap_const_lv32_F;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(icmp_ln9_fu_279_p2, icmp_ln9_reg_624, ap_CS_fsm_state3, icmp_ln10_reg_633, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln10_reg_633 = ap_const_lv1_1) and (icmp_ln9_reg_624 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_279_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_5_fu_501_p3 <= 
        zext_ln662_fu_487_p1 when (isNeg_fu_429_p3(0) = '1') else 
        tmp_s_fu_491_p4;
    p_Val2_6_fu_514_p3 <= 
        result_V_1_fu_509_p2 when (p_Result_s_reg_710(0) = '1') else 
        p_Val2_5_reg_715;
    p_Val2_s_fu_380_p1 <= x_assign_reg_705;
    r_V_1_fu_473_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_415_p1),to_integer(unsigned('0' & zext_ln1287_fu_459_p1(31-1 downto 0)))));
    r_V_fu_467_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_405_p4),to_integer(unsigned('0' & zext_ln1285_fu_463_p1(31-1 downto 0)))));
    result_V_1_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_715));
    select_ln32_fu_583_p3 <= 
        ap_const_lv29_D when (and_ln32_fu_541_p2(0) = '1') else 
        select_ln34_fu_575_p3;
    select_ln34_fu_575_p3 <= 
        trunc_ln1_fu_565_p4 when (and_ln34_fu_559_p2(0) = '1') else 
        ap_const_lv29_E;
        sext_ln1311_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_447_p3),32));

        sext_ln1311_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_437_p2),12));


    spksPre_address0_assign_proc : process(zext_ln9_reg_609, ap_CS_fsm_state4, spksPre_addr_reg_637, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            spksPre_address0 <= spksPre_addr_reg_637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            spksPre_address0 <= zext_ln9_reg_609(7 - 1 downto 0);
        else 
            spksPre_address0 <= "XXXXXXX";
        end if; 
    end process;


    spksPre_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            spksPre_ce0 <= ap_const_logic_1;
        else 
            spksPre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    spksPre_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            spksPre_we0 <= ap_const_logic_1;
        else 
            spksPre_we0 <= ap_const_logic_0;
        end if; 
    end process;

    spks_address0 <= zext_ln9_reg_609(7 - 1 downto 0);

    spks_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            spks_ce0 <= ap_const_logic_1;
        else 
            spks_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln11_fu_291_p2 <= std_logic_vector(unsigned(spksTime_read_reg_595) - unsigned(spksPre_q0));
    sub_ln1311_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_391_p4));
    sub_ln14_fu_296_p2 <= std_logic_vector(unsigned(ISIPre_q0) - unsigned(sub_ln11_reg_642));
    tmp_12_fu_479_p3 <= r_V_fu_467_p2(53 downto 53);
    tmp_13_fu_527_p3 <= ISI_q0(31 downto 31);
    tmp_1_fu_304_p4 <= bitcast_ln14_fu_301_p1(62 downto 52);
    tmp_2_fu_322_p4 <= bitcast_ln14_1_fu_318_p1(62 downto 52);
    tmp_V_1_fu_401_p1 <= p_Val2_s_fu_380_p1(52 - 1 downto 0);
    tmp_V_fu_391_p4 <= p_Val2_s_fu_380_p1(62 downto 52);
    tmp_s_fu_491_p4 <= r_V_1_fu_473_p2(84 downto 53);
    trunc_ln14_1_fu_332_p1 <= bitcast_ln14_1_fu_318_p1(52 - 1 downto 0);
    trunc_ln14_fu_314_p1 <= bitcast_ln14_fu_301_p1(52 - 1 downto 0);
    trunc_ln1_fu_565_p4 <= ISI_q0(31 downto 3);
    update_address0 <= zext_ln9_fu_274_p1(7 - 1 downto 0);

    update_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            update_ce0 <= ap_const_logic_1;
        else 
            update_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ush_fu_447_p3 <= 
        sext_ln1311_fu_443_p1 when (isNeg_fu_429_p3(0) = '1') else 
        add_ln502_fu_423_p2;
    xor_ln32_fu_535_p2 <= (tmp_13_fu_527_p3 xor ap_const_lv1_1);
    zext_ln1285_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_455_p1),54));
    zext_ln1287_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_455_p1),137));
    zext_ln32_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_reg_721),32));
    zext_ln502_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_391_p4),12));
    zext_ln662_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_479_p3),32));
    zext_ln682_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_405_p4),137));
    zext_ln9_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_221),64));
end behav;
