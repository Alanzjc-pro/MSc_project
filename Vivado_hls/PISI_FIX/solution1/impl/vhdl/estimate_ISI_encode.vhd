-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_ISI_encode is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of estimate_ISI_encode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_ISI_encode,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.225500,HLS_SYN_LAT=446,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=436,HLS_SYN_LUT=664,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_28 : STD_LOGIC_VECTOR (11 downto 0) := "000000101000";
    constant ap_const_lv12_190 : STD_LOGIC_VECTOR (11 downto 0) := "000110010000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputs_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal inputs_ce0 : STD_LOGIC;
    signal inputs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rem_r_ce0 : STD_LOGIC;
    signal rem_r_we0 : STD_LOGIC;
    signal rem_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_674 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln18_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_679 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln17_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_fu_307_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_699 : STD_LOGIC_VECTOR (18 downto 0);
    signal rem_addr_reg_704 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_709 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln731_fu_368_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln731_reg_714 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_420_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_2_reg_724 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln703_1_fu_436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_1_reg_729 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_561_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal shl_ln_fu_567_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_742 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln41_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ISIquan_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_load_reg_762 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ISIquan_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_load_1_reg_767 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_load_2_reg_782 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ISIquan_V_load_3_reg_787 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_load_4_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ISIquan_V_load_5_reg_807 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISIquan_V_ce0 : STD_LOGIC;
    signal ISIquan_V_we0 : STD_LOGIC;
    signal ISIquan_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ISIquan_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISIquan_V_ce1 : STD_LOGIC;
    signal j_0_reg_267 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ISIquan_V_addr_9_gep_fu_187_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ISI_q_V_fu_546_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_339_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln_fu_357_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln731_fu_364_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_4_fu_374_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISIPre_n_V_fu_388_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_420_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_2_fu_420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ISIPre_V_fu_349_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_5_fu_426_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln703_fu_430_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1333_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln2_fu_447_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1494_fu_454_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1494_fu_458_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1494_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln731_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_fu_467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_474_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_484_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln1495_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1497_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1495_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1495_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1495_fu_532_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_i_fu_510_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln43_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln44_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln45_fu_601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln46_fu_611_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln47_fu_621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln48_fu_631_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln49_fu_641_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_fu_420_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_2_fu_420_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component estimate_ISI_encode_ISIquan_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component estimate_ISI_encode_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputs_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        inputs_ce0 : IN STD_LOGIC;
        inputs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        rem_r_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        rem_r_ce0 : IN STD_LOGIC;
        rem_r_we0 : IN STD_LOGIC;
        rem_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rem_r_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    estimate_ISI_encode_AXILiteS_s_axi_U : component estimate_ISI_encode_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputs_address0 => inputs_address0,
        inputs_ce0 => inputs_ce0,
        inputs_q0 => inputs_q0,
        rem_r_address0 => rem_r_address0,
        rem_r_ce0 => rem_r_ce0,
        rem_r_we0 => rem_r_we0,
        rem_r_d0 => rem_r_d0,
        rem_r_q0 => rem_r_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0);

    ISIquan_V_U : component estimate_ISI_encode_ISIquan_V
    generic map (
        DataWidth => 4,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ISIquan_V_address0,
        ce0 => ISIquan_V_ce0,
        we0 => ISIquan_V_we0,
        d0 => ISIquan_V_d0,
        q0 => ISIquan_V_q0,
        address1 => ISIquan_V_address1,
        ce1 => ISIquan_V_ce1,
        q1 => ISIquan_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_278 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_reg_278 <= i_reg_737;
            end if; 
        end if;
    end process;

    j_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_267 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_267 <= j_reg_674;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ISIquan_V_load_1_reg_767 <= ISIquan_V_q1;
                ISIquan_V_load_reg_762 <= ISIquan_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ISIquan_V_load_2_reg_782 <= ISIquan_V_q1;
                ISIquan_V_load_3_reg_787 <= ISIquan_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ISIquan_V_load_4_reg_802 <= ISIquan_V_q1;
                ISIquan_V_load_5_reg_807 <= ISIquan_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_737 <= i_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_674 <= j_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_V_2_reg_724 <= r_V_2_fu_420_p2;
                ret_V_reg_719 <= ret_V_fu_406_p2;
                sub_ln703_1_reg_729 <= sub_ln703_1_fu_436_p2;
                sub_ln731_reg_714 <= sub_ln731_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_fu_311_p3 = ap_const_lv1_1) and (trunc_ln301_fu_307_p1 = ap_const_lv1_1))) then
                rem_addr_reg_704 <= zext_ln18_reg_679(7 - 1 downto 0);
                tmp_2_reg_699 <= inputs_q0(21 downto 3);
                tmp_4_reg_709 <= inputs_q0(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    shl_ln_reg_742(6 downto 3) <= shl_ln_fu_567_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_5_reg_695 <= inputs_q0(1 downto 1);
                trunc_ln301_reg_691 <= trunc_ln301_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln18_reg_679(6 downto 0) <= zext_ln18_fu_302_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_reg_679(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_742(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_290_p2, trunc_ln301_fu_307_p1, ap_CS_fsm_state3, tmp_5_fu_311_p3, ap_CS_fsm_state6, icmp_ln41_fu_555_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_fu_311_p3 = ap_const_lv1_1) and (trunc_ln301_fu_307_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_555_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ISIPre_V_fu_349_p3 <= (tmp_3_fu_339_p4 & ap_const_lv2_0);
    ISIPre_n_V_fu_388_p4 <= rem_r_q0(29 downto 23);
    ISI_q_V_fu_546_p3 <= 
        select_ln1495_fu_532_p3 when (or_ln1495_fu_540_p2(0) = '1') else 
        trunc_ln_i_fu_510_p4;
    ISIquan_V_addr_9_gep_fu_187_p3 <= zext_ln18_reg_679(7 - 1 downto 0);

    ISIquan_V_address0_assign_proc : process(zext_ln18_reg_679, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state5, ISIquan_V_addr_9_gep_fu_187_p3, zext_ln42_fu_575_p1, zext_ln45_fu_606_p1, zext_ln47_fu_626_p1, zext_ln49_fu_646_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ISIquan_V_address0 <= zext_ln49_fu_646_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ISIquan_V_address0 <= zext_ln47_fu_626_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ISIquan_V_address0 <= zext_ln45_fu_606_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ISIquan_V_address0 <= zext_ln42_fu_575_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ISIquan_V_address0 <= ISIquan_V_addr_9_gep_fu_187_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISIquan_V_address0 <= zext_ln18_reg_679(7 - 1 downto 0);
        else 
            ISIquan_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    ISIquan_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln43_fu_586_p1, zext_ln44_fu_596_p1, zext_ln46_fu_616_p1, zext_ln48_fu_636_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ISIquan_V_address1 <= zext_ln48_fu_636_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ISIquan_V_address1 <= zext_ln46_fu_616_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ISIquan_V_address1 <= zext_ln44_fu_596_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ISIquan_V_address1 <= zext_ln43_fu_586_p1(7 - 1 downto 0);
        else 
            ISIquan_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    ISIquan_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ISIquan_V_ce0 <= ap_const_logic_1;
        else 
            ISIquan_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ISIquan_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ISIquan_V_ce1 <= ap_const_logic_1;
        else 
            ISIquan_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ISIquan_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ISI_q_V_fu_546_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ISIquan_V_d0 <= ISI_q_V_fu_546_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ISIquan_V_d0 <= ap_const_lv4_F;
        else 
            ISIquan_V_d0 <= "XXXX";
        end if; 
    end process;


    ISIquan_V_we0_assign_proc : process(trunc_ln301_reg_691, ap_CS_fsm_state3, tmp_5_fu_311_p3, tmp_5_reg_695, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_reg_695 = ap_const_lv1_1) and (trunc_ln301_reg_691 = ap_const_lv1_1)) or ((tmp_5_fu_311_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            ISIquan_V_we0 <= ap_const_logic_1;
        else 
            ISIquan_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln1497_fu_526_p2 <= (xor_ln1495_fu_520_p2 and icmp_ln1497_fu_504_p2);
    and_ln_fu_357_p3 <= (tmp_4_reg_709 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln41_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_555_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln41_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln41_fu_555_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_561_p2 <= std_logic_vector(unsigned(i_0_reg_278) + unsigned(ap_const_lv4_1));
    icmp_ln1494_fu_461_p2 <= "1" when (signed(sext_ln1494_fu_454_p1) > signed(zext_ln1494_fu_458_p1)) else "0";
    icmp_ln1495_fu_498_p2 <= "1" when (unsigned(p_Val2_5_fu_467_p3) < unsigned(ap_const_lv12_28)) else "0";
    icmp_ln1497_fu_504_p2 <= "1" when (unsigned(p_Val2_5_fu_467_p3) > unsigned(ap_const_lv12_190)) else "0";
    icmp_ln17_fu_290_p2 <= "1" when (j_0_reg_267 = ap_const_lv7_60) else "0";
    icmp_ln41_fu_555_p2 <= "1" when (i_0_reg_278 = ap_const_lv4_C) else "0";
    inputs_address0 <= zext_ln18_fu_302_p1(7 - 1 downto 0);

    inputs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inputs_ce0 <= ap_const_logic_1;
        else 
            inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_296_p2 <= std_logic_vector(unsigned(j_0_reg_267) + unsigned(ap_const_lv7_1));
    lhs_V_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISIPre_n_V_fu_388_p4),8));
    or_ln1495_fu_540_p2 <= (icmp_ln1495_fu_498_p2 or and_ln1497_fu_526_p2);
    or_ln43_fu_580_p2 <= (shl_ln_fu_567_p3 or ap_const_lv7_1);
    or_ln44_fu_591_p2 <= (shl_ln_reg_742 or ap_const_lv7_2);
    or_ln45_fu_601_p2 <= (shl_ln_reg_742 or ap_const_lv7_3);
    or_ln46_fu_611_p2 <= (shl_ln_reg_742 or ap_const_lv7_4);
    or_ln47_fu_621_p2 <= (shl_ln_reg_742 or ap_const_lv7_5);
    or_ln48_fu_631_p2 <= (shl_ln_reg_742 or ap_const_lv7_6);
    or_ln49_fu_641_p2 <= (shl_ln_reg_742 or ap_const_lv7_7);
    output_r_address0 <= zext_ln50_fu_666_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (((((((ISIquan_V_q0 & ISIquan_V_q1) & ISIquan_V_load_5_reg_807) & ISIquan_V_load_4_reg_802) & ISIquan_V_load_3_reg_787) & ISIquan_V_load_2_reg_782) & ISIquan_V_load_1_reg_767) & ISIquan_V_load_reg_762);

    output_r_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_5_fu_467_p3 <= 
        sub_ln703_1_reg_729 when (icmp_ln1494_fu_461_p2(0) = '1') else 
        shl_ln731_fu_442_p2;
    r_V_2_fu_420_p0 <= r_V_2_fu_420_p00(7 - 1 downto 0);
    r_V_2_fu_420_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISIPre_n_V_fu_388_p4),14));
    r_V_2_fu_420_p1 <= r_V_2_fu_420_p10(7 - 1 downto 0);
    r_V_2_fu_420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_374_p4),14));
    r_V_2_fu_420_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_420_p0) * unsigned(r_V_2_fu_420_p1), 14));
    r_V_4_fu_374_p4 <= sub_ln731_fu_368_p2(9 downto 3);
    r_V_5_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ISIPre_n_V_fu_388_p4),12));

    rem_r_address0_assign_proc : process(zext_ln18_reg_679, ap_CS_fsm_state3, rem_addr_reg_704, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rem_r_address0 <= rem_addr_reg_704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rem_r_address0 <= zext_ln18_reg_679(7 - 1 downto 0);
        else 
            rem_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    rem_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            rem_r_ce0 <= ap_const_logic_1;
        else 
            rem_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rem_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_484_p4),32));

    rem_r_we0_assign_proc : process(trunc_ln301_reg_691, tmp_5_reg_695, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_reg_695 = ap_const_lv1_1) and (trunc_ln301_reg_691 = ap_const_lv1_1))) then 
            rem_r_we0 <= ap_const_logic_1;
        else 
            rem_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_406_p2 <= std_logic_vector(unsigned(lhs_V_fu_398_p1) - unsigned(rhs_V_fu_402_p1));
    rhs_V_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_374_p4),8));
    select_ln1495_fu_532_p3 <= 
        ap_const_lv4_D when (icmp_ln1495_fu_498_p2(0) = '1') else 
        ap_const_lv4_E;
        sext_ln1494_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_447_p3),15));

    shl_ln2_fu_447_p3 <= (ret_V_reg_719 & ap_const_lv2_0);
    shl_ln731_fu_442_p2 <= std_logic_vector(shift_left(unsigned(sub_ln731_reg_714),to_integer(unsigned('0' & ap_const_lv12_2(12-1 downto 0)))));
    shl_ln_fu_567_p3 <= (i_0_reg_278 & ap_const_lv3_0);
    sub_ln703_1_fu_436_p2 <= std_logic_vector(unsigned(sub_ln703_fu_430_p2) - unsigned(zext_ln1333_fu_384_p1));
    sub_ln703_fu_430_p2 <= std_logic_vector(unsigned(ISIPre_V_fu_349_p3) - unsigned(r_V_5_fu_426_p1));
    sub_ln731_fu_368_p2 <= std_logic_vector(unsigned(and_ln_fu_357_p3) - unsigned(trunc_ln731_fu_364_p1));
    tmp_1_fu_484_p4 <= ((tmp_fu_474_p4 & tmp_2_reg_699) & ap_const_lv1_0);
    tmp_3_fu_339_p4 <= rem_r_q0(29 downto 20);
    tmp_5_fu_311_p3 <= inputs_q0(1 downto 1);
    tmp_fu_474_p4 <= p_Val2_5_fu_467_p3(11 downto 2);
    trunc_ln301_fu_307_p1 <= inputs_q0(1 - 1 downto 0);
    trunc_ln731_fu_364_p1 <= rem_r_q0(12 - 1 downto 0);
    trunc_ln_i_fu_510_p4 <= p_Val2_5_fu_467_p3(8 downto 5);
    xor_ln1495_fu_520_p2 <= (icmp_ln1495_fu_498_p2 xor ap_const_lv1_1);
    zext_ln1333_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_374_p4),12));
    zext_ln1494_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_reg_724),15));
    zext_ln18_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_267),64));
    zext_ln42_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_567_p3),64));
    zext_ln43_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_fu_580_p2),64));
    zext_ln44_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln44_fu_591_p2),64));
    zext_ln45_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_601_p2),64));
    zext_ln46_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_611_p2),64));
    zext_ln47_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_fu_621_p2),64));
    zext_ln48_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_fu_631_p2),64));
    zext_ln49_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln49_fu_641_p2),64));
    zext_ln50_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_278),64));
end behav;
