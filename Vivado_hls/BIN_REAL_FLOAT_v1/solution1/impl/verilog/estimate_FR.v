// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=4808,HLS_SYN_LUT=6999,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime,
        FR,
        FR_ap_vld,
        c_i,
        c_o,
        c_o_ap_vld,
        Num,
        finish_i,
        finish_o,
        finish_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_state36 = 62'd34359738368;
parameter    ap_ST_fsm_state37 = 62'd68719476736;
parameter    ap_ST_fsm_state38 = 62'd137438953472;
parameter    ap_ST_fsm_state39 = 62'd274877906944;
parameter    ap_ST_fsm_state40 = 62'd549755813888;
parameter    ap_ST_fsm_state41 = 62'd1099511627776;
parameter    ap_ST_fsm_state42 = 62'd2199023255552;
parameter    ap_ST_fsm_state43 = 62'd4398046511104;
parameter    ap_ST_fsm_state44 = 62'd8796093022208;
parameter    ap_ST_fsm_state45 = 62'd17592186044416;
parameter    ap_ST_fsm_state46 = 62'd35184372088832;
parameter    ap_ST_fsm_state47 = 62'd70368744177664;
parameter    ap_ST_fsm_state48 = 62'd140737488355328;
parameter    ap_ST_fsm_state49 = 62'd281474976710656;
parameter    ap_ST_fsm_state50 = 62'd562949953421312;
parameter    ap_ST_fsm_state51 = 62'd1125899906842624;
parameter    ap_ST_fsm_state52 = 62'd2251799813685248;
parameter    ap_ST_fsm_state53 = 62'd4503599627370496;
parameter    ap_ST_fsm_state54 = 62'd9007199254740992;
parameter    ap_ST_fsm_state55 = 62'd18014398509481984;
parameter    ap_ST_fsm_state56 = 62'd36028797018963968;
parameter    ap_ST_fsm_state57 = 62'd72057594037927936;
parameter    ap_ST_fsm_state58 = 62'd144115188075855872;
parameter    ap_ST_fsm_state59 = 62'd288230376151711744;
parameter    ap_ST_fsm_state60 = 62'd576460752303423488;
parameter    ap_ST_fsm_state61 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 62'd2305843009213693952;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] spksTime;
output  [63:0] FR;
output   FR_ap_vld;
input  [63:0] c_i;
output  [63:0] c_o;
output   c_o_ap_vld;
input  [31:0] Num;
input   finish_i;
output   finish_o;
output   finish_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg FR_ap_vld;
reg[63:0] c_o;
reg c_o_ap_vld;
reg finish_o;
reg finish_o_ap_vld;

(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_117_p1;
reg   [63:0] reg_121;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_101_p2;
reg   [63:0] reg_126;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state26;
wire   [0:0] finish_read_read_fu_60_p2;
reg   [0:0] finish_read_reg_269;
reg   [63:0] c_read_reg_273;
wire   [0:0] icmp_ln8_fu_149_p2;
reg   [0:0] icmp_ln8_reg_279;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln8_1_fu_155_p2;
reg   [0:0] icmp_ln8_1_reg_284;
wire   [0:0] and_ln8_1_fu_206_p2;
reg   [0:0] and_ln8_1_reg_289;
wire    ap_CS_fsm_state14;
wire   [31:0] add_ln8_fu_212_p2;
reg   [31:0] add_ln8_reg_293;
wire   [0:0] icmp_ln8_4_fu_235_p2;
reg   [0:0] icmp_ln8_4_reg_298;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln8_5_fu_241_p2;
reg   [0:0] icmp_ln8_5_reg_303;
wire   [0:0] and_ln8_2_fu_251_p2;
reg   [0:0] and_ln8_2_reg_308;
wire    ap_CS_fsm_state28;
wire   [63:0] grp_fu_95_p2;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state62;
wire   [63:0] grp_fu_106_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_117_p0;
wire    ap_CS_fsm_state15;
wire   [63:0] bitcast_ln8_fu_131_p1;
wire   [10:0] tmp_2_fu_135_p4;
wire   [51:0] trunc_ln8_fu_145_p1;
wire   [63:0] bitcast_ln8_1_fu_161_p1;
wire   [10:0] tmp_5_fu_164_p4;
wire   [51:0] trunc_ln8_1_fu_174_p1;
wire   [0:0] icmp_ln8_3_fu_188_p2;
wire   [0:0] icmp_ln8_2_fu_182_p2;
wire   [0:0] or_ln8_fu_178_p2;
wire   [0:0] or_ln8_1_fu_194_p2;
wire   [0:0] and_ln8_fu_200_p2;
wire   [0:0] grp_fu_113_p2;
wire   [63:0] bitcast_ln8_2_fu_217_p1;
wire   [10:0] tmp_8_fu_221_p4;
wire   [51:0] trunc_ln8_2_fu_231_p1;
wire   [0:0] or_ln8_2_fu_247_p2;
reg   [4:0] grp_fu_113_opcode;
reg   [61:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
end

estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_read_reg_273),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_95_p2)
);

estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_121),
    .din1(64'd4591870180066957722),
    .ce(1'b1),
    .dout(grp_fu_101_p2)
);

estimate_FR_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_ddiv_64ns_64ns_64_31_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_i),
    .din1(64'd4591870180066957722),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

estimate_FR_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_FR_dcmp_64ns_64ns_1_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_126),
    .din1(spksTime),
    .ce(1'b1),
    .opcode(grp_fu_113_opcode),
    .dout(grp_fu_113_p2)
);

estimate_FR_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
estimate_FR_sitodp_32ns_64_6_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_117_p0),
    .ce(1'b1),
    .dout(grp_fu_117_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == and_ln8_1_fu_206_p2))) begin
        add_ln8_reg_293 <= add_ln8_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        and_ln8_1_reg_289 <= and_ln8_1_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        and_ln8_2_reg_308 <= and_ln8_2_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read_reg_273 <= c_i;
        finish_read_reg_269 <= finish_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln8_1_reg_284 <= icmp_ln8_1_fu_155_p2;
        icmp_ln8_reg_279 <= icmp_ln8_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln8_4_reg_298 <= icmp_ln8_4_fu_235_p2;
        icmp_ln8_5_reg_303 <= icmp_ln8_5_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_121 <= grp_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_126 <= grp_fu_101_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        FR_ap_vld = 1'b1;
    end else begin
        FR_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        c_o = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state32) & (1'd1 == and_ln8_2_reg_308) & (1'd1 == and_ln8_1_reg_289) & (finish_read_reg_269 == 1'd0))) begin
        c_o = grp_fu_95_p2;
    end else begin
        c_o = c_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((1'b1 == ap_CS_fsm_state32) & (1'd1 == and_ln8_2_reg_308) & (1'd1 == and_ln8_1_reg_289) & (finish_read_reg_269 == 1'd0)))) begin
        c_o_ap_vld = 1'b1;
    end else begin
        c_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        finish_o = 1'd0;
    end else begin
        finish_o = finish_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        finish_o_ap_vld = 1'b1;
    end else begin
        finish_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_113_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_113_opcode = 5'd5;
    end else begin
        grp_fu_113_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_117_p0 = add_ln8_reg_293;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_117_p0 = Num;
    end else begin
        grp_fu_117_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (finish_read_read_fu_60_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (finish_read_read_fu_60_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == and_ln8_1_fu_206_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == and_ln8_2_fu_251_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR = grp_fu_106_p2;

assign add_ln8_fu_212_p2 = (32'd1 + Num);

assign and_ln8_1_fu_206_p2 = (grp_fu_113_p2 & and_ln8_fu_200_p2);

assign and_ln8_2_fu_251_p2 = (or_ln8_2_fu_247_p2 & grp_fu_113_p2);

assign and_ln8_fu_200_p2 = (or_ln8_fu_178_p2 & or_ln8_1_fu_194_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln8_1_fu_161_p1 = spksTime;

assign bitcast_ln8_2_fu_217_p1 = reg_126;

assign bitcast_ln8_fu_131_p1 = reg_126;

assign finish_read_read_fu_60_p2 = finish_i;

assign icmp_ln8_1_fu_155_p2 = ((trunc_ln8_fu_145_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_2_fu_182_p2 = ((tmp_5_fu_164_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_188_p2 = ((trunc_ln8_1_fu_174_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_4_fu_235_p2 = ((tmp_8_fu_221_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln8_5_fu_241_p2 = ((trunc_ln8_2_fu_231_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_149_p2 = ((tmp_2_fu_135_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln8_1_fu_194_p2 = (icmp_ln8_3_fu_188_p2 | icmp_ln8_2_fu_182_p2);

assign or_ln8_2_fu_247_p2 = (icmp_ln8_5_reg_303 | icmp_ln8_4_reg_298);

assign or_ln8_fu_178_p2 = (icmp_ln8_reg_279 | icmp_ln8_1_reg_284);

assign tmp_2_fu_135_p4 = {{bitcast_ln8_fu_131_p1[62:52]}};

assign tmp_5_fu_164_p4 = {{bitcast_ln8_1_fu_161_p1[62:52]}};

assign tmp_8_fu_221_p4 = {{bitcast_ln8_2_fu_217_p1[62:52]}};

assign trunc_ln8_1_fu_174_p1 = bitcast_ln8_1_fu_161_p1[51:0];

assign trunc_ln8_2_fu_231_p1 = bitcast_ln8_2_fu_217_p1[51:0];

assign trunc_ln8_fu_145_p1 = bitcast_ln8_fu_131_p1[51:0];

endmodule //estimate_FR
