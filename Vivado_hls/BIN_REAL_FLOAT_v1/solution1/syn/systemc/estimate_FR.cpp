// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<62> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<62> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<62> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<62> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state5 = "10000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state6 = "100000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state7 = "1000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state8 = "10000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state9 = "100000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state10 = "1000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state11 = "10000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state12 = "100000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<62> estimate_FR::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_5 = "101";
const sc_lv<32> estimate_FR::ap_const_lv32_13 = "10011";
const sc_lv<32> estimate_FR::ap_const_lv32_B = "1011";
const sc_lv<32> estimate_FR::ap_const_lv32_19 = "11001";
const sc_lv<32> estimate_FR::ap_const_lv32_C = "1100";
const sc_lv<32> estimate_FR::ap_const_lv32_D = "1101";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_1A = "11010";
const sc_lv<32> estimate_FR::ap_const_lv32_1B = "11011";
const sc_lv<32> estimate_FR::ap_const_lv32_1F = "11111";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<64> estimate_FR::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_3D = "111101";
const sc_lv<64> estimate_FR::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<64> estimate_FR::ap_const_lv64_3FB999999999999A = "11111110111001100110011001100110011001100110011001100110011010";
const sc_lv<32> estimate_FR::ap_const_lv32_6 = "110";
const sc_lv<32> estimate_FR::ap_const_lv32_14 = "10100";
const sc_lv<32> estimate_FR::ap_const_lv32_E = "1110";
const sc_lv<32> estimate_FR::ap_const_lv32_34 = "110100";
const sc_lv<32> estimate_FR::ap_const_lv32_3E = "111110";
const sc_lv<11> estimate_FR::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> estimate_FR::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<5> estimate_FR::ap_const_lv5_5 = "101";
const sc_lv<5> estimate_FR::ap_const_lv5_3 = "11";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1 = new estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1<1,5,64,64,64>("estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1");
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->clk(ap_clk);
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->reset(ap_rst);
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->din0(c_read_reg_273);
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->din1(ap_var_for_const0);
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->ce(ap_var_for_const1);
    estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1->dout(grp_fu_95_p2);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2 = new estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1<1,6,64,64,64>("estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2");
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->clk(ap_clk);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->reset(ap_rst);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->din0(reg_121);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->din1(ap_var_for_const2);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->ce(ap_var_for_const1);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->dout(grp_fu_101_p2);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3 = new estimate_FR_ddiv_64ns_64ns_64_31_1<1,31,64,64,64>("estimate_FR_ddiv_64ns_64ns_64_31_1_U3");
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->clk(ap_clk);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->reset(ap_rst);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->din0(c_i);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->din1(ap_var_for_const2);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->ce(ap_var_for_const1);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->dout(grp_fu_106_p2);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4 = new estimate_FR_dcmp_64ns_64ns_1_2_1<1,2,64,64,1>("estimate_FR_dcmp_64ns_64ns_1_2_1_U4");
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->clk(ap_clk);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->reset(ap_rst);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->din0(reg_126);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->din1(spksTime);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->ce(ap_var_for_const1);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->opcode(grp_fu_113_opcode);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->dout(grp_fu_113_p2);
    estimate_FR_sitodp_32ns_64_6_1_U5 = new estimate_FR_sitodp_32ns_64_6_1<1,6,32,64>("estimate_FR_sitodp_32ns_64_6_1_U5");
    estimate_FR_sitodp_32ns_64_6_1_U5->clk(ap_clk);
    estimate_FR_sitodp_32ns_64_6_1_U5->reset(ap_rst);
    estimate_FR_sitodp_32ns_64_6_1_U5->din0(grp_fu_117_p0);
    estimate_FR_sitodp_32ns_64_6_1_U5->ce(ap_var_for_const1);
    estimate_FR_sitodp_32ns_64_6_1_U5->dout(grp_fu_117_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FR);
    sensitive << ( ap_CS_fsm_state62 );
    sensitive << ( grp_fu_106_p2 );

    SC_METHOD(thread_FR_ap_vld);
    sensitive << ( ap_CS_fsm_state62 );

    SC_METHOD(thread_add_ln8_fu_212_p2);
    sensitive << ( Num );

    SC_METHOD(thread_and_ln8_1_fu_206_p2);
    sensitive << ( and_ln8_fu_200_p2 );
    sensitive << ( grp_fu_113_p2 );

    SC_METHOD(thread_and_ln8_2_fu_251_p2);
    sensitive << ( grp_fu_113_p2 );
    sensitive << ( or_ln8_2_fu_247_p2 );

    SC_METHOD(thread_and_ln8_fu_200_p2);
    sensitive << ( or_ln8_fu_178_p2 );
    sensitive << ( or_ln8_1_fu_194_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state62);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_bitcast_ln8_1_fu_161_p1);
    sensitive << ( spksTime );

    SC_METHOD(thread_bitcast_ln8_2_fu_217_p1);
    sensitive << ( reg_126 );

    SC_METHOD(thread_bitcast_ln8_fu_131_p1);
    sensitive << ( reg_126 );

    SC_METHOD(thread_c_o);
    sensitive << ( c_i );
    sensitive << ( finish_read_reg_269 );
    sensitive << ( and_ln8_1_reg_289 );
    sensitive << ( and_ln8_2_reg_308 );
    sensitive << ( grp_fu_95_p2 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state62 );

    SC_METHOD(thread_c_o_ap_vld);
    sensitive << ( finish_read_reg_269 );
    sensitive << ( and_ln8_1_reg_289 );
    sensitive << ( and_ln8_2_reg_308 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state62 );

    SC_METHOD(thread_finish_o);
    sensitive << ( finish_i );
    sensitive << ( ap_CS_fsm_state62 );

    SC_METHOD(thread_finish_o_ap_vld);
    sensitive << ( ap_CS_fsm_state62 );

    SC_METHOD(thread_finish_read_read_fu_60_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_i );

    SC_METHOD(thread_grp_fu_113_opcode);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_grp_fu_117_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Num );
    sensitive << ( add_ln8_reg_293 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_icmp_ln8_1_fu_155_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( trunc_ln8_fu_145_p1 );

    SC_METHOD(thread_icmp_ln8_2_fu_182_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_5_fu_164_p4 );

    SC_METHOD(thread_icmp_ln8_3_fu_188_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln8_1_fu_174_p1 );

    SC_METHOD(thread_icmp_ln8_4_fu_235_p2);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( tmp_8_fu_221_p4 );

    SC_METHOD(thread_icmp_ln8_5_fu_241_p2);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( trunc_ln8_2_fu_231_p1 );

    SC_METHOD(thread_icmp_ln8_fu_149_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_2_fu_135_p4 );

    SC_METHOD(thread_or_ln8_1_fu_194_p2);
    sensitive << ( icmp_ln8_3_fu_188_p2 );
    sensitive << ( icmp_ln8_2_fu_182_p2 );

    SC_METHOD(thread_or_ln8_2_fu_247_p2);
    sensitive << ( icmp_ln8_4_reg_298 );
    sensitive << ( icmp_ln8_5_reg_303 );

    SC_METHOD(thread_or_ln8_fu_178_p2);
    sensitive << ( icmp_ln8_reg_279 );
    sensitive << ( icmp_ln8_1_reg_284 );

    SC_METHOD(thread_tmp_2_fu_135_p4);
    sensitive << ( bitcast_ln8_fu_131_p1 );

    SC_METHOD(thread_tmp_5_fu_164_p4);
    sensitive << ( bitcast_ln8_1_fu_161_p1 );

    SC_METHOD(thread_tmp_8_fu_221_p4);
    sensitive << ( bitcast_ln8_2_fu_217_p1 );

    SC_METHOD(thread_trunc_ln8_1_fu_174_p1);
    sensitive << ( bitcast_ln8_1_fu_161_p1 );

    SC_METHOD(thread_trunc_ln8_2_fu_231_p1);
    sensitive << ( bitcast_ln8_2_fu_217_p1 );

    SC_METHOD(thread_trunc_ln8_fu_145_p1);
    sensitive << ( bitcast_ln8_fu_131_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_60_p2 );
    sensitive << ( and_ln8_1_fu_206_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( and_ln8_2_fu_251_p2 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime, "(port)spksTime");
    sc_trace(mVcdFile, FR, "(port)FR");
    sc_trace(mVcdFile, FR_ap_vld, "(port)FR_ap_vld");
    sc_trace(mVcdFile, c_i, "(port)c_i");
    sc_trace(mVcdFile, c_o, "(port)c_o");
    sc_trace(mVcdFile, c_o_ap_vld, "(port)c_o_ap_vld");
    sc_trace(mVcdFile, Num, "(port)Num");
    sc_trace(mVcdFile, finish_i, "(port)finish_i");
    sc_trace(mVcdFile, finish_o, "(port)finish_o");
    sc_trace(mVcdFile, finish_o_ap_vld, "(port)finish_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_117_p1, "grp_fu_117_p1");
    sc_trace(mVcdFile, reg_121, "reg_121");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_101_p2, "grp_fu_101_p2");
    sc_trace(mVcdFile, reg_126, "reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, finish_read_read_fu_60_p2, "finish_read_read_fu_60_p2");
    sc_trace(mVcdFile, finish_read_reg_269, "finish_read_reg_269");
    sc_trace(mVcdFile, c_read_reg_273, "c_read_reg_273");
    sc_trace(mVcdFile, icmp_ln8_fu_149_p2, "icmp_ln8_fu_149_p2");
    sc_trace(mVcdFile, icmp_ln8_reg_279, "icmp_ln8_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, icmp_ln8_1_fu_155_p2, "icmp_ln8_1_fu_155_p2");
    sc_trace(mVcdFile, icmp_ln8_1_reg_284, "icmp_ln8_1_reg_284");
    sc_trace(mVcdFile, and_ln8_1_fu_206_p2, "and_ln8_1_fu_206_p2");
    sc_trace(mVcdFile, and_ln8_1_reg_289, "and_ln8_1_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, add_ln8_fu_212_p2, "add_ln8_fu_212_p2");
    sc_trace(mVcdFile, add_ln8_reg_293, "add_ln8_reg_293");
    sc_trace(mVcdFile, icmp_ln8_4_fu_235_p2, "icmp_ln8_4_fu_235_p2");
    sc_trace(mVcdFile, icmp_ln8_4_reg_298, "icmp_ln8_4_reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, icmp_ln8_5_fu_241_p2, "icmp_ln8_5_fu_241_p2");
    sc_trace(mVcdFile, icmp_ln8_5_reg_303, "icmp_ln8_5_reg_303");
    sc_trace(mVcdFile, and_ln8_2_fu_251_p2, "and_ln8_2_fu_251_p2");
    sc_trace(mVcdFile, and_ln8_2_reg_308, "and_ln8_2_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_95_p2, "grp_fu_95_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state62, "ap_CS_fsm_state62");
    sc_trace(mVcdFile, grp_fu_106_p2, "grp_fu_106_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_117_p0, "grp_fu_117_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, bitcast_ln8_fu_131_p1, "bitcast_ln8_fu_131_p1");
    sc_trace(mVcdFile, tmp_2_fu_135_p4, "tmp_2_fu_135_p4");
    sc_trace(mVcdFile, trunc_ln8_fu_145_p1, "trunc_ln8_fu_145_p1");
    sc_trace(mVcdFile, bitcast_ln8_1_fu_161_p1, "bitcast_ln8_1_fu_161_p1");
    sc_trace(mVcdFile, tmp_5_fu_164_p4, "tmp_5_fu_164_p4");
    sc_trace(mVcdFile, trunc_ln8_1_fu_174_p1, "trunc_ln8_1_fu_174_p1");
    sc_trace(mVcdFile, icmp_ln8_3_fu_188_p2, "icmp_ln8_3_fu_188_p2");
    sc_trace(mVcdFile, icmp_ln8_2_fu_182_p2, "icmp_ln8_2_fu_182_p2");
    sc_trace(mVcdFile, or_ln8_fu_178_p2, "or_ln8_fu_178_p2");
    sc_trace(mVcdFile, or_ln8_1_fu_194_p2, "or_ln8_1_fu_194_p2");
    sc_trace(mVcdFile, and_ln8_fu_200_p2, "and_ln8_fu_200_p2");
    sc_trace(mVcdFile, grp_fu_113_p2, "grp_fu_113_p2");
    sc_trace(mVcdFile, bitcast_ln8_2_fu_217_p1, "bitcast_ln8_2_fu_217_p1");
    sc_trace(mVcdFile, tmp_8_fu_221_p4, "tmp_8_fu_221_p4");
    sc_trace(mVcdFile, trunc_ln8_2_fu_231_p1, "trunc_ln8_2_fu_231_p1");
    sc_trace(mVcdFile, or_ln8_2_fu_247_p2, "or_ln8_2_fu_247_p2");
    sc_trace(mVcdFile, grp_fu_113_opcode, "grp_fu_113_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_FR_dadd_64ns_64ns_64_5_full_dsp_1_U1;
    delete estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2;
    delete estimate_FR_ddiv_64ns_64ns_64_31_1_U3;
    delete estimate_FR_dcmp_64ns_64ns_1_2_1_U4;
    delete estimate_FR_sitodp_32ns_64_6_1_U5;
}

void estimate_FR::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void estimate_FR::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_3FF0000000000000;
}

void estimate_FR::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_3FB999999999999A;
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(and_ln8_1_fu_206_p2.read(), ap_const_lv1_1))) {
        add_ln8_reg_293 = add_ln8_fu_212_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        and_ln8_1_reg_289 = and_ln8_1_fu_206_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        and_ln8_2_reg_308 = and_ln8_2_fu_251_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_read_reg_273 = c_i.read();
        finish_read_reg_269 =  (sc_lv<1>) (finish_i.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        icmp_ln8_1_reg_284 = icmp_ln8_1_fu_155_p2.read();
        icmp_ln8_reg_279 = icmp_ln8_fu_149_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        icmp_ln8_4_reg_298 = icmp_ln8_4_fu_235_p2.read();
        icmp_ln8_5_reg_303 = icmp_ln8_5_fu_241_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        reg_121 = grp_fu_117_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_126 = grp_fu_101_p2.read();
    }
}

void estimate_FR::thread_FR() {
    FR = grp_fu_106_p2.read();
}

void estimate_FR::thread_FR_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) {
        FR_ap_vld = ap_const_logic_1;
    } else {
        FR_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_add_ln8_fu_212_p2() {
    add_ln8_fu_212_p2 = (!ap_const_lv32_1.is_01() || !Num.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(Num.read()));
}

void estimate_FR::thread_and_ln8_1_fu_206_p2() {
    and_ln8_1_fu_206_p2 = (and_ln8_fu_200_p2.read() & grp_fu_113_p2.read());
}

void estimate_FR::thread_and_ln8_2_fu_251_p2() {
    and_ln8_2_fu_251_p2 = (or_ln8_2_fu_247_p2.read() & grp_fu_113_p2.read());
}

void estimate_FR::thread_and_ln8_fu_200_p2() {
    and_ln8_fu_200_p2 = (or_ln8_fu_178_p2.read() & or_ln8_1_fu_194_p2.read());
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void estimate_FR::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void estimate_FR::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void estimate_FR::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void estimate_FR::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void estimate_FR::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void estimate_FR::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void estimate_FR::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void estimate_FR::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void estimate_FR::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void estimate_FR::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void estimate_FR::thread_ap_CS_fsm_state62() {
    ap_CS_fsm_state62 = ap_CS_fsm.read()[61];
}

void estimate_FR::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void estimate_FR::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_bitcast_ln8_1_fu_161_p1() {
    bitcast_ln8_1_fu_161_p1 = spksTime.read();
}

void estimate_FR::thread_bitcast_ln8_2_fu_217_p1() {
    bitcast_ln8_2_fu_217_p1 = reg_126.read();
}

void estimate_FR::thread_bitcast_ln8_fu_131_p1() {
    bitcast_ln8_fu_131_p1 = reg_126.read();
}

void estimate_FR::thread_c_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) {
        c_o = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
                esl_seteq<1,1,1>(finish_read_reg_269.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(and_ln8_1_reg_289.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln8_2_reg_308.read()))) {
        c_o = grp_fu_95_p2.read();
    } else {
        c_o = c_i.read();
    }
}

void estimate_FR::thread_c_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
          esl_seteq<1,1,1>(finish_read_reg_269.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(and_ln8_1_reg_289.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln8_2_reg_308.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()))) {
        c_o_ap_vld = ap_const_logic_1;
    } else {
        c_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_finish_o() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) {
        finish_o =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        finish_o = finish_i.read();
    }
}

void estimate_FR::thread_finish_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) {
        finish_o_ap_vld = ap_const_logic_1;
    } else {
        finish_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_finish_read_read_fu_60_p2() {
    finish_read_read_fu_60_p2 =  (sc_lv<1>) (finish_i.read());
}

void estimate_FR::thread_grp_fu_113_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_fu_113_opcode = ap_const_lv5_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_113_opcode = ap_const_lv5_5;
    } else {
        grp_fu_113_opcode = "XXXXX";
    }
}

void estimate_FR::thread_grp_fu_117_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_117_p0 = add_ln8_reg_293.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_117_p0 = Num.read();
    } else {
        grp_fu_117_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void estimate_FR::thread_icmp_ln8_1_fu_155_p2() {
    icmp_ln8_1_fu_155_p2 = (!trunc_ln8_fu_145_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln8_fu_145_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln8_2_fu_182_p2() {
    icmp_ln8_2_fu_182_p2 = (!tmp_5_fu_164_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_164_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_icmp_ln8_3_fu_188_p2() {
    icmp_ln8_3_fu_188_p2 = (!trunc_ln8_1_fu_174_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln8_1_fu_174_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln8_4_fu_235_p2() {
    icmp_ln8_4_fu_235_p2 = (!tmp_8_fu_221_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_8_fu_221_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_icmp_ln8_5_fu_241_p2() {
    icmp_ln8_5_fu_241_p2 = (!trunc_ln8_2_fu_231_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln8_2_fu_231_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln8_fu_149_p2() {
    icmp_ln8_fu_149_p2 = (!tmp_2_fu_135_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_135_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_or_ln8_1_fu_194_p2() {
    or_ln8_1_fu_194_p2 = (icmp_ln8_3_fu_188_p2.read() | icmp_ln8_2_fu_182_p2.read());
}

void estimate_FR::thread_or_ln8_2_fu_247_p2() {
    or_ln8_2_fu_247_p2 = (icmp_ln8_5_reg_303.read() | icmp_ln8_4_reg_298.read());
}

void estimate_FR::thread_or_ln8_fu_178_p2() {
    or_ln8_fu_178_p2 = (icmp_ln8_1_reg_284.read() | icmp_ln8_reg_279.read());
}

void estimate_FR::thread_tmp_2_fu_135_p4() {
    tmp_2_fu_135_p4 = bitcast_ln8_fu_131_p1.read().range(62, 52);
}

void estimate_FR::thread_tmp_5_fu_164_p4() {
    tmp_5_fu_164_p4 = bitcast_ln8_1_fu_161_p1.read().range(62, 52);
}

void estimate_FR::thread_tmp_8_fu_221_p4() {
    tmp_8_fu_221_p4 = bitcast_ln8_2_fu_217_p1.read().range(62, 52);
}

void estimate_FR::thread_trunc_ln8_1_fu_174_p1() {
    trunc_ln8_1_fu_174_p1 = bitcast_ln8_1_fu_161_p1.read().range(52-1, 0);
}

void estimate_FR::thread_trunc_ln8_2_fu_231_p1() {
    trunc_ln8_2_fu_231_p1 = bitcast_ln8_2_fu_217_p1.read().range(52-1, 0);
}

void estimate_FR::thread_trunc_ln8_fu_145_p1() {
    trunc_ln8_fu_145_p1 = bitcast_ln8_fu_131_p1.read().range(52-1, 0);
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(finish_read_read_fu_60_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(finish_read_read_fu_60_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(and_ln8_1_fu_206_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state32;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(and_ln8_2_fu_251_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state32;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state57;
            break;
        case 72057594037927936 : 
            ap_NS_fsm = ap_ST_fsm_state58;
            break;
        case 144115188075855872 : 
            ap_NS_fsm = ap_ST_fsm_state59;
            break;
        case 288230376151711744 : 
            ap_NS_fsm = ap_ST_fsm_state60;
            break;
        case 576460752303423488 : 
            ap_NS_fsm = ap_ST_fsm_state61;
            break;
        case 1152921504606846976 : 
            ap_NS_fsm = ap_ST_fsm_state62;
            break;
        case 2305843009213693952 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<62>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime\" :  \"" << spksTime.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR\" :  \"" << FR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_ap_vld\" :  \"" << FR_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_i\" :  \"" << c_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_o\" :  \"" << c_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_o_ap_vld\" :  \"" << c_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Num\" :  \"" << Num.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"finish_i\" :  \"" << finish_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finish_o\" :  \"" << finish_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finish_o_ap_vld\" :  \"" << finish_o_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

