// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=2305,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=4179,HLS_SYN_LUT=5742,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [6:0] spks_address0;
reg    spks_ce0;
wire   [31:0] spks_q0;
wire   [31:0] update;
reg   [6:0] counts_address0;
reg    counts_ce0;
reg    counts_we0;
reg   [31:0] counts_d0;
wire   [31:0] counts_q0;
wire   [6:0] outputs_address0;
reg    outputs_ce0;
reg    outputs_we0;
wire   [31:0] outputs_d0;
wire   [0:0] icmp_ln10_fu_162_p2;
reg   [0:0] icmp_ln10_reg_339;
wire   [6:0] i_fu_174_p2;
reg   [6:0] i_reg_346;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln7_fu_180_p1;
reg   [63:0] zext_ln7_reg_351;
wire   [0:0] icmp_ln6_fu_168_p2;
wire   [0:0] icmp_ln7_fu_185_p2;
reg   [0:0] icmp_ln7_reg_363;
wire    ap_CS_fsm_state3;
reg   [6:0] counts_addr_reg_367;
wire   [6:0] counts_addr_1_gep_fu_120_p3;
reg   [6:0] counts_addr_1_reg_372;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_158_p1;
reg   [63:0] tmp_reg_382;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_153_p2;
reg   [63:0] x_assign_reg_387;
wire    ap_CS_fsm_state42;
reg   [0:0] p_Result_s_reg_392;
wire    ap_CS_fsm_state43;
wire   [31:0] p_Val2_5_fu_319_p3;
reg   [31:0] p_Val2_5_reg_397;
reg   [6:0] i_0_reg_142;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln8_fu_191_p2;
wire    ap_CS_fsm_state12;
wire   [63:0] p_Val2_s_fu_198_p1;
wire   [51:0] tmp_V_1_fu_219_p1;
wire   [53:0] mantissa_V_fu_223_p4;
wire   [10:0] tmp_V_fu_209_p4;
wire   [11:0] zext_ln502_fu_237_p1;
wire   [11:0] add_ln502_fu_241_p2;
wire   [10:0] sub_ln1311_fu_255_p2;
wire   [0:0] isNeg_fu_247_p3;
wire  signed [11:0] sext_ln1311_fu_261_p1;
wire   [11:0] ush_fu_265_p3;
wire  signed [31:0] sext_ln1311_1_fu_273_p1;
wire   [53:0] zext_ln1285_fu_281_p1;
wire   [136:0] zext_ln682_fu_233_p1;
wire   [136:0] zext_ln1287_fu_277_p1;
wire   [53:0] r_V_fu_285_p2;
wire   [0:0] tmp_4_fu_297_p3;
wire   [136:0] r_V_1_fu_291_p2;
wire   [31:0] zext_ln662_fu_305_p1;
wire   [31:0] tmp_2_fu_309_p4;
wire   [31:0] result_V_1_fu_327_p2;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

estimate_FR_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
estimate_FR_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .spks_address0(spks_address0),
    .spks_ce0(spks_ce0),
    .spks_q0(spks_q0),
    .update(update),
    .counts_address0(counts_address0),
    .counts_ce0(counts_ce0),
    .counts_we0(counts_we0),
    .counts_d0(counts_d0),
    .counts_q0(counts_q0),
    .outputs_address0(outputs_address0),
    .outputs_ce0(outputs_ce0),
    .outputs_we0(outputs_we0),
    .outputs_d0(outputs_d0)
);

estimate_FR_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_ddiv_64ns_64ns_64_31_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_382),
    .din1(64'd4596373779694328218),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

estimate_FR_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
estimate_FR_sitodp_32ns_64_6_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(counts_q0),
    .ce(1'b1),
    .dout(grp_fu_158_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_0_reg_142 <= i_reg_346;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        counts_addr_1_reg_372 <= zext_ln7_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln7_fu_185_p2 == 1'd1))) begin
        counts_addr_reg_367 <= zext_ln7_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_346 <= i_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln10_reg_339 <= icmp_ln10_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln7_reg_363 <= icmp_ln7_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        p_Result_s_reg_392 <= p_Val2_s_fu_198_p1[32'd63];
        p_Val2_5_reg_397 <= p_Val2_5_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_reg_382 <= grp_fu_158_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        x_assign_reg_387 <= grp_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_168_p2 == 1'd0))) begin
        zext_ln7_reg_351[6 : 0] <= zext_ln7_fu_180_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_168_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_168_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        counts_address0 = counts_addr_1_reg_372;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        counts_address0 = counts_addr_1_gep_fu_120_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        counts_address0 = counts_addr_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        counts_address0 = zext_ln7_reg_351;
    end else begin
        counts_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        counts_ce0 = 1'b1;
    end else begin
        counts_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        counts_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        counts_d0 = add_ln8_fu_191_p2;
    end else begin
        counts_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln7_reg_363 == 1'd1)))) begin
        counts_we0 = 1'b1;
    end else begin
        counts_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        outputs_ce0 = 1'b1;
    end else begin
        outputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln10_reg_339 == 1'd1))) begin
        outputs_we0 = 1'b1;
    end else begin
        outputs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spks_ce0 = 1'b1;
    end else begin
        spks_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_168_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln10_reg_339 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln502_fu_241_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_237_p1));

assign add_ln8_fu_191_p2 = (counts_q0 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign counts_addr_1_gep_fu_120_p3 = zext_ln7_reg_351;

assign i_fu_174_p2 = (i_0_reg_142 + 7'd1);

assign icmp_ln10_fu_162_p2 = ((update == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_168_p2 = ((i_0_reg_142 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_185_p2 = ((spks_q0 == 32'd1) ? 1'b1 : 1'b0);

assign isNeg_fu_247_p3 = add_ln502_fu_241_p2[32'd11];

assign mantissa_V_fu_223_p4 = {{{{1'd1}, {tmp_V_1_fu_219_p1}}}, {1'd0}};

assign outputs_address0 = zext_ln7_reg_351;

assign outputs_d0 = ((p_Result_s_reg_392[0:0] === 1'b1) ? result_V_1_fu_327_p2 : p_Val2_5_reg_397);

assign p_Val2_5_fu_319_p3 = ((isNeg_fu_247_p3[0:0] === 1'b1) ? zext_ln662_fu_305_p1 : tmp_2_fu_309_p4);

assign p_Val2_s_fu_198_p1 = x_assign_reg_387;

assign r_V_1_fu_291_p2 = zext_ln682_fu_233_p1 << zext_ln1287_fu_277_p1;

assign r_V_fu_285_p2 = mantissa_V_fu_223_p4 >> zext_ln1285_fu_281_p1;

assign result_V_1_fu_327_p2 = (32'd0 - p_Val2_5_reg_397);

assign sext_ln1311_1_fu_273_p1 = $signed(ush_fu_265_p3);

assign sext_ln1311_fu_261_p1 = $signed(sub_ln1311_fu_255_p2);

assign spks_address0 = zext_ln7_fu_180_p1;

assign sub_ln1311_fu_255_p2 = (11'd1023 - tmp_V_fu_209_p4);

assign tmp_2_fu_309_p4 = {{r_V_1_fu_291_p2[84:53]}};

assign tmp_4_fu_297_p3 = r_V_fu_285_p2[32'd53];

assign tmp_V_1_fu_219_p1 = p_Val2_s_fu_198_p1[51:0];

assign tmp_V_fu_209_p4 = {{p_Val2_s_fu_198_p1[62:52]}};

assign ush_fu_265_p3 = ((isNeg_fu_247_p3[0:0] === 1'b1) ? sext_ln1311_fu_261_p1 : add_ln502_fu_241_p2);

assign zext_ln1285_fu_281_p1 = $unsigned(sext_ln1311_1_fu_273_p1);

assign zext_ln1287_fu_277_p1 = $unsigned(sext_ln1311_1_fu_273_p1);

assign zext_ln502_fu_237_p1 = tmp_V_fu_209_p4;

assign zext_ln662_fu_305_p1 = tmp_4_fu_297_p3;

assign zext_ln682_fu_233_p1 = mantissa_V_fu_223_p4;

assign zext_ln7_fu_180_p1 = i_0_reg_142;

always @ (posedge ap_clk) begin
    zext_ln7_reg_351[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_FR
