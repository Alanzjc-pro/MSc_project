// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<44> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<44> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<44> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<44> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state5 = "10000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state6 = "100000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state7 = "1000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state8 = "10000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state9 = "100000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state10 = "1000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state11 = "10000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state12 = "100000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<44> estimate_FR::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const int estimate_FR::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_FR::ap_const_lv32_2 = "10";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_4 = "100";
const sc_lv<32> estimate_FR::ap_const_lv32_5 = "101";
const sc_lv<32> estimate_FR::ap_const_lv32_A = "1010";
const sc_lv<32> estimate_FR::ap_const_lv32_29 = "101001";
const sc_lv<32> estimate_FR::ap_const_lv32_2A = "101010";
const sc_lv<7> estimate_FR::ap_const_lv7_0 = "0000000";
const sc_lv<32> estimate_FR::ap_const_lv32_2B = "101011";
const sc_lv<32> estimate_FR::ap_const_lv32_3 = "11";
const sc_lv<64> estimate_FR::ap_const_lv64_3FC999999999999A = "11111111001001100110011001100110011001100110011001100110011010";
const sc_lv<32> estimate_FR::ap_const_lv32_B = "1011";
const sc_lv<7> estimate_FR::ap_const_lv7_60 = "1100000";
const sc_lv<7> estimate_FR::ap_const_lv7_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_3F = "111111";
const sc_lv<32> estimate_FR::ap_const_lv32_34 = "110100";
const sc_lv<32> estimate_FR::ap_const_lv32_3E = "111110";
const sc_lv<12> estimate_FR::ap_const_lv12_C01 = "110000000001";
const sc_lv<11> estimate_FR::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> estimate_FR::ap_const_lv32_35 = "110101";
const sc_lv<32> estimate_FR::ap_const_lv32_54 = "1010100";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_FR_AXILiteS_s_axi_U = new estimate_FR_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("estimate_FR_AXILiteS_s_axi_U");
    estimate_FR_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    estimate_FR_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    estimate_FR_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    estimate_FR_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    estimate_FR_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    estimate_FR_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    estimate_FR_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    estimate_FR_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    estimate_FR_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    estimate_FR_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    estimate_FR_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    estimate_FR_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    estimate_FR_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    estimate_FR_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    estimate_FR_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    estimate_FR_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    estimate_FR_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    estimate_FR_AXILiteS_s_axi_U->ACLK(ap_clk);
    estimate_FR_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    estimate_FR_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    estimate_FR_AXILiteS_s_axi_U->ap_start(ap_start);
    estimate_FR_AXILiteS_s_axi_U->interrupt(interrupt);
    estimate_FR_AXILiteS_s_axi_U->ap_ready(ap_ready);
    estimate_FR_AXILiteS_s_axi_U->ap_done(ap_done);
    estimate_FR_AXILiteS_s_axi_U->ap_idle(ap_idle);
    estimate_FR_AXILiteS_s_axi_U->spks_address0(spks_address0);
    estimate_FR_AXILiteS_s_axi_U->spks_ce0(spks_ce0);
    estimate_FR_AXILiteS_s_axi_U->spks_q0(spks_q0);
    estimate_FR_AXILiteS_s_axi_U->update(update);
    estimate_FR_AXILiteS_s_axi_U->counts_address0(counts_address0);
    estimate_FR_AXILiteS_s_axi_U->counts_ce0(counts_ce0);
    estimate_FR_AXILiteS_s_axi_U->counts_we0(counts_we0);
    estimate_FR_AXILiteS_s_axi_U->counts_d0(counts_d0);
    estimate_FR_AXILiteS_s_axi_U->counts_q0(counts_q0);
    estimate_FR_AXILiteS_s_axi_U->outputs_address0(outputs_address0);
    estimate_FR_AXILiteS_s_axi_U->outputs_ce0(outputs_ce0);
    estimate_FR_AXILiteS_s_axi_U->outputs_we0(outputs_we0);
    estimate_FR_AXILiteS_s_axi_U->outputs_d0(outputs_d0);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1 = new estimate_FR_ddiv_64ns_64ns_64_31_1<1,31,64,64,64>("estimate_FR_ddiv_64ns_64ns_64_31_1_U1");
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->clk(ap_clk);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->reset(ap_rst_n_inv);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->din0(tmp_reg_382);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->din1(ap_var_for_const1);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->ce(ap_var_for_const0);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U1->dout(grp_fu_153_p2);
    estimate_FR_sitodp_32ns_64_6_1_U2 = new estimate_FR_sitodp_32ns_64_6_1<1,6,32,64>("estimate_FR_sitodp_32ns_64_6_1_U2");
    estimate_FR_sitodp_32ns_64_6_1_U2->clk(ap_clk);
    estimate_FR_sitodp_32ns_64_6_1_U2->reset(ap_rst_n_inv);
    estimate_FR_sitodp_32ns_64_6_1_U2->din0(counts_q0);
    estimate_FR_sitodp_32ns_64_6_1_U2->ce(ap_var_for_const0);
    estimate_FR_sitodp_32ns_64_6_1_U2->dout(grp_fu_158_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln502_fu_241_p2);
    sensitive << ( zext_ln502_fu_237_p1 );

    SC_METHOD(thread_add_ln8_fu_191_p2);
    sensitive << ( counts_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_168_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_168_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_counts_addr_1_gep_fu_120_p3);
    sensitive << ( zext_ln7_reg_351 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_counts_address0);
    sensitive << ( zext_ln7_reg_351 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( counts_addr_reg_367 );
    sensitive << ( counts_addr_1_gep_fu_120_p3 );
    sensitive << ( counts_addr_1_reg_372 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_counts_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_counts_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( add_ln8_fu_191_p2 );

    SC_METHOD(thread_counts_we0);
    sensitive << ( icmp_ln7_reg_363 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_fu_174_p2);
    sensitive << ( i_0_reg_142 );

    SC_METHOD(thread_icmp_ln10_fu_162_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( update );

    SC_METHOD(thread_icmp_ln6_fu_168_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_142 );

    SC_METHOD(thread_icmp_ln7_fu_185_p2);
    sensitive << ( spks_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_isNeg_fu_247_p3);
    sensitive << ( add_ln502_fu_241_p2 );

    SC_METHOD(thread_mantissa_V_fu_223_p4);
    sensitive << ( tmp_V_1_fu_219_p1 );

    SC_METHOD(thread_outputs_address0);
    sensitive << ( zext_ln7_reg_351 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_outputs_ce0);
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_outputs_d0);
    sensitive << ( p_Result_s_reg_392 );
    sensitive << ( p_Val2_5_reg_397 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( result_V_1_fu_327_p2 );

    SC_METHOD(thread_outputs_we0);
    sensitive << ( icmp_ln10_reg_339 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_p_Val2_5_fu_319_p3);
    sensitive << ( isNeg_fu_247_p3 );
    sensitive << ( zext_ln662_fu_305_p1 );
    sensitive << ( tmp_2_fu_309_p4 );

    SC_METHOD(thread_p_Val2_s_fu_198_p1);
    sensitive << ( x_assign_reg_387 );

    SC_METHOD(thread_r_V_1_fu_291_p2);
    sensitive << ( zext_ln682_fu_233_p1 );
    sensitive << ( zext_ln1287_fu_277_p1 );

    SC_METHOD(thread_r_V_fu_285_p2);
    sensitive << ( mantissa_V_fu_223_p4 );
    sensitive << ( zext_ln1285_fu_281_p1 );

    SC_METHOD(thread_result_V_1_fu_327_p2);
    sensitive << ( p_Val2_5_reg_397 );

    SC_METHOD(thread_sext_ln1311_1_fu_273_p1);
    sensitive << ( ush_fu_265_p3 );

    SC_METHOD(thread_sext_ln1311_fu_261_p1);
    sensitive << ( sub_ln1311_fu_255_p2 );

    SC_METHOD(thread_spks_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln7_fu_180_p1 );

    SC_METHOD(thread_spks_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sub_ln1311_fu_255_p2);
    sensitive << ( tmp_V_fu_209_p4 );

    SC_METHOD(thread_tmp_2_fu_309_p4);
    sensitive << ( r_V_1_fu_291_p2 );

    SC_METHOD(thread_tmp_4_fu_297_p3);
    sensitive << ( r_V_fu_285_p2 );

    SC_METHOD(thread_tmp_V_1_fu_219_p1);
    sensitive << ( p_Val2_s_fu_198_p1 );

    SC_METHOD(thread_tmp_V_fu_209_p4);
    sensitive << ( p_Val2_s_fu_198_p1 );

    SC_METHOD(thread_ush_fu_265_p3);
    sensitive << ( add_ln502_fu_241_p2 );
    sensitive << ( isNeg_fu_247_p3 );
    sensitive << ( sext_ln1311_fu_261_p1 );

    SC_METHOD(thread_zext_ln1285_fu_281_p1);
    sensitive << ( sext_ln1311_1_fu_273_p1 );

    SC_METHOD(thread_zext_ln1287_fu_277_p1);
    sensitive << ( sext_ln1311_1_fu_273_p1 );

    SC_METHOD(thread_zext_ln502_fu_237_p1);
    sensitive << ( tmp_V_fu_209_p4 );

    SC_METHOD(thread_zext_ln662_fu_305_p1);
    sensitive << ( tmp_4_fu_297_p3 );

    SC_METHOD(thread_zext_ln682_fu_233_p1);
    sensitive << ( mantissa_V_fu_223_p4 );

    SC_METHOD(thread_zext_ln7_fu_180_p1);
    sensitive << ( i_0_reg_142 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln10_reg_339 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_168_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, spks_address0, "spks_address0");
    sc_trace(mVcdFile, spks_ce0, "spks_ce0");
    sc_trace(mVcdFile, spks_q0, "spks_q0");
    sc_trace(mVcdFile, update, "update");
    sc_trace(mVcdFile, counts_address0, "counts_address0");
    sc_trace(mVcdFile, counts_ce0, "counts_ce0");
    sc_trace(mVcdFile, counts_we0, "counts_we0");
    sc_trace(mVcdFile, counts_d0, "counts_d0");
    sc_trace(mVcdFile, counts_q0, "counts_q0");
    sc_trace(mVcdFile, outputs_address0, "outputs_address0");
    sc_trace(mVcdFile, outputs_ce0, "outputs_ce0");
    sc_trace(mVcdFile, outputs_we0, "outputs_we0");
    sc_trace(mVcdFile, outputs_d0, "outputs_d0");
    sc_trace(mVcdFile, icmp_ln10_fu_162_p2, "icmp_ln10_fu_162_p2");
    sc_trace(mVcdFile, icmp_ln10_reg_339, "icmp_ln10_reg_339");
    sc_trace(mVcdFile, i_fu_174_p2, "i_fu_174_p2");
    sc_trace(mVcdFile, i_reg_346, "i_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln7_fu_180_p1, "zext_ln7_fu_180_p1");
    sc_trace(mVcdFile, zext_ln7_reg_351, "zext_ln7_reg_351");
    sc_trace(mVcdFile, icmp_ln6_fu_168_p2, "icmp_ln6_fu_168_p2");
    sc_trace(mVcdFile, icmp_ln7_fu_185_p2, "icmp_ln7_fu_185_p2");
    sc_trace(mVcdFile, icmp_ln7_reg_363, "icmp_ln7_reg_363");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, counts_addr_reg_367, "counts_addr_reg_367");
    sc_trace(mVcdFile, counts_addr_1_gep_fu_120_p3, "counts_addr_1_gep_fu_120_p3");
    sc_trace(mVcdFile, counts_addr_1_reg_372, "counts_addr_1_reg_372");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_158_p1, "grp_fu_158_p1");
    sc_trace(mVcdFile, tmp_reg_382, "tmp_reg_382");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_153_p2, "grp_fu_153_p2");
    sc_trace(mVcdFile, x_assign_reg_387, "x_assign_reg_387");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, p_Result_s_reg_392, "p_Result_s_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, p_Val2_5_fu_319_p3, "p_Val2_5_fu_319_p3");
    sc_trace(mVcdFile, p_Val2_5_reg_397, "p_Val2_5_reg_397");
    sc_trace(mVcdFile, i_0_reg_142, "i_0_reg_142");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, add_ln8_fu_191_p2, "add_ln8_fu_191_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, p_Val2_s_fu_198_p1, "p_Val2_s_fu_198_p1");
    sc_trace(mVcdFile, tmp_V_1_fu_219_p1, "tmp_V_1_fu_219_p1");
    sc_trace(mVcdFile, mantissa_V_fu_223_p4, "mantissa_V_fu_223_p4");
    sc_trace(mVcdFile, tmp_V_fu_209_p4, "tmp_V_fu_209_p4");
    sc_trace(mVcdFile, zext_ln502_fu_237_p1, "zext_ln502_fu_237_p1");
    sc_trace(mVcdFile, add_ln502_fu_241_p2, "add_ln502_fu_241_p2");
    sc_trace(mVcdFile, sub_ln1311_fu_255_p2, "sub_ln1311_fu_255_p2");
    sc_trace(mVcdFile, isNeg_fu_247_p3, "isNeg_fu_247_p3");
    sc_trace(mVcdFile, sext_ln1311_fu_261_p1, "sext_ln1311_fu_261_p1");
    sc_trace(mVcdFile, ush_fu_265_p3, "ush_fu_265_p3");
    sc_trace(mVcdFile, sext_ln1311_1_fu_273_p1, "sext_ln1311_1_fu_273_p1");
    sc_trace(mVcdFile, zext_ln1285_fu_281_p1, "zext_ln1285_fu_281_p1");
    sc_trace(mVcdFile, zext_ln682_fu_233_p1, "zext_ln682_fu_233_p1");
    sc_trace(mVcdFile, zext_ln1287_fu_277_p1, "zext_ln1287_fu_277_p1");
    sc_trace(mVcdFile, r_V_fu_285_p2, "r_V_fu_285_p2");
    sc_trace(mVcdFile, tmp_4_fu_297_p3, "tmp_4_fu_297_p3");
    sc_trace(mVcdFile, r_V_1_fu_291_p2, "r_V_1_fu_291_p2");
    sc_trace(mVcdFile, zext_ln662_fu_305_p1, "zext_ln662_fu_305_p1");
    sc_trace(mVcdFile, tmp_2_fu_309_p4, "tmp_2_fu_309_p4");
    sc_trace(mVcdFile, result_V_1_fu_327_p2, "result_V_1_fu_327_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_FR_AXILiteS_s_axi_U;
    delete estimate_FR_ddiv_64ns_64ns_64_31_1_U1;
    delete estimate_FR_sitodp_32ns_64_6_1_U2;
}

void estimate_FR::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void estimate_FR::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_3FC999999999999A;
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        i_0_reg_142 = i_reg_346.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_142 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        counts_addr_1_reg_372 =  (sc_lv<7>) (zext_ln7_reg_351.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_185_p2.read(), ap_const_lv1_1))) {
        counts_addr_reg_367 =  (sc_lv<7>) (zext_ln7_reg_351.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_346 = i_fu_174_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln10_reg_339 = icmp_ln10_fu_162_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        icmp_ln7_reg_363 = icmp_ln7_fu_185_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        p_Result_s_reg_392 = p_Val2_s_fu_198_p1.read().range(63, 63);
        p_Val2_5_reg_397 = p_Val2_5_fu_319_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_reg_382 = grp_fu_158_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        x_assign_reg_387 = grp_fu_153_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_168_p2.read(), ap_const_lv1_0))) {
        zext_ln7_reg_351 = zext_ln7_fu_180_p1.read();
    }
}

void estimate_FR::thread_add_ln502_fu_241_p2() {
    add_ln502_fu_241_p2 = (!ap_const_lv12_C01.is_01() || !zext_ln502_fu_237_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(zext_ln502_fu_237_p1.read()));
}

void estimate_FR::thread_add_ln8_fu_191_p2() {
    add_ln8_fu_191_p2 = (!counts_q0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(counts_q0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void estimate_FR::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void estimate_FR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_FR::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void estimate_FR::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void estimate_FR::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void estimate_FR::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void estimate_FR::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void estimate_FR::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void estimate_FR::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void estimate_FR::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_168_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_168_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void estimate_FR::thread_counts_addr_1_gep_fu_120_p3() {
    counts_addr_1_gep_fu_120_p3 =  (sc_lv<7>) (zext_ln7_reg_351.read());
}

void estimate_FR::thread_counts_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        counts_address0 = counts_addr_1_reg_372.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        counts_address0 = counts_addr_1_gep_fu_120_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        counts_address0 = counts_addr_reg_367.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        counts_address0 =  (sc_lv<7>) (zext_ln7_reg_351.read());
    } else {
        counts_address0 = "XXXXXXX";
    }
}

void estimate_FR::thread_counts_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        counts_ce0 = ap_const_logic_1;
    } else {
        counts_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_counts_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        counts_d0 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        counts_d0 = add_ln8_fu_191_p2.read();
    } else {
        counts_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void estimate_FR::thread_counts_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln7_reg_363.read(), ap_const_lv1_1)))) {
        counts_we0 = ap_const_logic_1;
    } else {
        counts_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_i_fu_174_p2() {
    i_fu_174_p2 = (!i_0_reg_142.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_142.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void estimate_FR::thread_icmp_ln10_fu_162_p2() {
    icmp_ln10_fu_162_p2 = (!update.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(update.read() == ap_const_lv32_1);
}

void estimate_FR::thread_icmp_ln6_fu_168_p2() {
    icmp_ln6_fu_168_p2 = (!i_0_reg_142.read().is_01() || !ap_const_lv7_60.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_142.read() == ap_const_lv7_60);
}

void estimate_FR::thread_icmp_ln7_fu_185_p2() {
    icmp_ln7_fu_185_p2 = (!spks_q0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(spks_q0.read() == ap_const_lv32_1);
}

void estimate_FR::thread_isNeg_fu_247_p3() {
    isNeg_fu_247_p3 = add_ln502_fu_241_p2.read().range(11, 11);
}

void estimate_FR::thread_mantissa_V_fu_223_p4() {
    mantissa_V_fu_223_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, tmp_V_1_fu_219_p1.read()), ap_const_lv1_0);
}

void estimate_FR::thread_outputs_address0() {
    outputs_address0 =  (sc_lv<7>) (zext_ln7_reg_351.read());
}

void estimate_FR::thread_outputs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        outputs_ce0 = ap_const_logic_1;
    } else {
        outputs_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_outputs_d0() {
    outputs_d0 = (!p_Result_s_reg_392.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_reg_392.read()[0].to_bool())? result_V_1_fu_327_p2.read(): p_Val2_5_reg_397.read());
}

void estimate_FR::thread_outputs_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_reg_339.read(), ap_const_lv1_1))) {
        outputs_we0 = ap_const_logic_1;
    } else {
        outputs_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_p_Val2_5_fu_319_p3() {
    p_Val2_5_fu_319_p3 = (!isNeg_fu_247_p3.read()[0].is_01())? sc_lv<32>(): ((isNeg_fu_247_p3.read()[0].to_bool())? zext_ln662_fu_305_p1.read(): tmp_2_fu_309_p4.read());
}

void estimate_FR::thread_p_Val2_s_fu_198_p1() {
    p_Val2_s_fu_198_p1 = x_assign_reg_387.read();
}

void estimate_FR::thread_r_V_1_fu_291_p2() {
    r_V_1_fu_291_p2 = (!zext_ln1287_fu_277_p1.read().is_01())? sc_lv<137>(): zext_ln682_fu_233_p1.read() << (unsigned short)zext_ln1287_fu_277_p1.read().to_uint();
}

void estimate_FR::thread_r_V_fu_285_p2() {
    r_V_fu_285_p2 = (!zext_ln1285_fu_281_p1.read().is_01())? sc_lv<54>(): mantissa_V_fu_223_p4.read() >> (unsigned short)zext_ln1285_fu_281_p1.read().to_uint();
}

void estimate_FR::thread_result_V_1_fu_327_p2() {
    result_V_1_fu_327_p2 = (!ap_const_lv32_0.is_01() || !p_Val2_5_reg_397.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_Val2_5_reg_397.read()));
}

void estimate_FR::thread_sext_ln1311_1_fu_273_p1() {
    sext_ln1311_1_fu_273_p1 = esl_sext<32,12>(ush_fu_265_p3.read());
}

void estimate_FR::thread_sext_ln1311_fu_261_p1() {
    sext_ln1311_fu_261_p1 = esl_sext<12,11>(sub_ln1311_fu_255_p2.read());
}

void estimate_FR::thread_spks_address0() {
    spks_address0 =  (sc_lv<7>) (zext_ln7_fu_180_p1.read());
}

void estimate_FR::thread_spks_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        spks_ce0 = ap_const_logic_1;
    } else {
        spks_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_sub_ln1311_fu_255_p2() {
    sub_ln1311_fu_255_p2 = (!ap_const_lv11_3FF.is_01() || !tmp_V_fu_209_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(tmp_V_fu_209_p4.read()));
}

void estimate_FR::thread_tmp_2_fu_309_p4() {
    tmp_2_fu_309_p4 = r_V_1_fu_291_p2.read().range(84, 53);
}

void estimate_FR::thread_tmp_4_fu_297_p3() {
    tmp_4_fu_297_p3 = r_V_fu_285_p2.read().range(53, 53);
}

void estimate_FR::thread_tmp_V_1_fu_219_p1() {
    tmp_V_1_fu_219_p1 = p_Val2_s_fu_198_p1.read().range(52-1, 0);
}

void estimate_FR::thread_tmp_V_fu_209_p4() {
    tmp_V_fu_209_p4 = p_Val2_s_fu_198_p1.read().range(62, 52);
}

void estimate_FR::thread_ush_fu_265_p3() {
    ush_fu_265_p3 = (!isNeg_fu_247_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_247_p3.read()[0].to_bool())? sext_ln1311_fu_261_p1.read(): add_ln502_fu_241_p2.read());
}

void estimate_FR::thread_zext_ln1285_fu_281_p1() {
    zext_ln1285_fu_281_p1 = esl_zext<54,32>(sext_ln1311_1_fu_273_p1.read());
}

void estimate_FR::thread_zext_ln1287_fu_277_p1() {
    zext_ln1287_fu_277_p1 = esl_zext<137,32>(sext_ln1311_1_fu_273_p1.read());
}

void estimate_FR::thread_zext_ln502_fu_237_p1() {
    zext_ln502_fu_237_p1 = esl_zext<12,11>(tmp_V_fu_209_p4.read());
}

void estimate_FR::thread_zext_ln662_fu_305_p1() {
    zext_ln662_fu_305_p1 = esl_zext<32,1>(tmp_4_fu_297_p3.read());
}

void estimate_FR::thread_zext_ln682_fu_233_p1() {
    zext_ln682_fu_233_p1 = esl_zext<137,54>(mantissa_V_fu_223_p4.read());
}

void estimate_FR::thread_zext_ln7_fu_180_p1() {
    zext_ln7_fu_180_p1 = esl_zext<64,7>(i_0_reg_142.read());
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_168_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln10_reg_339.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state44;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<44>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

