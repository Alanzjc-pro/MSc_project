// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<54> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<54> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<54> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<54> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state5 = "10000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state6 = "100000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state7 = "1000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state8 = "10000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state9 = "100000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state10 = "1000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state11 = "10000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state12 = "100000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<54> estimate_FR::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> estimate_FR::ap_const_lv32_6 = "110";
const sc_lv<32> estimate_FR::ap_const_lv32_15 = "10101";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_FR::ap_const_lv32_C = "1100";
const sc_lv<32> estimate_FR::ap_const_lv32_D = "1101";
const sc_lv<32> estimate_FR::ap_const_lv32_E = "1110";
const sc_lv<32> estimate_FR::ap_const_lv32_F = "1111";
const sc_lv<32> estimate_FR::ap_const_lv32_10 = "10000";
const sc_lv<32> estimate_FR::ap_const_lv32_34 = "110100";
const sc_lv<8> estimate_FR::ap_const_lv8_0 = "00000000";
const sc_lv<32> estimate_FR::ap_const_lv32_35 = "110101";
const sc_lv<7> estimate_FR::ap_const_lv7_0 = "0000000";
const sc_lv<64> estimate_FR::ap_const_lv64_3FB999999999999A = "11111110111001100110011001100110011001100110011001100110011010";
const sc_lv<32> estimate_FR::ap_const_lv32_7 = "111";
const sc_lv<32> estimate_FR::ap_const_lv32_16 = "10110";
const sc_lv<8> estimate_FR::ap_const_lv8_C8 = "11001000";
const sc_lv<8> estimate_FR::ap_const_lv8_1 = "1";
const sc_lv<52> estimate_FR::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<7> estimate_FR::ap_const_lv7_4B = "1001011";
const sc_lv<7> estimate_FR::ap_const_lv7_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_3E = "111110";
const sc_lv<11> estimate_FR::ap_const_lv11_7FF = "11111111111";
const sc_lv<5> estimate_FR::ap_const_lv5_3 = "11";
const sc_lv<5> estimate_FR::ap_const_lv5_5 = "101";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1 = new estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1<1,6,64,64,64>("estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1");
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->clk(ap_clk);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->reset(ap_rst);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->din0(reg_139);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->din1(ap_var_for_const0);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->ce(ap_var_for_const1);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1->dout(grp_fu_107_p2);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2 = new estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1<1,6,64,64,64>("estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2");
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->clk(ap_clk);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->reset(ap_rst);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->din0(tmp_2_reg_349);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->din1(ap_var_for_const0);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->ce(ap_var_for_const1);
    estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2->dout(grp_fu_112_p2);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3 = new estimate_FR_ddiv_64ns_64ns_64_31_1<1,31,64,64,64>("estimate_FR_ddiv_64ns_64ns_64_31_1_U3");
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->clk(ap_clk);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->reset(ap_rst);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->din0(reg_139);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->din1(ap_var_for_const0);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->ce(ap_var_for_const1);
    estimate_FR_ddiv_64ns_64ns_64_31_1_U3->dout(grp_fu_117_p2);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4 = new estimate_FR_dcmp_64ns_64ns_1_2_1<1,2,64,64,1>("estimate_FR_dcmp_64ns_64ns_1_2_1_U4");
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->clk(ap_clk);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->reset(ap_rst);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->din0(spksTime_q0);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->din1(tmp_1_reg_354);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->ce(ap_var_for_const1);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->opcode(ap_var_for_const2);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U4->dout(grp_fu_122_p2);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5 = new estimate_FR_dcmp_64ns_64ns_1_2_1<1,2,64,64,1>("estimate_FR_dcmp_64ns_64ns_1_2_1_U5");
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->clk(ap_clk);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->reset(ap_rst);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->din0(spksTime_q0);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->din1(tmp_3_reg_360);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->ce(ap_var_for_const1);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->opcode(ap_var_for_const3);
    estimate_FR_dcmp_64ns_64ns_1_2_1_U5->dout(grp_fu_127_p2);
    estimate_FR_sitodp_32ns_64_6_1_U6 = new estimate_FR_sitodp_32ns_64_6_1<1,6,32,64>("estimate_FR_sitodp_32ns_64_6_1_U6");
    estimate_FR_sitodp_32ns_64_6_1_U6->clk(ap_clk);
    estimate_FR_sitodp_32ns_64_6_1_U6->reset(ap_rst);
    estimate_FR_sitodp_32ns_64_6_1_U6->din0(grp_fu_132_p0);
    estimate_FR_sitodp_32ns_64_6_1_U6->ce(ap_var_for_const1);
    estimate_FR_sitodp_32ns_64_6_1_U6->dout(grp_fu_132_p1);
    estimate_FR_sitodp_32ns_64_6_1_U7 = new estimate_FR_sitodp_32ns_64_6_1<1,6,32,64>("estimate_FR_sitodp_32ns_64_6_1_U7");
    estimate_FR_sitodp_32ns_64_6_1_U7->clk(ap_clk);
    estimate_FR_sitodp_32ns_64_6_1_U7->reset(ap_rst);
    estimate_FR_sitodp_32ns_64_6_1_U7->din0(grp_fu_135_p0);
    estimate_FR_sitodp_32ns_64_6_1_U7->ce(ap_var_for_const1);
    estimate_FR_sitodp_32ns_64_6_1_U7->dout(grp_fu_135_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FR_address0);
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( zext_ln14_fu_326_p1 );

    SC_METHOD(thread_FR_ce0);
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_FR_d0);
    sensitive << ( tmp_5_reg_426 );
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_FR_we0);
    sensitive << ( ap_CS_fsm_state54 );

    SC_METHOD(thread_and_ln10_1_fu_285_p2);
    sensitive << ( and_ln10_fu_280_p2 );
    sensitive << ( grp_fu_122_p2 );

    SC_METHOD(thread_and_ln10_2_fu_295_p2);
    sensitive << ( or_ln10_reg_415 );
    sensitive << ( or_ln10_2_fu_291_p2 );

    SC_METHOD(thread_and_ln10_3_fu_300_p2);
    sensitive << ( and_ln10_2_fu_295_p2 );
    sensitive << ( grp_fu_127_p2 );

    SC_METHOD(thread_and_ln10_4_fu_306_p2);
    sensitive << ( and_ln10_1_fu_285_p2 );
    sensitive << ( and_ln10_3_fu_300_p2 );

    SC_METHOD(thread_and_ln10_fu_280_p2);
    sensitive << ( or_ln10_reg_415 );
    sensitive << ( or_ln10_1_fu_276_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_150_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_150_p2 );

    SC_METHOD(thread_bitcast_ln10_1_fu_167_p1);
    sensitive << ( tmp_1_reg_354 );

    SC_METHOD(thread_bitcast_ln10_2_fu_180_p1);
    sensitive << ( tmp_3_reg_360 );

    SC_METHOD(thread_bitcast_ln10_fu_240_p1);
    sensitive << ( spksTime_q0 );

    SC_METHOD(thread_count_2_fu_318_p3);
    sensitive << ( count_1_reg_84 );
    sensitive << ( and_ln10_4_fu_306_p2 );
    sensitive << ( count_fu_312_p2 );

    SC_METHOD(thread_count_fu_312_p2);
    sensitive << ( count_1_reg_84 );

    SC_METHOD(thread_grp_fu_132_p0);
    sensitive << ( zext_ln8_fu_145_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( count_1_reg_84 );

    SC_METHOD(thread_grp_fu_135_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_fu_156_p2 );

    SC_METHOD(thread_i_fu_156_p2);
    sensitive << ( i_0_reg_72 );

    SC_METHOD(thread_icmp_ln10_1_fu_264_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( trunc_ln10_2_fu_254_p1 );

    SC_METHOD(thread_icmp_ln10_2_fu_219_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln9_fu_193_p2 );
    sensitive << ( tmp_7_fu_210_p4 );

    SC_METHOD(thread_icmp_ln10_3_fu_174_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln10_fu_170_p1 );

    SC_METHOD(thread_icmp_ln10_4_fu_187_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln10_1_fu_183_p1 );

    SC_METHOD(thread_icmp_ln10_5_fu_234_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln9_fu_193_p2 );
    sensitive << ( tmp_s_fu_225_p4 );

    SC_METHOD(thread_icmp_ln10_fu_258_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_6_fu_244_p4 );

    SC_METHOD(thread_icmp_ln8_fu_150_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_72 );

    SC_METHOD(thread_icmp_ln9_fu_193_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( j_0_reg_96 );

    SC_METHOD(thread_j_fu_199_p2);
    sensitive << ( j_0_reg_96 );

    SC_METHOD(thread_or_ln10_1_fu_276_p2);
    sensitive << ( icmp_ln10_3_reg_371 );
    sensitive << ( icmp_ln10_2_reg_399 );

    SC_METHOD(thread_or_ln10_2_fu_291_p2);
    sensitive << ( icmp_ln10_4_reg_381 );
    sensitive << ( icmp_ln10_5_reg_404 );

    SC_METHOD(thread_or_ln10_fu_270_p2);
    sensitive << ( icmp_ln10_1_fu_264_p2 );
    sensitive << ( icmp_ln10_fu_258_p2 );

    SC_METHOD(thread_spksTime_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( zext_ln10_fu_205_p1 );

    SC_METHOD(thread_spksTime_ce0);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_tmp_6_fu_244_p4);
    sensitive << ( bitcast_ln10_fu_240_p1 );

    SC_METHOD(thread_tmp_7_fu_210_p4);
    sensitive << ( bitcast_ln10_1_reg_366 );

    SC_METHOD(thread_tmp_s_fu_225_p4);
    sensitive << ( bitcast_ln10_2_reg_376 );

    SC_METHOD(thread_trunc_ln10_1_fu_183_p1);
    sensitive << ( bitcast_ln10_2_fu_180_p1 );

    SC_METHOD(thread_trunc_ln10_2_fu_254_p1);
    sensitive << ( bitcast_ln10_fu_240_p1 );

    SC_METHOD(thread_trunc_ln10_fu_170_p1);
    sensitive << ( bitcast_ln10_1_fu_167_p1 );

    SC_METHOD(thread_zext_ln10_fu_205_p1);
    sensitive << ( j_0_reg_96 );

    SC_METHOD(thread_zext_ln14_fu_326_p1);
    sensitive << ( i_0_reg_72 );

    SC_METHOD(thread_zext_ln8_fu_145_p1);
    sensitive << ( i_0_reg_72 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln9_fu_193_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime_address0, "(port)spksTime_address0");
    sc_trace(mVcdFile, spksTime_ce0, "(port)spksTime_ce0");
    sc_trace(mVcdFile, spksTime_q0, "(port)spksTime_q0");
    sc_trace(mVcdFile, FR_address0, "(port)FR_address0");
    sc_trace(mVcdFile, FR_ce0, "(port)FR_ce0");
    sc_trace(mVcdFile, FR_we0, "(port)FR_we0");
    sc_trace(mVcdFile, FR_d0, "(port)FR_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_132_p1, "grp_fu_132_p1");
    sc_trace(mVcdFile, reg_139, "reg_139");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, zext_ln8_fu_145_p1, "zext_ln8_fu_145_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_156_p2, "i_fu_156_p2");
    sc_trace(mVcdFile, i_reg_339, "i_reg_339");
    sc_trace(mVcdFile, icmp_ln8_fu_150_p2, "icmp_ln8_fu_150_p2");
    sc_trace(mVcdFile, grp_fu_135_p1, "grp_fu_135_p1");
    sc_trace(mVcdFile, tmp_2_reg_349, "tmp_2_reg_349");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, tmp_1_reg_354, "tmp_1_reg_354");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_112_p2, "grp_fu_112_p2");
    sc_trace(mVcdFile, tmp_3_reg_360, "tmp_3_reg_360");
    sc_trace(mVcdFile, bitcast_ln10_1_fu_167_p1, "bitcast_ln10_1_fu_167_p1");
    sc_trace(mVcdFile, bitcast_ln10_1_reg_366, "bitcast_ln10_1_reg_366");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, icmp_ln10_3_fu_174_p2, "icmp_ln10_3_fu_174_p2");
    sc_trace(mVcdFile, icmp_ln10_3_reg_371, "icmp_ln10_3_reg_371");
    sc_trace(mVcdFile, bitcast_ln10_2_fu_180_p1, "bitcast_ln10_2_fu_180_p1");
    sc_trace(mVcdFile, bitcast_ln10_2_reg_376, "bitcast_ln10_2_reg_376");
    sc_trace(mVcdFile, icmp_ln10_4_fu_187_p2, "icmp_ln10_4_fu_187_p2");
    sc_trace(mVcdFile, icmp_ln10_4_reg_381, "icmp_ln10_4_reg_381");
    sc_trace(mVcdFile, j_fu_199_p2, "j_fu_199_p2");
    sc_trace(mVcdFile, j_reg_389, "j_reg_389");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, icmp_ln9_fu_193_p2, "icmp_ln9_fu_193_p2");
    sc_trace(mVcdFile, icmp_ln10_2_fu_219_p2, "icmp_ln10_2_fu_219_p2");
    sc_trace(mVcdFile, icmp_ln10_2_reg_399, "icmp_ln10_2_reg_399");
    sc_trace(mVcdFile, icmp_ln10_5_fu_234_p2, "icmp_ln10_5_fu_234_p2");
    sc_trace(mVcdFile, icmp_ln10_5_reg_404, "icmp_ln10_5_reg_404");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, or_ln10_fu_270_p2, "or_ln10_fu_270_p2");
    sc_trace(mVcdFile, or_ln10_reg_415, "or_ln10_reg_415");
    sc_trace(mVcdFile, count_2_fu_318_p3, "count_2_fu_318_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_fu_117_p2, "grp_fu_117_p2");
    sc_trace(mVcdFile, tmp_5_reg_426, "tmp_5_reg_426");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, i_0_reg_72, "i_0_reg_72");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, count_1_reg_84, "count_1_reg_84");
    sc_trace(mVcdFile, j_0_reg_96, "j_0_reg_96");
    sc_trace(mVcdFile, zext_ln10_fu_205_p1, "zext_ln10_fu_205_p1");
    sc_trace(mVcdFile, zext_ln14_fu_326_p1, "zext_ln14_fu_326_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_132_p0, "grp_fu_132_p0");
    sc_trace(mVcdFile, grp_fu_135_p0, "grp_fu_135_p0");
    sc_trace(mVcdFile, trunc_ln10_fu_170_p1, "trunc_ln10_fu_170_p1");
    sc_trace(mVcdFile, trunc_ln10_1_fu_183_p1, "trunc_ln10_1_fu_183_p1");
    sc_trace(mVcdFile, tmp_7_fu_210_p4, "tmp_7_fu_210_p4");
    sc_trace(mVcdFile, tmp_s_fu_225_p4, "tmp_s_fu_225_p4");
    sc_trace(mVcdFile, bitcast_ln10_fu_240_p1, "bitcast_ln10_fu_240_p1");
    sc_trace(mVcdFile, tmp_6_fu_244_p4, "tmp_6_fu_244_p4");
    sc_trace(mVcdFile, trunc_ln10_2_fu_254_p1, "trunc_ln10_2_fu_254_p1");
    sc_trace(mVcdFile, icmp_ln10_1_fu_264_p2, "icmp_ln10_1_fu_264_p2");
    sc_trace(mVcdFile, icmp_ln10_fu_258_p2, "icmp_ln10_fu_258_p2");
    sc_trace(mVcdFile, or_ln10_1_fu_276_p2, "or_ln10_1_fu_276_p2");
    sc_trace(mVcdFile, and_ln10_fu_280_p2, "and_ln10_fu_280_p2");
    sc_trace(mVcdFile, grp_fu_122_p2, "grp_fu_122_p2");
    sc_trace(mVcdFile, or_ln10_2_fu_291_p2, "or_ln10_2_fu_291_p2");
    sc_trace(mVcdFile, and_ln10_2_fu_295_p2, "and_ln10_2_fu_295_p2");
    sc_trace(mVcdFile, grp_fu_127_p2, "grp_fu_127_p2");
    sc_trace(mVcdFile, and_ln10_1_fu_285_p2, "and_ln10_1_fu_285_p2");
    sc_trace(mVcdFile, and_ln10_3_fu_300_p2, "and_ln10_3_fu_300_p2");
    sc_trace(mVcdFile, and_ln10_4_fu_306_p2, "and_ln10_4_fu_306_p2");
    sc_trace(mVcdFile, count_fu_312_p2, "count_fu_312_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1;
    delete estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2;
    delete estimate_FR_ddiv_64ns_64ns_64_31_1_U3;
    delete estimate_FR_dcmp_64ns_64ns_1_2_1_U4;
    delete estimate_FR_dcmp_64ns_64ns_1_2_1_U5;
    delete estimate_FR_sitodp_32ns_64_6_1_U6;
    delete estimate_FR_sitodp_32ns_64_6_1_U7;
}

void estimate_FR::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void estimate_FR::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_3FB999999999999A;
}

void estimate_FR::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_3;
}

void estimate_FR::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv5_5;
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        count_1_reg_84 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        count_1_reg_84 = count_2_fu_318_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        i_0_reg_72 = i_reg_339.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_72 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        j_0_reg_96 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        j_0_reg_96 = j_reg_389.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        bitcast_ln10_1_reg_366 = bitcast_ln10_1_fu_167_p1.read();
        bitcast_ln10_2_reg_376 = bitcast_ln10_2_fu_180_p1.read();
        icmp_ln10_3_reg_371 = icmp_ln10_3_fu_174_p2.read();
        icmp_ln10_4_reg_381 = icmp_ln10_4_fu_187_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_339 = i_fu_156_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_193_p2.read()))) {
        icmp_ln10_2_reg_399 = icmp_ln10_2_fu_219_p2.read();
        icmp_ln10_5_reg_404 = icmp_ln10_5_fu_234_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        j_reg_389 = j_fu_199_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        or_ln10_reg_415 = or_ln10_fu_270_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        reg_139 = grp_fu_132_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_1_reg_354 = grp_fu_107_p2.read();
        tmp_3_reg_360 = grp_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_2_reg_349 = grp_fu_135_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        tmp_5_reg_426 = grp_fu_117_p2.read();
    }
}

void estimate_FR::thread_FR_address0() {
    FR_address0 =  (sc_lv<8>) (zext_ln14_fu_326_p1.read());
}

void estimate_FR::thread_FR_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        FR_ce0 = ap_const_logic_1;
    } else {
        FR_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_FR_d0() {
    FR_d0 = tmp_5_reg_426.read();
}

void estimate_FR::thread_FR_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) {
        FR_we0 = ap_const_logic_1;
    } else {
        FR_we0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_and_ln10_1_fu_285_p2() {
    and_ln10_1_fu_285_p2 = (and_ln10_fu_280_p2.read() & grp_fu_122_p2.read());
}

void estimate_FR::thread_and_ln10_2_fu_295_p2() {
    and_ln10_2_fu_295_p2 = (or_ln10_reg_415.read() & or_ln10_2_fu_291_p2.read());
}

void estimate_FR::thread_and_ln10_3_fu_300_p2() {
    and_ln10_3_fu_300_p2 = (and_ln10_2_fu_295_p2.read() & grp_fu_127_p2.read());
}

void estimate_FR::thread_and_ln10_4_fu_306_p2() {
    and_ln10_4_fu_306_p2 = (and_ln10_1_fu_285_p2.read() & and_ln10_3_fu_300_p2.read());
}

void estimate_FR::thread_and_ln10_fu_280_p2() {
    and_ln10_fu_280_p2 = (or_ln10_reg_415.read() & or_ln10_1_fu_276_p2.read());
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void estimate_FR::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void estimate_FR::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void estimate_FR::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void estimate_FR::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void estimate_FR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_FR::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void estimate_FR::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void estimate_FR::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void estimate_FR::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void estimate_FR::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void estimate_FR::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void estimate_FR::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_150_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_150_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_bitcast_ln10_1_fu_167_p1() {
    bitcast_ln10_1_fu_167_p1 = tmp_1_reg_354.read();
}

void estimate_FR::thread_bitcast_ln10_2_fu_180_p1() {
    bitcast_ln10_2_fu_180_p1 = tmp_3_reg_360.read();
}

void estimate_FR::thread_bitcast_ln10_fu_240_p1() {
    bitcast_ln10_fu_240_p1 = spksTime_q0.read();
}

void estimate_FR::thread_count_2_fu_318_p3() {
    count_2_fu_318_p3 = (!and_ln10_4_fu_306_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln10_4_fu_306_p2.read()[0].to_bool())? count_fu_312_p2.read(): count_1_reg_84.read());
}

void estimate_FR::thread_count_fu_312_p2() {
    count_fu_312_p2 = (!ap_const_lv32_1.is_01() || !count_1_reg_84.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(count_1_reg_84.read()));
}

void estimate_FR::thread_grp_fu_132_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_132_p0 = count_1_reg_84.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_132_p0 = zext_ln8_fu_145_p1.read();
    } else {
        grp_fu_132_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void estimate_FR::thread_grp_fu_135_p0() {
    grp_fu_135_p0 = esl_zext<32,8>(i_fu_156_p2.read());
}

void estimate_FR::thread_i_fu_156_p2() {
    i_fu_156_p2 = (!i_0_reg_72.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_72.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void estimate_FR::thread_icmp_ln10_1_fu_264_p2() {
    icmp_ln10_1_fu_264_p2 = (!trunc_ln10_2_fu_254_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln10_2_fu_254_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln10_2_fu_219_p2() {
    icmp_ln10_2_fu_219_p2 = (!tmp_7_fu_210_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_210_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_icmp_ln10_3_fu_174_p2() {
    icmp_ln10_3_fu_174_p2 = (!trunc_ln10_fu_170_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln10_fu_170_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln10_4_fu_187_p2() {
    icmp_ln10_4_fu_187_p2 = (!trunc_ln10_1_fu_183_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln10_1_fu_183_p1.read() == ap_const_lv52_0);
}

void estimate_FR::thread_icmp_ln10_5_fu_234_p2() {
    icmp_ln10_5_fu_234_p2 = (!tmp_s_fu_225_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_s_fu_225_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_icmp_ln10_fu_258_p2() {
    icmp_ln10_fu_258_p2 = (!tmp_6_fu_244_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_244_p4.read() != ap_const_lv11_7FF);
}

void estimate_FR::thread_icmp_ln8_fu_150_p2() {
    icmp_ln8_fu_150_p2 = (!i_0_reg_72.read().is_01() || !ap_const_lv8_C8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_72.read() == ap_const_lv8_C8);
}

void estimate_FR::thread_icmp_ln9_fu_193_p2() {
    icmp_ln9_fu_193_p2 = (!j_0_reg_96.read().is_01() || !ap_const_lv7_4B.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_96.read() == ap_const_lv7_4B);
}

void estimate_FR::thread_j_fu_199_p2() {
    j_fu_199_p2 = (!j_0_reg_96.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_96.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void estimate_FR::thread_or_ln10_1_fu_276_p2() {
    or_ln10_1_fu_276_p2 = (icmp_ln10_3_reg_371.read() | icmp_ln10_2_reg_399.read());
}

void estimate_FR::thread_or_ln10_2_fu_291_p2() {
    or_ln10_2_fu_291_p2 = (icmp_ln10_4_reg_381.read() | icmp_ln10_5_reg_404.read());
}

void estimate_FR::thread_or_ln10_fu_270_p2() {
    or_ln10_fu_270_p2 = (icmp_ln10_1_fu_264_p2.read() | icmp_ln10_fu_258_p2.read());
}

void estimate_FR::thread_spksTime_address0() {
    spksTime_address0 =  (sc_lv<7>) (zext_ln10_fu_205_p1.read());
}

void estimate_FR::thread_spksTime_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        spksTime_ce0 = ap_const_logic_1;
    } else {
        spksTime_ce0 = ap_const_logic_0;
    }
}

void estimate_FR::thread_tmp_6_fu_244_p4() {
    tmp_6_fu_244_p4 = bitcast_ln10_fu_240_p1.read().range(62, 52);
}

void estimate_FR::thread_tmp_7_fu_210_p4() {
    tmp_7_fu_210_p4 = bitcast_ln10_1_reg_366.read().range(62, 52);
}

void estimate_FR::thread_tmp_s_fu_225_p4() {
    tmp_s_fu_225_p4 = bitcast_ln10_2_reg_376.read().range(62, 52);
}

void estimate_FR::thread_trunc_ln10_1_fu_183_p1() {
    trunc_ln10_1_fu_183_p1 = bitcast_ln10_2_fu_180_p1.read().range(52-1, 0);
}

void estimate_FR::thread_trunc_ln10_2_fu_254_p1() {
    trunc_ln10_2_fu_254_p1 = bitcast_ln10_fu_240_p1.read().range(52-1, 0);
}

void estimate_FR::thread_trunc_ln10_fu_170_p1() {
    trunc_ln10_fu_170_p1 = bitcast_ln10_1_fu_167_p1.read().range(52-1, 0);
}

void estimate_FR::thread_zext_ln10_fu_205_p1() {
    zext_ln10_fu_205_p1 = esl_zext<64,7>(j_0_reg_96.read());
}

void estimate_FR::thread_zext_ln14_fu_326_p1() {
    zext_ln14_fu_326_p1 = esl_zext<64,8>(i_0_reg_72.read());
}

void estimate_FR::thread_zext_ln8_fu_145_p1() {
    zext_ln8_fu_145_p1 = esl_zext<32,8>(i_0_reg_72.read());
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_150_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_193_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<54>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_address0\" :  \"" << spksTime_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"spksTime_ce0\" :  \"" << spksTime_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime_q0\" :  \"" << spksTime_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_address0\" :  \"" << FR_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_ce0\" :  \"" << FR_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_we0\" :  \"" << FR_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_d0\" :  \"" << FR_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

