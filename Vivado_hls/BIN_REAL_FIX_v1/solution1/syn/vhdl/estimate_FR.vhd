-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity estimate_FR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    spksTime_V : IN STD_LOGIC_VECTOR (11 downto 0);
    FR_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    FR_V_ap_vld : OUT STD_LOGIC;
    c_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    c_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_V_o_ap_vld : OUT STD_LOGIC;
    Num : IN STD_LOGIC_VECTOR (31 downto 0);
    finish_i : IN STD_LOGIC;
    finish_o : OUT STD_LOGIC;
    finish_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of estimate_FR is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=148,HLS_SYN_LUT=208,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv45_1999 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001100110011001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal finish_read_read_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal finish_read_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_V_read_reg_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_fu_95_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_reg_179 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1496_fu_127_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln1496_reg_184 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1496_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_144_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_1_reg_198 : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln214_fu_154_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1497_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1118_fu_91_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_95_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln703_fu_101_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_1_fu_107_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_120_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_V_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                c_V_read_reg_174 <= c_V_i;
                finish_read_reg_170 <= (0=>finish_i, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln1496_reg_189 <= icmp_ln1496_fu_131_p2;
                    zext_ln1496_reg_184(21 downto 10) <= zext_ln1496_fu_127_p1(21 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln1118_1_reg_198 <= mul_ln1118_1_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul_ln1118_reg_179 <= mul_ln1118_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1496_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_reg_193 <= tmp_V_fu_136_p2;
            end if;
        end if;
    end process;
    zext_ln1496_reg_184(9 downto 0) <= "0000000000";
    zext_ln1496_reg_184(44 downto 22) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, finish_read_read_fu_56_p2, ap_CS_fsm_state2, icmp_ln1496_fu_131_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1496_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    FR_V <= std_logic_vector(unsigned(shl_ln703_fu_101_p2) + unsigned(shl_ln703_1_fu_107_p2));

    FR_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, finish_read_read_fu_56_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            FR_V_ap_vld <= ap_const_logic_1;
        else 
            FR_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln214_fu_154_p2 <= std_logic_vector(unsigned(c_V_read_reg_174) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_V_o_assign_proc : process(ap_start, ap_CS_fsm_state1, c_V_i, finish_read_read_fu_56_p2, finish_read_reg_170, icmp_ln1496_reg_189, add_ln214_fu_154_p2, ap_CS_fsm_state4, icmp_ln1497_fu_150_p2)
    begin
        if (((icmp_ln1497_fu_150_p2 = ap_const_lv1_0) and (icmp_ln1496_reg_189 = ap_const_lv1_0) and (finish_read_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_V_o <= add_ln214_fu_154_p2;
        elsif (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_V_o <= ap_const_lv8_0;
        else 
            c_V_o <= c_V_i;
        end if; 
    end process;


    c_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, finish_read_read_fu_56_p2, finish_read_reg_170, icmp_ln1496_reg_189, ap_CS_fsm_state4, icmp_ln1497_fu_150_p2)
    begin
        if ((((icmp_ln1497_fu_150_p2 = ap_const_lv1_0) and (icmp_ln1496_reg_189 = ap_const_lv1_0) and (finish_read_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            c_V_o_ap_vld <= ap_const_logic_1;
        else 
            c_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    finish_o_assign_proc : process(ap_start, ap_CS_fsm_state1, finish_i, finish_read_read_fu_56_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            finish_o <= ap_const_logic_0;
        else 
            finish_o <= finish_i;
        end if; 
    end process;


    finish_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, finish_read_read_fu_56_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (finish_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            finish_o_ap_vld <= ap_const_logic_1;
        else 
            finish_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    finish_read_read_fu_56_p2 <= (0=>finish_i, others=>'-');
    icmp_ln1496_fu_131_p2 <= "1" when (signed(zext_ln1496_fu_127_p1) < signed(mul_ln1118_reg_179)) else "0";
    icmp_ln1497_fu_150_p2 <= "1" when (signed(zext_ln1496_reg_184) > signed(mul_ln1118_1_reg_198)) else "0";
    mul_ln1118_1_fu_144_p0 <= tmp_V_reg_193;
    mul_ln1118_1_fu_144_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_144_p0) * signed('0' &ap_const_lv45_1999))), 45));
    mul_ln1118_fu_95_p0 <= sext_ln1118_fu_91_p0;
    mul_ln1118_fu_95_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_95_p0) * signed('0' &ap_const_lv45_1999))), 45));
    sext_ln1118_fu_91_p0 <= Num;
    shl_ln1_fu_120_p3 <= (spksTime_V & ap_const_lv10_0);
    shl_ln703_1_fu_107_p2 <= std_logic_vector(shift_left(unsigned(c_V_i),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln703_fu_101_p2 <= std_logic_vector(shift_left(unsigned(c_V_i),to_integer(unsigned('0' & ap_const_lv8_3(8-1 downto 0)))));
    tmp_V_fu_136_p0 <= Num;
    tmp_V_fu_136_p2 <= std_logic_vector(signed(tmp_V_fu_136_p0) + signed(ap_const_lv32_1));
    zext_ln1496_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_120_p3),45));
end behav;
