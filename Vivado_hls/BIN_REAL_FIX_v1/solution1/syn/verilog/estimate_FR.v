// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=148,HLS_SYN_LUT=208,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V,
        FR_V,
        FR_V_ap_vld,
        c_V_i,
        c_V_o,
        c_V_o_ap_vld,
        Num,
        finish_i,
        finish_o,
        finish_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] spksTime_V;
output  [7:0] FR_V;
output   FR_V_ap_vld;
input  [7:0] c_V_i;
output  [7:0] c_V_o;
output   c_V_o_ap_vld;
input  [31:0] Num;
input   finish_i;
output   finish_o;
output   finish_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg FR_V_ap_vld;
reg[7:0] c_V_o;
reg c_V_o_ap_vld;
reg finish_o;
reg finish_o_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] finish_read_read_fu_56_p2;
reg   [0:0] finish_read_reg_170;
reg   [7:0] c_V_read_reg_174;
wire   [44:0] mul_ln1118_fu_95_p2;
reg   [44:0] mul_ln1118_reg_179;
wire   [44:0] zext_ln1496_fu_127_p1;
reg   [44:0] zext_ln1496_reg_184;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1496_fu_131_p2;
reg   [0:0] icmp_ln1496_reg_189;
wire   [31:0] tmp_V_fu_136_p2;
reg   [31:0] tmp_V_reg_193;
wire   [44:0] mul_ln1118_1_fu_144_p2;
reg   [44:0] mul_ln1118_1_reg_198;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln214_fu_154_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1497_fu_150_p2;
wire  signed [31:0] sext_ln1118_fu_91_p0;
wire  signed [31:0] mul_ln1118_fu_95_p0;
wire   [7:0] shl_ln703_fu_101_p2;
wire   [7:0] shl_ln703_1_fu_107_p2;
wire   [21:0] shl_ln1_fu_120_p3;
wire  signed [31:0] tmp_V_fu_136_p0;
wire  signed [31:0] mul_ln1118_1_fu_144_p0;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_V_read_reg_174 <= c_V_i;
        finish_read_reg_170 <= finish_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1496_reg_189 <= icmp_ln1496_fu_131_p2;
        zext_ln1496_reg_184[21 : 10] <= zext_ln1496_fu_127_p1[21 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln1118_1_reg_198 <= mul_ln1118_1_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln1118_reg_179 <= mul_ln1118_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1496_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_reg_193 <= tmp_V_fu_136_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        FR_V_ap_vld = 1'b1;
    end else begin
        FR_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1497_fu_150_p2 == 1'd0) & (icmp_ln1496_reg_189 == 1'd0) & (finish_read_reg_170 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_V_o = add_ln214_fu_154_p2;
    end else if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_V_o = 8'd0;
    end else begin
        c_V_o = c_V_i;
    end
end

always @ (*) begin
    if ((((icmp_ln1497_fu_150_p2 == 1'd0) & (icmp_ln1496_reg_189 == 1'd0) & (finish_read_reg_170 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        c_V_o_ap_vld = 1'b1;
    end else begin
        c_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        finish_o = 1'd0;
    end else begin
        finish_o = finish_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        finish_o_ap_vld = 1'b1;
    end else begin
        finish_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((ap_start == 1'b1) & (finish_read_read_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1496_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_V = (shl_ln703_fu_101_p2 + shl_ln703_1_fu_107_p2);

assign add_ln214_fu_154_p2 = (c_V_read_reg_174 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign finish_read_read_fu_56_p2 = finish_i;

assign icmp_ln1496_fu_131_p2 = (($signed(zext_ln1496_fu_127_p1) < $signed(mul_ln1118_reg_179)) ? 1'b1 : 1'b0);

assign icmp_ln1497_fu_150_p2 = (($signed(zext_ln1496_reg_184) > $signed(mul_ln1118_1_reg_198)) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_144_p0 = tmp_V_reg_193;

assign mul_ln1118_1_fu_144_p2 = ($signed(mul_ln1118_1_fu_144_p0) * $signed('h1999));

assign mul_ln1118_fu_95_p0 = sext_ln1118_fu_91_p0;

assign mul_ln1118_fu_95_p2 = ($signed(mul_ln1118_fu_95_p0) * $signed('h1999));

assign sext_ln1118_fu_91_p0 = Num;

assign shl_ln1_fu_120_p3 = {{spksTime_V}, {10'd0}};

assign shl_ln703_1_fu_107_p2 = c_V_i << 8'd1;

assign shl_ln703_fu_101_p2 = c_V_i << 8'd3;

assign tmp_V_fu_136_p0 = Num;

assign tmp_V_fu_136_p2 = ($signed(tmp_V_fu_136_p0) + $signed(32'd1));

assign zext_ln1496_fu_127_p1 = shl_ln1_fu_120_p3;

always @ (posedge ap_clk) begin
    zext_ln1496_reg_184[9:0] <= 10'b0000000000;
    zext_ln1496_reg_184[44:22] <= 23'b00000000000000000000000;
end

endmodule //estimate_FR
