// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "estimate_FR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic estimate_FR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic estimate_FR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> estimate_FR::ap_ST_fsm_state1 = "1";
const sc_lv<4> estimate_FR::ap_ST_fsm_state2 = "10";
const sc_lv<4> estimate_FR::ap_ST_fsm_state3 = "100";
const sc_lv<4> estimate_FR::ap_ST_fsm_state4 = "1000";
const sc_lv<32> estimate_FR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> estimate_FR::ap_const_lv1_0 = "0";
const sc_lv<32> estimate_FR::ap_const_lv32_1 = "1";
const sc_lv<32> estimate_FR::ap_const_lv32_2 = "10";
const sc_lv<1> estimate_FR::ap_const_lv1_1 = "1";
const sc_lv<8> estimate_FR::ap_const_lv8_0 = "00000000";
const sc_lv<32> estimate_FR::ap_const_lv32_3 = "11";
const sc_lv<45> estimate_FR::ap_const_lv45_1999 = "1100110011001";
const sc_lv<8> estimate_FR::ap_const_lv8_3 = "11";
const sc_lv<8> estimate_FR::ap_const_lv8_1 = "1";
const sc_lv<10> estimate_FR::ap_const_lv10_0 = "0000000000";
const bool estimate_FR::ap_const_boolean_1 = true;

estimate_FR::estimate_FR(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_FR_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_56_p2 );
    sensitive << ( shl_ln703_fu_101_p2 );
    sensitive << ( shl_ln703_1_fu_107_p2 );

    SC_METHOD(thread_FR_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_56_p2 );

    SC_METHOD(thread_add_ln214_fu_154_p2);
    sensitive << ( c_V_read_reg_174 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_c_V_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_V_i );
    sensitive << ( finish_read_read_fu_56_p2 );
    sensitive << ( finish_read_reg_170 );
    sensitive << ( icmp_ln1496_reg_189 );
    sensitive << ( add_ln214_fu_154_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln1497_fu_150_p2 );

    SC_METHOD(thread_c_V_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_56_p2 );
    sensitive << ( finish_read_reg_170 );
    sensitive << ( icmp_ln1496_reg_189 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln1497_fu_150_p2 );

    SC_METHOD(thread_finish_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_i );
    sensitive << ( finish_read_read_fu_56_p2 );

    SC_METHOD(thread_finish_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_56_p2 );

    SC_METHOD(thread_finish_read_read_fu_56_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_i );

    SC_METHOD(thread_icmp_ln1496_fu_131_p2);
    sensitive << ( mul_ln1118_reg_179 );
    sensitive << ( zext_ln1496_fu_127_p1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln1497_fu_150_p2);
    sensitive << ( finish_read_reg_170 );
    sensitive << ( zext_ln1496_reg_184 );
    sensitive << ( icmp_ln1496_reg_189 );
    sensitive << ( mul_ln1118_1_reg_198 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln1118_1_fu_144_p0);
    sensitive << ( tmp_V_reg_193 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln1118_1_fu_144_p2);
    sensitive << ( mul_ln1118_1_fu_144_p0 );

    SC_METHOD(thread_mul_ln1118_fu_95_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln1118_fu_91_p0 );

    SC_METHOD(thread_mul_ln1118_fu_95_p2);
    sensitive << ( mul_ln1118_fu_95_p0 );

    SC_METHOD(thread_sext_ln1118_fu_91_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( Num );

    SC_METHOD(thread_shl_ln1_fu_120_p3);
    sensitive << ( spksTime_V );

    SC_METHOD(thread_shl_ln703_1_fu_107_p2);
    sensitive << ( c_V_i );

    SC_METHOD(thread_shl_ln703_fu_101_p2);
    sensitive << ( c_V_i );

    SC_METHOD(thread_tmp_V_fu_136_p0);
    sensitive << ( Num );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_V_fu_136_p2);
    sensitive << ( tmp_V_fu_136_p0 );

    SC_METHOD(thread_zext_ln1496_fu_127_p1);
    sensitive << ( shl_ln1_fu_120_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( finish_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln1496_fu_131_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "estimate_FR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, spksTime_V, "(port)spksTime_V");
    sc_trace(mVcdFile, FR_V, "(port)FR_V");
    sc_trace(mVcdFile, FR_V_ap_vld, "(port)FR_V_ap_vld");
    sc_trace(mVcdFile, c_V_i, "(port)c_V_i");
    sc_trace(mVcdFile, c_V_o, "(port)c_V_o");
    sc_trace(mVcdFile, c_V_o_ap_vld, "(port)c_V_o_ap_vld");
    sc_trace(mVcdFile, Num, "(port)Num");
    sc_trace(mVcdFile, finish_i, "(port)finish_i");
    sc_trace(mVcdFile, finish_o, "(port)finish_o");
    sc_trace(mVcdFile, finish_o_ap_vld, "(port)finish_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, finish_read_read_fu_56_p2, "finish_read_read_fu_56_p2");
    sc_trace(mVcdFile, finish_read_reg_170, "finish_read_reg_170");
    sc_trace(mVcdFile, c_V_read_reg_174, "c_V_read_reg_174");
    sc_trace(mVcdFile, mul_ln1118_fu_95_p2, "mul_ln1118_fu_95_p2");
    sc_trace(mVcdFile, mul_ln1118_reg_179, "mul_ln1118_reg_179");
    sc_trace(mVcdFile, zext_ln1496_fu_127_p1, "zext_ln1496_fu_127_p1");
    sc_trace(mVcdFile, zext_ln1496_reg_184, "zext_ln1496_reg_184");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln1496_fu_131_p2, "icmp_ln1496_fu_131_p2");
    sc_trace(mVcdFile, icmp_ln1496_reg_189, "icmp_ln1496_reg_189");
    sc_trace(mVcdFile, tmp_V_fu_136_p2, "tmp_V_fu_136_p2");
    sc_trace(mVcdFile, tmp_V_reg_193, "tmp_V_reg_193");
    sc_trace(mVcdFile, mul_ln1118_1_fu_144_p2, "mul_ln1118_1_fu_144_p2");
    sc_trace(mVcdFile, mul_ln1118_1_reg_198, "mul_ln1118_1_reg_198");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln214_fu_154_p2, "add_ln214_fu_154_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln1497_fu_150_p2, "icmp_ln1497_fu_150_p2");
    sc_trace(mVcdFile, sext_ln1118_fu_91_p0, "sext_ln1118_fu_91_p0");
    sc_trace(mVcdFile, mul_ln1118_fu_95_p0, "mul_ln1118_fu_95_p0");
    sc_trace(mVcdFile, shl_ln703_fu_101_p2, "shl_ln703_fu_101_p2");
    sc_trace(mVcdFile, shl_ln703_1_fu_107_p2, "shl_ln703_1_fu_107_p2");
    sc_trace(mVcdFile, shl_ln1_fu_120_p3, "shl_ln1_fu_120_p3");
    sc_trace(mVcdFile, tmp_V_fu_136_p0, "tmp_V_fu_136_p0");
    sc_trace(mVcdFile, mul_ln1118_1_fu_144_p0, "mul_ln1118_1_fu_144_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("estimate_FR.hdltvin.dat");
    mHdltvoutHandle.open("estimate_FR.hdltvout.dat");
}

estimate_FR::~estimate_FR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void estimate_FR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_V_read_reg_174 = c_V_i.read();
        finish_read_reg_170 =  (sc_lv<1>) (finish_i.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        icmp_ln1496_reg_189 = icmp_ln1496_fu_131_p2.read();
        zext_ln1496_reg_184 = zext_ln1496_fu_127_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mul_ln1118_1_reg_198 = mul_ln1118_1_fu_144_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_0))) {
        mul_ln1118_reg_179 = mul_ln1118_fu_95_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln1496_fu_131_p2.read()))) {
        tmp_V_reg_193 = tmp_V_fu_136_p2.read();
    }
}

void estimate_FR::thread_FR_V() {
    FR_V = (!shl_ln703_fu_101_p2.read().is_01() || !shl_ln703_1_fu_107_p2.read().is_01())? sc_lv<8>(): (sc_biguint<8>(shl_ln703_fu_101_p2.read()) + sc_biguint<8>(shl_ln703_1_fu_107_p2.read()));
}

void estimate_FR::thread_FR_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1))) {
        FR_V_ap_vld = ap_const_logic_1;
    } else {
        FR_V_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_add_ln214_fu_154_p2() {
    add_ln214_fu_154_p2 = (!c_V_read_reg_174.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(c_V_read_reg_174.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void estimate_FR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void estimate_FR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void estimate_FR::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void estimate_FR::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void estimate_FR::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void estimate_FR::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void estimate_FR::thread_c_V_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(finish_read_reg_170.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln1496_reg_189.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln1497_fu_150_p2.read()))) {
        c_V_o = add_ln214_fu_154_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1))) {
        c_V_o = ap_const_lv8_0;
    } else {
        c_V_o = c_V_i.read();
    }
}

void estimate_FR::thread_c_V_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(finish_read_reg_170.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln1496_reg_189.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln1497_fu_150_p2.read())))) {
        c_V_o_ap_vld = ap_const_logic_1;
    } else {
        c_V_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_finish_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1))) {
        finish_o =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        finish_o = finish_i.read();
    }
}

void estimate_FR::thread_finish_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1))) {
        finish_o_ap_vld = ap_const_logic_1;
    } else {
        finish_o_ap_vld = ap_const_logic_0;
    }
}

void estimate_FR::thread_finish_read_read_fu_56_p2() {
    finish_read_read_fu_56_p2 =  (sc_lv<1>) (finish_i.read());
}

void estimate_FR::thread_icmp_ln1496_fu_131_p2() {
    icmp_ln1496_fu_131_p2 = (!zext_ln1496_fu_127_p1.read().is_01() || !mul_ln1118_reg_179.read().is_01())? sc_lv<1>(): (sc_bigint<45>(zext_ln1496_fu_127_p1.read()) < sc_bigint<45>(mul_ln1118_reg_179.read()));
}

void estimate_FR::thread_icmp_ln1497_fu_150_p2() {
    icmp_ln1497_fu_150_p2 = (!zext_ln1496_reg_184.read().is_01() || !mul_ln1118_1_reg_198.read().is_01())? sc_lv<1>(): (sc_bigint<45>(zext_ln1496_reg_184.read()) > sc_bigint<45>(mul_ln1118_1_reg_198.read()));
}

void estimate_FR::thread_mul_ln1118_1_fu_144_p0() {
    mul_ln1118_1_fu_144_p0 = tmp_V_reg_193.read();
}

void estimate_FR::thread_mul_ln1118_1_fu_144_p2() {
    mul_ln1118_1_fu_144_p2 = (!mul_ln1118_1_fu_144_p0.read().is_01() || !ap_const_lv45_1999.is_01())? sc_lv<45>(): sc_bigint<32>(mul_ln1118_1_fu_144_p0.read()) * sc_biguint<45>(ap_const_lv45_1999);
}

void estimate_FR::thread_mul_ln1118_fu_95_p0() {
    mul_ln1118_fu_95_p0 = sext_ln1118_fu_91_p0.read();
}

void estimate_FR::thread_mul_ln1118_fu_95_p2() {
    mul_ln1118_fu_95_p2 = (!mul_ln1118_fu_95_p0.read().is_01() || !ap_const_lv45_1999.is_01())? sc_lv<45>(): sc_bigint<32>(mul_ln1118_fu_95_p0.read()) * sc_biguint<45>(ap_const_lv45_1999);
}

void estimate_FR::thread_sext_ln1118_fu_91_p0() {
    sext_ln1118_fu_91_p0 = Num.read();
}

void estimate_FR::thread_shl_ln1_fu_120_p3() {
    shl_ln1_fu_120_p3 = esl_concat<12,10>(spksTime_V.read(), ap_const_lv10_0);
}

void estimate_FR::thread_shl_ln703_1_fu_107_p2() {
    shl_ln703_1_fu_107_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): c_V_i.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void estimate_FR::thread_shl_ln703_fu_101_p2() {
    shl_ln703_fu_101_p2 = (!ap_const_lv8_3.is_01())? sc_lv<8>(): c_V_i.read() << (unsigned short)ap_const_lv8_3.to_uint();
}

void estimate_FR::thread_tmp_V_fu_136_p0() {
    tmp_V_fu_136_p0 = Num.read();
}

void estimate_FR::thread_tmp_V_fu_136_p2() {
    tmp_V_fu_136_p2 = (!tmp_V_fu_136_p0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_V_fu_136_p0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void estimate_FR::thread_zext_ln1496_fu_127_p1() {
    zext_ln1496_fu_127_p1 = esl_zext<45,22>(shl_ln1_fu_120_p3.read());
}

void estimate_FR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(finish_read_read_fu_56_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln1496_fu_131_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void estimate_FR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"spksTime_V\" :  \"" << spksTime_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V\" :  \"" << FR_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FR_V_ap_vld\" :  \"" << FR_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_V_i\" :  \"" << c_V_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_o\" :  \"" << c_V_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_o_ap_vld\" :  \"" << c_V_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Num\" :  \"" << Num.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"finish_i\" :  \"" << finish_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finish_o\" :  \"" << finish_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finish_o_ap_vld\" :  \"" << finish_o_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

