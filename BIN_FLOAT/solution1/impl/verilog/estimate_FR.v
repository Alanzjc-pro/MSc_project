// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.714000,HLS_SYN_LAT=55201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=22,HLS_SYN_FF=5498,HLS_SYN_LUT=7586,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_address0,
        spksTime_ce0,
        spksTime_q0,
        FR_address0,
        FR_ce0,
        FR_we0,
        FR_d0
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] spksTime_address0;
output   spksTime_ce0;
input  [63:0] spksTime_q0;
output  [7:0] FR_address0;
output   FR_ce0;
output   FR_we0;
output  [63:0] FR_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_ce0;
reg FR_ce0;
reg FR_we0;

(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_132_p1;
reg   [63:0] reg_139;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state22;
wire   [31:0] zext_ln8_fu_145_p1;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_156_p2;
reg   [7:0] i_reg_339;
wire   [0:0] icmp_ln8_fu_150_p2;
wire   [63:0] grp_fu_135_p1;
reg   [63:0] tmp_2_reg_349;
wire   [63:0] grp_fu_107_p2;
reg   [63:0] tmp_1_reg_354;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_112_p2;
reg   [63:0] tmp_3_reg_360;
wire   [63:0] bitcast_ln10_1_fu_167_p1;
reg   [63:0] bitcast_ln10_1_reg_366;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln10_3_fu_174_p2;
reg   [0:0] icmp_ln10_3_reg_371;
wire   [63:0] bitcast_ln10_2_fu_180_p1;
reg   [63:0] bitcast_ln10_2_reg_376;
wire   [0:0] icmp_ln10_4_fu_187_p2;
reg   [0:0] icmp_ln10_4_reg_381;
wire   [6:0] j_fu_199_p2;
reg   [6:0] j_reg_389;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln9_fu_193_p2;
wire   [0:0] icmp_ln10_2_fu_219_p2;
reg   [0:0] icmp_ln10_2_reg_399;
wire   [0:0] icmp_ln10_5_fu_234_p2;
reg   [0:0] icmp_ln10_5_reg_404;
wire    ap_CS_fsm_state16;
wire   [0:0] or_ln10_fu_270_p2;
reg   [0:0] or_ln10_reg_415;
wire   [31:0] count_2_fu_318_p3;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_117_p2;
reg   [63:0] tmp_5_reg_426;
wire    ap_CS_fsm_state53;
reg   [7:0] i_0_reg_72;
wire    ap_CS_fsm_state54;
reg   [31:0] count_1_reg_84;
reg   [6:0] j_0_reg_96;
wire   [63:0] zext_ln10_fu_205_p1;
wire   [63:0] zext_ln14_fu_326_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_132_p0;
wire   [31:0] grp_fu_135_p0;
wire   [51:0] trunc_ln10_fu_170_p1;
wire   [51:0] trunc_ln10_1_fu_183_p1;
wire   [10:0] tmp_7_fu_210_p4;
wire   [10:0] tmp_s_fu_225_p4;
wire   [63:0] bitcast_ln10_fu_240_p1;
wire   [10:0] tmp_6_fu_244_p4;
wire   [51:0] trunc_ln10_2_fu_254_p1;
wire   [0:0] icmp_ln10_1_fu_264_p2;
wire   [0:0] icmp_ln10_fu_258_p2;
wire   [0:0] or_ln10_1_fu_276_p2;
wire   [0:0] and_ln10_fu_280_p2;
wire   [0:0] grp_fu_122_p2;
wire   [0:0] or_ln10_2_fu_291_p2;
wire   [0:0] and_ln10_2_fu_295_p2;
wire   [0:0] grp_fu_127_p2;
wire   [0:0] and_ln10_1_fu_285_p2;
wire   [0:0] and_ln10_3_fu_300_p2;
wire   [0:0] and_ln10_4_fu_306_p2;
wire   [31:0] count_fu_312_p2;
reg   [53:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
end

estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_139),
    .din1(64'd4591870180066957722),
    .ce(1'b1),
    .dout(grp_fu_107_p2)
);

estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_349),
    .din1(64'd4591870180066957722),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

estimate_FR_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
estimate_FR_ddiv_64ns_64ns_64_31_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_139),
    .din1(64'd4591870180066957722),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

estimate_FR_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_FR_dcmp_64ns_64ns_1_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(spksTime_q0),
    .din1(tmp_1_reg_354),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_122_p2)
);

estimate_FR_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
estimate_FR_dcmp_64ns_64ns_1_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(spksTime_q0),
    .din1(tmp_3_reg_360),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_127_p2)
);

estimate_FR_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
estimate_FR_sitodp_32ns_64_6_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_132_p0),
    .ce(1'b1),
    .dout(grp_fu_132_p1)
);

estimate_FR_sitodp_32ns_64_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
estimate_FR_sitodp_32ns_64_6_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .ce(1'b1),
    .dout(grp_fu_135_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        count_1_reg_84 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        count_1_reg_84 <= count_2_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_0_reg_72 <= i_reg_339;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_72 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_reg_96 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_0_reg_96 <= j_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bitcast_ln10_1_reg_366 <= bitcast_ln10_1_fu_167_p1;
        bitcast_ln10_2_reg_376 <= bitcast_ln10_2_fu_180_p1;
        icmp_ln10_3_reg_371 <= icmp_ln10_3_fu_174_p2;
        icmp_ln10_4_reg_381 <= icmp_ln10_4_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_339 <= i_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln9_fu_193_p2 == 1'd0))) begin
        icmp_ln10_2_reg_399 <= icmp_ln10_2_fu_219_p2;
        icmp_ln10_5_reg_404 <= icmp_ln10_5_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_389 <= j_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        or_ln10_reg_415 <= or_ln10_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_139 <= grp_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_1_reg_354 <= grp_fu_107_p2;
        tmp_3_reg_360 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_2_reg_349 <= grp_fu_135_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_5_reg_426 <= grp_fu_117_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        FR_ce0 = 1'b1;
    end else begin
        FR_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        FR_we0 = 1'b1;
    end else begin
        FR_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_150_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_150_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_132_p0 = count_1_reg_84;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_132_p0 = zext_ln8_fu_145_p1;
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        spksTime_ce0 = 1'b1;
    end else begin
        spksTime_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln9_fu_193_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FR_address0 = zext_ln14_fu_326_p1;

assign FR_d0 = tmp_5_reg_426;

assign and_ln10_1_fu_285_p2 = (grp_fu_122_p2 & and_ln10_fu_280_p2);

assign and_ln10_2_fu_295_p2 = (or_ln10_reg_415 & or_ln10_2_fu_291_p2);

assign and_ln10_3_fu_300_p2 = (grp_fu_127_p2 & and_ln10_2_fu_295_p2);

assign and_ln10_4_fu_306_p2 = (and_ln10_3_fu_300_p2 & and_ln10_1_fu_285_p2);

assign and_ln10_fu_280_p2 = (or_ln10_reg_415 & or_ln10_1_fu_276_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln10_1_fu_167_p1 = tmp_1_reg_354;

assign bitcast_ln10_2_fu_180_p1 = tmp_3_reg_360;

assign bitcast_ln10_fu_240_p1 = spksTime_q0;

assign count_2_fu_318_p3 = ((and_ln10_4_fu_306_p2[0:0] === 1'b1) ? count_fu_312_p2 : count_1_reg_84);

assign count_fu_312_p2 = (32'd1 + count_1_reg_84);

assign grp_fu_135_p0 = i_fu_156_p2;

assign i_fu_156_p2 = (i_0_reg_72 + 8'd1);

assign icmp_ln10_1_fu_264_p2 = ((trunc_ln10_2_fu_254_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_219_p2 = ((tmp_7_fu_210_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln10_3_fu_174_p2 = ((trunc_ln10_fu_170_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_4_fu_187_p2 = ((trunc_ln10_1_fu_183_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_5_fu_234_p2 = ((tmp_s_fu_225_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_258_p2 = ((tmp_6_fu_244_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_150_p2 = ((i_0_reg_72 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_193_p2 = ((j_0_reg_96 == 7'd75) ? 1'b1 : 1'b0);

assign j_fu_199_p2 = (j_0_reg_96 + 7'd1);

assign or_ln10_1_fu_276_p2 = (icmp_ln10_3_reg_371 | icmp_ln10_2_reg_399);

assign or_ln10_2_fu_291_p2 = (icmp_ln10_5_reg_404 | icmp_ln10_4_reg_381);

assign or_ln10_fu_270_p2 = (icmp_ln10_fu_258_p2 | icmp_ln10_1_fu_264_p2);

assign spksTime_address0 = zext_ln10_fu_205_p1;

assign tmp_6_fu_244_p4 = {{bitcast_ln10_fu_240_p1[62:52]}};

assign tmp_7_fu_210_p4 = {{bitcast_ln10_1_reg_366[62:52]}};

assign tmp_s_fu_225_p4 = {{bitcast_ln10_2_reg_376[62:52]}};

assign trunc_ln10_1_fu_183_p1 = bitcast_ln10_2_fu_180_p1[51:0];

assign trunc_ln10_2_fu_254_p1 = bitcast_ln10_fu_240_p1[51:0];

assign trunc_ln10_fu_170_p1 = bitcast_ln10_1_fu_167_p1[51:0];

assign zext_ln10_fu_205_p1 = j_0_reg_96;

assign zext_ln14_fu_326_p1 = i_0_reg_72;

assign zext_ln8_fu_145_p1 = i_0_reg_72;

endmodule //estimate_FR
