// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="estimate_FR,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.614688,HLS_SYN_LAT=2413,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=398,HLS_SYN_LUT=578,HLS_VERSION=2019_1}" *)

module estimate_FR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spksTime_V_address0,
        spksTime_V_ce0,
        spksTime_V_q0,
        spksTime_V_address1,
        spksTime_V_ce1,
        spksTime_V_q1,
        FR_V_address0,
        FR_V_ce0,
        FR_V_we0,
        FR_V_d0,
        FR_V_q0,
        ISI_V_address0,
        ISI_V_ce0,
        ISI_V_we0,
        ISI_V_d0,
        ISI_V_q0
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] spksTime_V_address0;
output   spksTime_V_ce0;
input  [19:0] spksTime_V_q0;
output  [6:0] spksTime_V_address1;
output   spksTime_V_ce1;
input  [19:0] spksTime_V_q1;
output  [6:0] FR_V_address0;
output   FR_V_ce0;
output   FR_V_we0;
output  [16:0] FR_V_d0;
input  [16:0] FR_V_q0;
output  [6:0] ISI_V_address0;
output   ISI_V_ce0;
output   ISI_V_we0;
output  [16:0] ISI_V_d0;
input  [16:0] ISI_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg spksTime_V_ce0;
reg spksTime_V_ce1;
reg[6:0] FR_V_address0;
reg FR_V_ce0;
reg FR_V_we0;
reg[16:0] FR_V_d0;
reg[6:0] ISI_V_address0;
reg ISI_V_ce0;
reg ISI_V_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_155_p2;
reg   [6:0] i_reg_279;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln11_fu_161_p1;
reg   [63:0] zext_ln11_reg_284;
wire   [0:0] icmp_ln10_fu_149_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_186_p2;
reg   [6:0] FR_V_addr_1_reg_307;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln1494_fu_244_p2;
reg   [0:0] icmp_ln1494_reg_322;
wire    ap_CS_fsm_state33;
wire   [16:0] add_ln703_fu_264_p2;
reg   [16:0] add_ln703_reg_326;
wire   [6:0] j_fu_270_p2;
wire    ap_CS_fsm_state34;
reg   [6:0] i_0_reg_126;
wire    ap_CS_fsm_state3;
reg   [6:0] j_0_reg_137;
wire   [63:0] zext_ln11_1_fu_166_p1;
wire   [63:0] zext_ln15_fu_192_p1;
wire   [63:0] zext_ln16_fu_214_p1;
wire   [16:0] p_Val2_3_fu_219_p4;
wire   [16:0] trunc_ln703_fu_171_p1;
wire   [16:0] trunc_ln703_1_fu_175_p1;
wire   [6:0] add_ln16_fu_208_p2;
wire   [24:0] grp_fu_202_p2;
wire   [17:0] lhs_V_fu_230_p1;
wire   [17:0] rhs_V_fu_234_p1;
wire   [17:0] ret_V_fu_238_p2;
wire   [12:0] trunc_ln1_fu_250_p4;
wire   [16:0] p_Val2_5_fu_260_p1;
reg    grp_fu_202_ap_start;
wire    grp_fu_202_ap_done;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

estimate_FR_sdiv_25ns_17s_25_29_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 25 ))
estimate_FR_sdiv_25ns_17s_25_29_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_202_ap_start),
    .done(grp_fu_202_ap_done),
    .din0(25'd8388608),
    .din1(ISI_V_q0),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_126 <= i_reg_279;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_126 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_137 <= 7'd1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        j_0_reg_137 <= j_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        FR_V_addr_1_reg_307 <= zext_ln15_fu_192_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln1494_fu_244_p2 == 1'd1))) begin
        add_ln703_reg_326 <= add_ln703_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_279 <= i_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        icmp_ln1494_reg_322 <= icmp_ln1494_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln11_reg_284[6 : 0] <= zext_ln11_fu_161_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33))) begin
        FR_V_address0 = FR_V_addr_1_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        FR_V_address0 = zext_ln16_fu_214_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        FR_V_address0 = 64'd0;
    end else begin
        FR_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        FR_V_ce0 = 1'b1;
    end else begin
        FR_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        FR_V_d0 = add_ln703_reg_326;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        FR_V_d0 = {{grp_fu_202_p2[20:4]}};
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        FR_V_d0 = 17'd0;
    end else begin
        FR_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state34) & (icmp_ln1494_reg_322 == 1'd1)))) begin
        FR_V_we0 = 1'b1;
    end else begin
        FR_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ISI_V_address0 = zext_ln15_fu_192_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_address0 = zext_ln11_reg_284;
    end else begin
        ISI_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        ISI_V_ce0 = 1'b1;
    end else begin
        ISI_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ISI_V_we0 = 1'b1;
    end else begin
        ISI_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_186_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_186_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_202_ap_start = 1'b1;
    end else begin
        grp_fu_202_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_V_ce0 = 1'b1;
    end else begin
        spksTime_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        spksTime_V_ce1 = 1'b1;
    end else begin
        spksTime_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ISI_V_d0 = (trunc_ln703_fu_171_p1 - trunc_ln703_1_fu_175_p1);

assign add_ln16_fu_208_p2 = ($signed(j_0_reg_137) + $signed(7'd127));

assign add_ln703_fu_264_p2 = (FR_V_q0 + p_Val2_5_fu_260_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_155_p2 = (i_0_reg_126 + 7'd1);

assign icmp_ln10_fu_149_p2 = ((i_0_reg_126 == 7'd74) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_244_p2 = (($signed(ret_V_fu_238_p2) > $signed(18'd960)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_186_p2 = ((j_0_reg_137 == 7'd74) ? 1'b1 : 1'b0);

assign j_fu_270_p2 = (j_0_reg_137 + 7'd1);

assign lhs_V_fu_230_p1 = p_Val2_3_fu_219_p4;

assign p_Val2_3_fu_219_p4 = {{grp_fu_202_p2[20:4]}};

assign p_Val2_5_fu_260_p1 = trunc_ln1_fu_250_p4;

assign ret_V_fu_238_p2 = (lhs_V_fu_230_p1 - rhs_V_fu_234_p1);

assign rhs_V_fu_234_p1 = FR_V_q0;

assign spksTime_V_address0 = zext_ln11_1_fu_166_p1;

assign spksTime_V_address1 = zext_ln11_fu_161_p1;

assign trunc_ln1_fu_250_p4 = {{ret_V_fu_238_p2[17:5]}};

assign trunc_ln703_1_fu_175_p1 = spksTime_V_q1[16:0];

assign trunc_ln703_fu_171_p1 = spksTime_V_q0[16:0];

assign zext_ln11_1_fu_166_p1 = i_fu_155_p2;

assign zext_ln11_fu_161_p1 = i_0_reg_126;

assign zext_ln15_fu_192_p1 = j_0_reg_137;

assign zext_ln16_fu_214_p1 = add_ln16_fu_208_p2;

always @ (posedge ap_clk) begin
    zext_ln11_reg_284[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //estimate_FR
